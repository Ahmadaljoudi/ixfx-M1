{"version":3,"sources":["../src/Util.ts"],"sourcesContent":["import { number as guardNumber } from \"./Guards.js\";\r\nimport {untilMatch} from \"./Text.js\";\r\n\r\nexport * as IterableAsync from './IterableAsync.js';\r\n//export { KeyValue } from './KeyValue.js';\r\n\r\n/**\r\n * Returns `fallback` if `v` is NaN, otherwise returns `v`\r\n * @param v\r\n * @param fallback \r\n * @returns \r\n */\r\nexport const ifNaN = (v:number, fallback:number):number => {\r\n  if (Number.isNaN(v)) return fallback;\r\n  return v;\r\n};\r\n\r\n\r\n/**\r\n * Returns true if `x` is a power of two\r\n * @param x \r\n * @returns True if `x` is a power of two\r\n */\r\nexport const isPowerOfTwo = (x:number) => Math.log2(x) % 1 === 0;\r\n\r\n/**\r\n * Returns the relative difference from the `initial` value\r\n * ```js\r\n * const rel = relativeDifference(100);\r\n * rel(100); // 1\r\n * rel(150); // 1.5\r\n * rel(50);  // 0.5\r\n * ```\r\n * \r\n * The code for this is simple:\r\n * ```js\r\n * const relativeDifference = (initial) => (v) => v/initial\r\n * ```\r\n * @param {number} initial \r\n * @returns \r\n */\r\nexport const relativeDifference = (initial:number) => (v:number) => v/initial;\r\n\r\n// try {\r\n//   if (typeof window !== `undefined`) {\r\n//     //eslint-disable-next-line functional/immutable-data,@typescript-eslint/no-explicit-any\r\n//     (window as any).ixfx = {...(window as any).ixfx, clamp, clampIndex, flip, interpolate, interpolateAngle, proportion, relativeDifference, scale, scalePercent, wrap, wrapInteger, wrapRange};\r\n//   }\r\n// } catch { /* no-op */ }\r\n\r\n/**\r\n * Returns a field on object `o` by a dotted path.\r\n * ```\r\n * const d = {\r\n *  accel: {x: 1, y: 2, z: 3},\r\n *  gyro:  {x: 4, y: 5, z: 6}\r\n * };\r\n * getFieldByPath(d, `accel.x`); // 1\r\n * getFieldByPath(d, `gyro.z`);  // 6\r\n * getFieldByPath(d, `gyro`);    // {x:4, y:5, z:6}\r\n * getFieldByPath(d, ``);        // Returns original object\r\n * ```\r\n * \r\n * If a field does not exist, `undefined` is returned.\r\n * Use {@link getFieldPaths} to get a list of paths.\r\n * @param o \r\n * @param path \r\n * @returns \r\n */\r\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const getFieldByPath = (o:any, path:string = ``):any|undefined => {\r\n  if (path.length === 0) return o;\r\n  if (path in o) {\r\n    return o[path];\r\n  } else {\r\n    const start = untilMatch(path, `.`);\r\n    if (start in o) {\r\n      return getFieldByPath(o[start], path.substring(start.length+1));\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Returns a list of paths for all the fields on `o`\r\n * ```\r\n * const d = {\r\n *  accel: {x: 1, y: 2, z: 3},\r\n *  gyro:  {x: 4, y: 5, z: 6}\r\n * };\r\n * const paths = getFieldPaths(d); \r\n * // Yields [ `accel.x`, `accel.y`,`accel.z`,`gyro.x`,`gyro.y`,`gyro.z` ]\r\n * ```\r\n * \r\n * Use {@link getFieldByPath} to fetch data by this 'path' string.\r\n * @param o \r\n * @returns \r\n */\r\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const getFieldPaths = (o:any):readonly string[] => {\r\n  const paths:string[] = [];\r\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const probe = (o:any, prefix = ``) => {\r\n    if (typeof o === `object`) {\r\n      const keys = Object.keys(o);\r\n      if (prefix.length > 0) prefix += `.`;\r\n      keys.forEach(k => probe(o[k], prefix + k));\r\n    } else {\r\n      //eslint-disable-next-line functional/immutable-data\r\n      paths.push(prefix);\r\n    }\r\n  };\r\n  probe(o);\r\n  return paths;\r\n};\r\n\r\n/**\r\n * Rounds `v` up to the nearest multiple of `multiple`\r\n * ```\r\n * roundMultiple(19, 20); // 20\r\n * roundMultiple(21, 20); // 40\r\n * ```\r\n * @param v \r\n * @param multiple \r\n * @returns \r\n */\r\nexport const roundUpToMultiple = (v:number, multiple:number):number => {\r\n  guardNumber(v, `nonZero`, `v`);\r\n  guardNumber(multiple, `nonZero`, `muliple`);\r\n  return Math.ceil(v/multiple)*multiple;\r\n};\r\n\r\nexport type ToString<V> = (itemToMakeStringFor: V) => string;\r\n\r\n/**\r\n * Function that returns true if `a` and `b` are considered equal\r\n */\r\nexport type IsEqual<V> = (a:V, b:V) => boolean;\r\n\r\n/**\r\n * Default comparer function is equiv to checking `a === b`\r\n */\r\nexport const isEqualDefault = <V>(a:V, b:V):boolean => a === b;\r\n\r\n/**\r\n * Comparer returns true if string representation of `a` and `b` are equal.\r\n * Uses `toStringDefault` to generate a string representation (`JSON.stringify`)\r\n * @returns True if the contents of `a` and `b` are equal\r\n */\r\nexport const isEqualValueDefault = <V>(a:V, b:V):boolean => {\r\n  // âœ” UNIT TESTED\r\n  if (a === b) return true; // Object references are the same, or string values are the same\r\n  return toStringDefault(a) === toStringDefault(b); // String representations are the same\r\n};\r\n\r\n/**\r\n * A default converter to string that uses JSON.stringify if its an object, or the thing itself if it's a string\r\n */\r\nexport const toStringDefault = <V>(itemToMakeStringFor:V):string => ((typeof itemToMakeStringFor === `string`) ? itemToMakeStringFor : JSON.stringify(itemToMakeStringFor));\r\n\r\nexport const runningiOS = () => [\r\n  `iPad Simulator`,\r\n  `iPhone Simulator`,\r\n  `iPod Simulator`,\r\n  `iPad`,\r\n  `iPhone`,\r\n  `iPod`\r\n].includes(navigator.platform)\r\n  // iPad on iOS 13 detection\r\n  || (navigator.userAgent.includes(`Mac`) && `ontouchend` in document);\r\n\r\n\r\ntry {\r\n  if (typeof window !== `undefined`) {\r\n    //eslint-disable-next-line functional/immutable-data,@typescript-eslint/no-explicit-any\r\n    (window as any).ixfx = {...(window as any).ixfx,  getFieldByPath, getFieldPaths };\r\n  }\r\n} catch { /* no-op */ }"],"mappings":";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYO,IAAM,QAAQ,CAAC,GAAU,aAA2B;AACzD,MAAI,OAAO,MAAM,CAAC;AAAG,WAAO;AAC5B,SAAO;AACT;AAQO,IAAM,eAAe,CAAC,MAAa,KAAK,KAAK,CAAC,IAAI,MAAM;AAkBxD,IAAM,qBAAqB,CAAC,YAAmB,CAAC,MAAa,IAAE;AA6B/D,IAAM,iBAAiB,CAAC,GAAO,OAAc,OAAqB;AACvE,MAAI,KAAK,WAAW;AAAG,WAAO;AAC9B,MAAI,QAAQ,GAAG;AACb,WAAO,EAAE;AAAA,EACX,OAAO;AACL,UAAM,QAAQ,WAAW,MAAM,GAAG;AAClC,QAAI,SAAS,GAAG;AACd,aAAO,eAAe,EAAE,QAAQ,KAAK,UAAU,MAAM,SAAO,CAAC,CAAC;AAAA,IAChE,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAkBO,IAAM,gBAAgB,CAAC,MAA4B;AACxD,QAAM,QAAiB,CAAC;AAExB,QAAM,QAAQ,CAAC,IAAO,SAAS,OAAO;AACpC,QAAI,OAAO,OAAM,UAAU;AACzB,YAAM,OAAO,OAAO,KAAK,EAAC;AAC1B,UAAI,OAAO,SAAS;AAAG,kBAAU;AACjC,WAAK,QAAQ,OAAK,MAAM,GAAE,IAAI,SAAS,CAAC,CAAC;AAAA,IAC3C,OAAO;AAEL,YAAM,KAAK,MAAM;AAAA,IACnB;AAAA,EACF;AACA,QAAM,CAAC;AACP,SAAO;AACT;AAYO,IAAM,oBAAoB,CAAC,GAAU,aAA2B;AACrE,SAAY,GAAG,WAAW,GAAG;AAC7B,SAAY,UAAU,WAAW,SAAS;AAC1C,SAAO,KAAK,KAAK,IAAE,QAAQ,IAAE;AAC/B;AAYO,IAAM,iBAAiB,CAAI,GAAK,MAAgB,MAAM;AAOtD,IAAM,sBAAsB,CAAI,GAAK,MAAgB;AAE1D,MAAI,MAAM;AAAG,WAAO;AACpB,SAAO,gBAAgB,CAAC,MAAM,gBAAgB,CAAC;AACjD;AAKO,IAAM,kBAAkB,CAAI,wBAAmC,OAAO,wBAAwB,WAAY,sBAAsB,KAAK,UAAU,mBAAmB;AAElK,IAAM,aAAa,MAAM;AAAA,EAC9B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,EAAE,SAAS,UAAU,QAAQ,KAEvB,UAAU,UAAU,SAAS,KAAK,KAAK,gBAAgB;AAG7D,IAAI;AACF,MAAI,OAAO,WAAW,aAAa;AAEjC,IAAC,OAAe,OAAO,EAAC,GAAI,OAAe,MAAO,gBAAgB,cAAc;AAAA,EAClF;AACF,QAAE;AAAoB;","names":[]}