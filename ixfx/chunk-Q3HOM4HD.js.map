{"version":3,"sources":["../src/visual/index.ts","../src/visual/Drawing.ts","../src/visual/Plot.ts","../src/visual/Palette.ts"],"sourcesContent":["import * as Drawing from './Drawing.js';\r\nimport * as Svg from './Svg.js';\r\nimport * as Plot from './Plot.js';\r\nimport * as Palette from  './Palette';\r\nimport * as Colour from './Colour.js';\r\n\r\n/**\r\n * Colour interpolation, scale generation and parsing\r\n * \r\n * Overview\r\n * * {@link interpolate}: Blend colours\r\n * * {@link scale}: Produce colour scale\r\n * * {@link opacity}: Give a colour opacity\r\n */\r\nexport {Colour};\r\n\r\nexport {Palette,  Drawing, Svg, Plot};\r\n\r\n// @ts-ignore\r\n//eslint-disable-next-line functional/immutable-data\r\nif (window !== undefined) window.ixfx = {Drawing, Svg, Plot, Palette, Colour};","import * as Points from '../geometry/Point.js';\r\nimport * as Paths from '../geometry/Path.js';\r\nimport * as Lines from '../geometry/Line.js';\r\nimport {array as guardArray} from '../Guards.js';\r\nimport * as Circles from '../geometry/Circle.js';\r\nimport * as Arcs from '../geometry/Arc.js';\r\nimport * as Beziers from '../geometry/Bezier.js';\r\nimport * as Rects from '../geometry/Rect.js';\r\nimport * as Ellipses from'../geometry/Ellipse.js';\r\nimport * as Colours from '../visual/Colour.js';\r\n\r\n//import * as color2k from 'color2k';\r\n\r\nimport {stack, Stack} from '../collections/index.js';\r\nimport {resolveEl} from '../dom/Util.js';\r\n\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst PIPI = Math.PI * 2;\r\n\r\ntype CanvasCtxQuery = null | string | CanvasRenderingContext2D | HTMLCanvasElement;\r\n\r\n/**\r\n * Gets a 2d drawing context from canvas element or query, or throws an error\r\n * @param canvasElCtxOrQuery Canvas element reference or DOM query\r\n * @returns Drawing context.\r\n */\r\nexport const getCtx = (canvasElCtxOrQuery:CanvasCtxQuery): CanvasRenderingContext2D => {\r\n  if (canvasElCtxOrQuery === null) throw Error(`canvasElCtxOrQuery null. Must be a 2d drawing context or Canvas element`);\r\n  if (canvasElCtxOrQuery === undefined) throw Error(`canvasElCtxOrQuery undefined. Must be a 2d drawing context or Canvas element`);\r\n  \r\n  const ctx = (canvasElCtxOrQuery instanceof CanvasRenderingContext2D) ?\r\n    canvasElCtxOrQuery : (canvasElCtxOrQuery instanceof HTMLCanvasElement) ?\r\n      canvasElCtxOrQuery.getContext(`2d`) : (typeof canvasElCtxOrQuery === `string`) ?\r\n        resolveEl<HTMLCanvasElement>(canvasElCtxOrQuery).getContext(`2d`): canvasElCtxOrQuery;\r\n  if (ctx === null) throw new Error(`Could not create 2d context for canvas`);\r\n  return ctx;\r\n};\r\n\r\n/**\r\n * Makes a helper object that wraps together a bunch of drawing functions that all use the same drawing context\r\n * @param ctxOrCanvasEl Drawing context or canvs element reference\r\n * @param canvasBounds Bounds of drawing (optional). Used for limiting `textBlock`\r\n * @returns \r\n */\r\nexport const makeHelper = (ctxOrCanvasEl:CanvasCtxQuery, canvasBounds?:Rects.Rect) => {\r\n  // TODO: Is there a way of automagically defining makeHelper to avoid repetition and keep typesafety and JSDoc?\r\n  const ctx = getCtx(ctxOrCanvasEl);\r\n  return {\r\n    paths(pathsToDraw: Paths.Path[], opts?: DrawingOpts): void {\r\n      paths(ctx, pathsToDraw, opts);\r\n    },\r\n    line(lineToDraw: Lines.Line|Lines.Line[], opts?: DrawingOpts): void {\r\n      line(ctx, lineToDraw, opts);\r\n    },\r\n    rect(rectsToDraw:Rects.RectPositioned|Rects.RectPositioned[], opts?:DrawingOpts & { filled?:boolean}): void {\r\n      rect(ctx, rectsToDraw, opts);\r\n    },\r\n    bezier(bezierToDraw: Beziers.QuadraticBezier|Beziers.CubicBezier, opts?:DrawingOpts): void {\r\n      bezier(ctx, bezierToDraw, opts);\r\n    },\r\n    connectedPoints(pointsToDraw: Points.Point[], opts?: DrawingOpts & {loop?: boolean}): void {\r\n      connectedPoints(ctx, pointsToDraw, opts);\r\n    },\r\n    pointLabels(pointsToDraw: Points.Point[], opts?:DrawingOpts): void {\r\n      pointLabels(ctx, pointsToDraw, opts);\r\n    },\r\n    dot(dotPosition: Points.Point|Points.Point[], opts?: DrawingOpts & {radius: number, outlined?: boolean, filled?: boolean}): void {\r\n      dot(ctx, dotPosition, opts);\r\n    },\r\n    circle(circlesToDraw:Circles.CirclePositioned|Circles.CirclePositioned[], opts:DrawingOpts):void {\r\n      circle(ctx, circlesToDraw, opts);\r\n    },\r\n    arc(arcsToDraw:Arcs.ArcPositioned|Arcs.ArcPositioned[], opts:DrawingOpts):void {\r\n      arc(ctx, arcsToDraw, opts);\r\n    },\r\n    textBlock(lines:string[], opts:DrawingOpts & { anchor:Points.Point, anchorPadding?:number, bounds?: Rects.RectPositioned}):void {\r\n      if (opts.bounds === undefined && canvasBounds !== undefined) opts = {...opts, bounds: {...canvasBounds, x:0, y:0 }};\r\n      textBlock(ctx, lines, opts);\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Drawing options\r\n */\r\ntype DrawingOpts = {\r\n  /**\r\n   * Stroke style\r\n   */\r\n  readonly strokeStyle?:string\r\n  /**\r\n   * Fill style\r\n   */\r\n  readonly fillStyle?:string\r\n  /**\r\n   * If true, diagnostic helpers will be drawn\r\n   */\r\n  readonly debug?:boolean\r\n};\r\n\r\n/**\r\n * Creates a drawing op to apply provided options\r\n * @param opts Drawing options that apply\r\n * @returns Stack\r\n */\r\nconst optsOp = (opts:DrawingOpts):StackOp => coloringOp(opts.strokeStyle, opts.fillStyle);\r\n\r\n/**\r\n * Applies drawing options to `ctx`, returning a {@link DrawingStack}\r\n * @param ctx Context\r\n * @param opts Options\r\n * @returns \r\n */\r\nconst applyOpts = (ctx:CanvasRenderingContext2D, opts:DrawingOpts = {}):DrawingStack => {\r\n  if (ctx === undefined) throw Error(`ctx undefined`);\r\n\r\n  // Create a drawing stack, pushing an op generated from drawing options\r\n  const stack = drawingStack(ctx).push(optsOp(opts));\r\n  \r\n  // Apply stack to context\r\n  stack.apply();\r\n  return stack;\r\n};\r\n\r\n/**\r\n * Draws one or more arcs.\r\n * @param ctx \r\n * @param arcs \r\n * @param opts \r\n */\r\nexport const arc = (ctx:CanvasRenderingContext2D, arcs:Arcs.ArcPositioned|ReadonlyArray<Arcs.ArcPositioned>, opts:DrawingOpts = {}) => {\r\n  applyOpts(ctx, opts);\r\n\r\n  const draw = (arc:Arcs.ArcPositioned) => {\r\n    ctx.beginPath();\r\n    ctx.arc(arc.x, arc.y, arc.radius, arc.startRadian, arc.endRadian);\r\n    ctx.stroke();\r\n  };\r\n\r\n  if (Array.isArray(arcs)) {\r\n    arcs.forEach(draw);\r\n  } else draw(arcs as Arcs.ArcPositioned);\r\n};\r\n\r\n/**\r\n * A drawing stack operation\r\n */\r\ntype StackOp = (ctx:CanvasRenderingContext2D) => void;\r\n\r\n/**\r\n * A drawing stack (immutable)\r\n */\r\ntype DrawingStack = Readonly<{\r\n  /**\r\n   * Push a new drawing op\r\n   * @param op Operation to add\r\n   * @returns stack with added op\r\n   */\r\n  push(op:StackOp):DrawingStack\r\n  /**\r\n   * Pops an operatiomn\r\n   * @returns Drawing stack with item popped\r\n   */\r\n  pop():DrawingStack\r\n  /**\r\n   * Applies drawing stack\r\n   */\r\n  apply():DrawingStack\r\n}>\r\n\r\n/**\r\n * Colouring drawing op. Applies `fillStyle` and `strokeStyle`\r\n * @param strokeStyle \r\n * @param fillStyle \r\n * @returns \r\n */\r\nconst coloringOp = (strokeStyle:string|CanvasGradient|CanvasPattern|undefined, fillStyle:string|CanvasGradient|CanvasPattern|undefined):StackOp => {\r\n\r\n  const apply = (ctx:CanvasRenderingContext2D) => {\r\n    // eslint-disable-next-line functional/immutable-data\r\n    if (fillStyle) ctx.fillStyle = fillStyle;\r\n    // eslint-disable-next-line functional/immutable-data\r\n    if (strokeStyle) ctx.strokeStyle = strokeStyle;\r\n  };\r\n  return apply;\r\n};\r\n\r\n/**\r\n * Creates and returns an immutable drawing stack for a context\r\n * @param ctx Context\r\n * @param stk Initial stack operations\r\n * @returns \r\n */\r\nexport const drawingStack = (ctx:CanvasRenderingContext2D, stk?:Stack<StackOp>):DrawingStack => {\r\n  if (stk === undefined) stk = stack<StackOp>();\r\n\r\n  const push = (op:StackOp):DrawingStack => {\r\n    if (stk === undefined) stk = stack<StackOp>();\r\n    const s = stk.push(op);\r\n    op(ctx);\r\n    return drawingStack(ctx, s);\r\n  };\r\n\r\n  const pop = ():DrawingStack => {\r\n    const s = stk?.pop();\r\n    return drawingStack(ctx, s);\r\n  };\r\n\r\n  const apply = ():DrawingStack => {\r\n    if (stk === undefined) return drawingStack(ctx);\r\n    stk.forEach(op => op(ctx));\r\n    return drawingStack(ctx, stk);\r\n  };\r\n\r\n  return {push, pop, apply};\r\n};\r\n\r\nexport const lineThroughPoints = (ctx:CanvasRenderingContext2D, points:readonly Points.Point[], opts?:DrawingOpts):void => {\r\n  applyOpts(ctx, opts);\r\n  \r\n  // https://stackoverflow.com/questions/7054272/how-to-draw-smooth-curve-through-n-points-using-javascript-html5-canvas\r\n  ctx.moveTo((points[0].x), points[0].y);\r\n\r\n  points.forEach((p, index) => {\r\n    if (index + 2 >= points.length) return;\r\n    const pNext = points[index+1];\r\n    const mid = {\r\n      x: (p.x + pNext.x) / 2,\r\n      y: (p.y + pNext.y) / 2\r\n    };\r\n    const cpX1 = (mid.x + p.x) / 2;\r\n    const cpX2 = (mid.x + pNext.x) / 2;\r\n    ctx.quadraticCurveTo(cpX1, pNext.y, mid.x, mid.y);\r\n    ctx.quadraticCurveTo(cpX2, pNext.y, pNext.x, pNext.y);\r\n  });\r\n};\r\n\r\n/**\r\n * Draws one or more circles. Will draw outline/fill depending on\r\n * whether `strokeStyle` or `fillStyle` params are present in the drawing options.\r\n * @param ctx \r\n * @param circlesToDraw \r\n * @param opts \r\n */\r\nexport const circle = (ctx:CanvasRenderingContext2D, circlesToDraw:Circles.CirclePositioned|readonly Circles.CirclePositioned[], opts:DrawingOpts = {}) => {\r\n  applyOpts(ctx, opts);\r\n\r\n  const draw = (c:Circles.CirclePositioned) => {\r\n    ctx.beginPath();\r\n    ctx.arc(c.x, c.y, c.radius, 0, PIPI);\r\n    if (opts.strokeStyle) ctx.stroke();\r\n    if (opts.fillStyle) ctx.fill();\r\n  };\r\n  if (Array.isArray(circlesToDraw)) circlesToDraw.forEach(draw);\r\n  else draw(circlesToDraw as Circles.CirclePositioned);\r\n};\r\n\r\n/**\r\n * Draws one or more ellipses. Will draw outline/fill depending on\r\n * whether `strokeStyle` or `fillStyle` params are present in the drawing options.\r\n * @param ctx \r\n * @param ellipsesToDraw \r\n * @param opts \r\n */\r\nexport const ellipse = (ctx:CanvasRenderingContext2D, ellipsesToDraw:Ellipses.EllipsePositioned|readonly Ellipses.EllipsePositioned[], opts:DrawingOpts = {}) => {\r\n  applyOpts(ctx, opts);\r\n\r\n  const draw = (e:Ellipses.EllipsePositioned) => {\r\n    ctx.beginPath();\r\n    const rotation = e.rotation ?? 0;\r\n    const startAngle =e.startAngle ?? 0;\r\n    const endAngle = e.endAngle ?? PIPI;\r\n    ctx.ellipse(e.x, e.y, e.radiusX, e.radiusY, rotation, startAngle, endAngle);\r\n    if (opts.strokeStyle) ctx.stroke();\r\n    if (opts.fillStyle) ctx.fill();\r\n  };\r\n  if (Array.isArray(ellipsesToDraw)) ellipsesToDraw.forEach(draw);\r\n  else draw(ellipsesToDraw as Ellipses.EllipsePositioned);\r\n};\r\n\r\n/**\r\n * Draws one or more paths.\r\n * supported paths are quadratic beziers and lines.\r\n * @param ctx\r\n * @param pathsToDraw \r\n * @param opts \r\n */\r\nexport const paths = (ctx: CanvasRenderingContext2D, pathsToDraw: readonly Paths.Path[]|Paths.Path, opts: Readonly<{readonly strokeStyle?: string, readonly debug?: boolean}> = {}) =>  {\r\n  applyOpts(ctx, opts);\r\n\r\n  const draw = (path:Paths.Path) => {\r\n    // Call appropriate drawing function depending on the type of path\r\n    if (Beziers.isQuadraticBezier(path)) quadraticBezier(ctx, path, opts);\r\n    else if (Lines.isLine(path)) line(ctx, path, opts);\r\n    else throw new Error(`Unknown path type ${JSON.stringify(path)}`);\r\n  };\r\n\r\n  if (Array.isArray(pathsToDraw)) pathsToDraw.forEach(draw);\r\n  else draw(pathsToDraw as Paths.Path);\r\n};\r\n\r\n/**\r\n * Draws a line between all the given points.\r\n *\r\n * @param ctx\r\n * @param pts\r\n */\r\nexport const connectedPoints = (ctx: CanvasRenderingContext2D, pts: readonly Points.Point[], opts: {readonly loop?: boolean, readonly strokeStyle?: string} = {}) => {\r\n  const shouldLoop = opts.loop ?? false;\r\n\r\n  guardArray(pts);\r\n  if (pts.length === 0) return;\r\n\r\n  // Throw an error if any point is invalid\r\n  pts.forEach((pt, i) => Points.guard(pt, `Index ${i}`));\r\n\r\n  applyOpts(ctx, opts);\r\n\r\n  // Draw points\r\n  ctx.beginPath();\r\n  ctx.moveTo(pts[0].x, pts[0].y);\r\n  pts.forEach((pt) => ctx.lineTo(pt.x, pt.y));\r\n\r\n  if (shouldLoop) ctx.lineTo(pts[0].x, pts[0].y);\r\n  // if (opts.strokeStyle) ctx.strokeStyle = opts.strokeStyle;\r\n  ctx.stroke();\r\n};\r\n\r\n/**\r\n * Draws labels for a set of points\r\n * @param ctx \r\n * @param pts Points to draw\r\n * @param opts \r\n * @param labels Labels for points\r\n */\r\nexport const pointLabels = (ctx: CanvasRenderingContext2D, pts: readonly Points.Point[], opts: {readonly fillStyle?:string} = {}, labels?:readonly string[]) => {\r\n  if (pts.length === 0) return;\r\n\r\n  // Throw an error if any point is invalid\r\n  pts.forEach((pt, i) => Points.guard(pt, `Index ${i}`));\r\n\r\n  applyOpts(ctx, opts);\r\n\r\n  pts.forEach((pt, i) => {\r\n    const label = (labels !== undefined && i<labels.length) ? labels[i] : i.toString();\r\n    ctx.fillText(label.toString(), pt.x, pt.y);    \r\n  });\r\n};\r\n\r\n/**\r\n * Draws filled circle(s) at provided point(s)\r\n * @param ctx\r\n * @param pos \r\n * @param opts \r\n */\r\nexport const dot = (ctx: CanvasRenderingContext2D, pos: Points.Point|readonly Points.Point[], opts?: DrawingOpts & {readonly radius?: number, readonly outlined?: boolean, readonly filled?: boolean})  => {\r\n  if (opts === undefined) opts = {};\r\n  const radius = opts.radius ?? 10;\r\n  \r\n  applyOpts(ctx, opts);\r\n\r\n  ctx.beginPath();\r\n\r\n  // x&y for arc is the center of circle\r\n  if (Array.isArray(pos)) {\r\n    pos.forEach(p => {\r\n      ctx.arc(p.x, p.y, radius, 0, 2 * Math.PI);\r\n    });\r\n  } else {\r\n    const p = pos as Points.Point;\r\n    ctx.arc(p.x, p.y, radius, 0, 2 * Math.PI);\r\n  }\r\n\r\n  if (opts.filled || !opts.outlined) ctx.fill();\r\n  if (opts.outlined) ctx.stroke();\r\n};\r\n\r\n\r\n/**\r\n * Draws a cubic or quadratic bezier\r\n * @param ctx \r\n * @param bezierToDraw \r\n * @param opts \r\n */\r\nexport const bezier = (ctx: CanvasRenderingContext2D, bezierToDraw: Beziers.QuadraticBezier|Beziers.CubicBezier, opts?: DrawingOpts) => {\r\n  if (Beziers.isQuadraticBezier(bezierToDraw)) {\r\n    quadraticBezier(ctx, bezierToDraw, opts);\r\n  } else if (Beziers.isCubicBezier(bezierToDraw)) {\r\n    cubicBezier(ctx, bezierToDraw, opts);\r\n  }\r\n};\r\n\r\nconst cubicBezier = (ctx: CanvasRenderingContext2D, bezierToDraw: Beziers.CubicBezier, opts: DrawingOpts = {}) => {\r\n  // eslint-disable-next-line functional/no-let\r\n  let stack = applyOpts(ctx, opts);\r\n\r\n  const {a, b, cubic1, cubic2} = bezierToDraw;\r\n  const isDebug = opts.debug ?? false;\r\n\r\n  if (isDebug) {\r\n    /*\r\n     * const ss = ctx.strokeStyle;\r\n     * ctx.strokeStyle = ss;\r\n     */\r\n  }\r\n  ctx.beginPath();\r\n  ctx.moveTo(a.x, a.y);\r\n  ctx.bezierCurveTo(cubic1.x, cubic1.y, cubic2.x, cubic2.y, b.x, b.y);\r\n  ctx.stroke();\r\n\r\n  if (isDebug) {\r\n    stack = stack.push(optsOp({...opts, \r\n      strokeStyle: Colours.opacity(opts.strokeStyle ?? `silver`, 0.6),\r\n      fillStyle: Colours.opacity(opts.fillStyle ?? `yellow`, 0.4)}));\r\n\r\n    stack.apply();\r\n    ctx.moveTo(a.x, a.y);\r\n    ctx.lineTo(cubic1.x, cubic1.y);\r\n    ctx.stroke();\r\n    ctx.moveTo(b.x, b.y);\r\n    ctx.lineTo(cubic2.x, cubic2.y);\r\n    ctx.stroke();\r\n\r\n    ctx.fillText(`a`, a.x + 5, a.y);\r\n    ctx.fillText(`b`, b.x + 5, b.y);\r\n    ctx.fillText(`c1`, cubic1.x + 5, cubic1.y);\r\n    ctx.fillText(`c2`, cubic2.x + 5, cubic2.y);\r\n\r\n    dot(ctx, cubic1, {radius: 3});\r\n    dot(ctx, cubic2, {radius: 3});\r\n    dot(ctx, a, {radius: 3});\r\n    dot(ctx, b, {radius: 3});\r\n    stack = stack.pop();\r\n    stack.apply();\r\n  }\r\n};\r\n\r\nconst quadraticBezier = (ctx: CanvasRenderingContext2D, bezierToDraw: Beziers.QuadraticBezier, opts: DrawingOpts = {}) => {\r\n  const {a, b, quadratic} = bezierToDraw;\r\n  const isDebug = opts.debug ?? false;\r\n  // eslint-disable-next-line functional/no-let\r\n  let stack = applyOpts(ctx, opts);\r\n\r\n  ctx.beginPath();\r\n  ctx.moveTo(a.x, a.y);\r\n  ctx.quadraticCurveTo(quadratic.x, quadratic.y, b.x, b.y);\r\n  ctx.stroke();\r\n\r\n  if (isDebug) {\r\n    /*\r\n     * const fs = ctx.fillStyle;\r\n     * const ss = ctx.strokeStyle;\r\n     * ctx.fillStyle = opts.strokeStyle ?? `gray`;\r\n     * ctx.strokeStyle = opts.strokeStyle ?? `gray`;\r\n     */\r\n    stack = stack.push(optsOp({...opts, \r\n      strokeStyle: Colours.opacity(opts.strokeStyle ?? `silver`, 0.6),\r\n      fillStyle: Colours.opacity(opts.fillStyle ?? `yellow`, 0.4)}));\r\n    connectedPoints(ctx, [a, quadratic, b]);\r\n\r\n    ctx.fillText(`a`, a.x + 5, a.y);\r\n    ctx.fillText(`b`, b.x + 5, b.y);\r\n    ctx.fillText(`h`, quadratic.x + 5, quadratic.y);\r\n    dot(ctx, quadratic, {radius: 3});\r\n    dot(ctx, a, {radius: 3});\r\n    dot(ctx, b, {radius: 3});\r\n    /*\r\n     * ctx.fillStyle = fs;\r\n     * ctx.strokeStyle = ss;\r\n     */\r\n    stack = stack.pop();\r\n    stack.apply();\r\n  }\r\n};\r\n\r\n/**\r\n * Draws one or more lines\r\n * @param ctx\r\n * @param toDraw \r\n * @param opts \r\n */\r\nexport const line = (ctx: CanvasRenderingContext2D, toDraw: Lines.Line|readonly Lines.Line[], opts: {readonly strokeStyle?: string, readonly debug?: boolean} = {}) => {\r\n  const isDebug = opts.debug ?? false;\r\n\r\n  applyOpts(ctx, opts);\r\n\r\n  const draw = (d:Lines.Line) => {\r\n    const {a, b} = d;\r\n    ctx.beginPath();\r\n    ctx.moveTo(a.x, a.y);\r\n    ctx.lineTo(b.x, b.y);\r\n    if (isDebug) { \r\n      ctx.fillText(`a`, a.x, a.y);\r\n      ctx.fillText(`b`, b.x, b.y);\r\n      dot(ctx, a, {radius: 5, strokeStyle: `black`});\r\n      dot(ctx, b, {radius: 5, strokeStyle: `black`});\r\n    }\r\n    ctx.stroke();\r\n  };\r\n\r\n  if (Array.isArray(toDraw)) toDraw.forEach(draw);\r\n  else draw(toDraw as Lines.Line);\r\n};\r\n\r\n/**\r\n * Draws one or more rectangles\r\n * @param ctx\r\n * @param toDraw \r\n * @param opts \r\n */\r\nexport const rect = (ctx: CanvasRenderingContext2D, toDraw: Rects.RectPositioned|readonly Rects.RectPositioned[], opts: DrawingOpts & {readonly filled?:boolean} = {}) => {\r\n  applyOpts(ctx, opts);\r\n\r\n  const draw = (d:Rects.RectPositioned) => {\r\n    if (opts.filled) ctx.fillRect(d.x, d.y, d.width, d.height);\r\n    ctx.strokeRect(d.x, d.y, d.width, d.height);\r\n\r\n    if (opts.debug) {\r\n      pointLabels(ctx, Rects.getCorners(d), undefined, [`NW`, `NE`, `SE`, `SW`]);\r\n    }\r\n  };\r\n\r\n  if (Array.isArray(toDraw)) toDraw.forEach(draw);\r\n  else draw(toDraw as Rects.RectPositioned);\r\n};\r\n\r\n/**\r\n * Draws a block of text. Each array item is considered a line.\r\n * @param ctx\r\n * @param lines \r\n * @param opts \r\n */\r\nexport const textBlock = (ctx:CanvasRenderingContext2D, lines:readonly string[], opts:DrawingOpts & {readonly anchor:Points.Point, readonly anchorPadding?:number, readonly bounds?: Rects.RectPositioned}) => {\r\n  applyOpts(ctx, opts);\r\n  const anchorPadding = opts.anchorPadding ?? 0;\r\n\r\n  const anchor = opts.anchor;\r\n  const bounds = opts.bounds ?? {x:0, y:0, width:1000000, height:1000000};\r\n\r\n  // Measure each line\r\n  const blocks = lines.map(l => ctx.measureText(l));\r\n\r\n  // Get width and height\r\n  const widths = blocks.map(tm => tm.width);\r\n  const heights = blocks.map(tm => tm.actualBoundingBoxAscent + tm.actualBoundingBoxDescent);\r\n\r\n  // Find extremes\r\n  const maxWidth = Math.max(...widths);\r\n  const totalHeight = heights.reduce((acc, val) => acc+val, 0);\r\n\r\n  // eslint-disable-next-line functional/no-let\r\n  let {x, y} = anchor;\r\n\r\n  if (anchor.x + maxWidth > bounds.width) x = bounds.width - (maxWidth + anchorPadding);\r\n  else x -= anchorPadding;\r\n  \r\n  if (x < bounds.x) x = bounds.x + anchorPadding;\r\n\r\n  if (anchor.y + totalHeight > bounds.height) y = bounds.height - (totalHeight + anchorPadding);\r\n  else y -= anchorPadding;\r\n\r\n  if (y < bounds.y) y = bounds.y + anchorPadding;\r\n\r\n  lines.forEach((line, i) => {\r\n    ctx.fillText(line, x, y);\r\n    y += heights[i];\r\n  });\r\n};\r\n\r\nexport type HorizAlign = `left` | `right` | `center`;\r\nexport type VertAlign = `top` | `center` | `bottom`;\r\n\r\n/**\r\n * Draws an aligned text block\r\n */\r\nexport const textBlockAligned = (ctx:CanvasRenderingContext2D, text:readonly string[]|string, opts:DrawingOpts & { readonly bounds: Rects.RectPositioned, readonly horiz?: HorizAlign, readonly vert?:VertAlign}) => {\r\n  const {bounds} = opts;\r\n  const {horiz = `left`, vert = `top`} = opts;\r\n\r\n  //eslint-disable-next-line functional/no-let\r\n  let lines:readonly string[];\r\n  if (typeof text === `string`) lines = [text];\r\n  else lines = text;\r\n\r\n  applyOpts(ctx, opts);\r\n\r\n  ctx.save();\r\n  ctx.translate(bounds.x, bounds.y);\r\n  //eslint-disable-next-line functional/immutable-data\r\n  ctx.textAlign = `left`;\r\n  //eslint-disable-next-line functional/immutable-data\r\n  ctx.textBaseline = `top`;\r\n  const middleX = bounds.width / 2;\r\n  const middleY = bounds.height / 2;\r\n\r\n  // Measure each line\r\n  const blocks = lines.map(l => ctx.measureText(l));\r\n  const heights = blocks.map(tm => tm.actualBoundingBoxAscent + tm.actualBoundingBoxDescent);\r\n  const totalHeight = heights.reduce((acc, val) => acc+val, 0);\r\n  \r\n  //eslint-disable-next-line functional/no-let\r\n  let y = 0;\r\n  if (vert === `center`) y = middleY - totalHeight /2;\r\n  else if (vert === `bottom`) {\r\n    y = bounds.height - totalHeight;\r\n  } \r\n\r\n  lines.forEach((line, i) => {\r\n    //eslint-disable-next-line functional/no-let\r\n    let x = 0;\r\n    if (horiz === `center`) x  = middleX - blocks[i].width / 2;\r\n    else if (horiz === `right`) x = bounds.width - blocks[i].width;\r\n    ctx.fillText(lines[i], x, y);\r\n    y += heights[i];\r\n  });\r\n\r\n  ctx.restore();\r\n};","/* eslint-disable */\r\nimport { minMaxAvg } from '../collections/NumericArrays.js';\r\nimport { CircularArray, MapOfMutable } from '../collections/Interfaces.js';\r\nimport { mapCircular, mapArray} from \"../collections/MapMultiMutable.js\"\r\n\r\nimport { Point} from \"../geometry/Point.js\";\r\nimport { resolveEl, parentSizeCanvas } from \"../dom/Util.js\";\r\nimport {Rect} from '~/geometry/Rect.js';\r\nimport {Colour} from './index.js';\r\n\r\nexport type Plotter = {\r\n  add(value:number, series?:string, skipDrawing?:boolean):void\r\n  drawValue(index:number):void\r\n  clear():void\r\n  dispose():void\r\n}\r\n\r\ntype Series = {\r\n  min:number,\r\n  max:number,\r\n  range:number,\r\n  name:string,\r\n  colour:string\r\n};\r\n\r\ntype DrawingOpts = PlotOpts & {\r\n  x:Axis\r\n  y:Axis\r\n  ctx: CanvasRenderingContext2D\r\n  textHeight: number\r\n  capacity:number\r\n  coalesce:boolean\r\n  margin:number\r\n  canvasSize:Rect\r\n  clearCanvas:boolean\r\n  translucentPlot?:boolean\r\n  highlightIndex?:number\r\n  leadingEdgeDot:boolean\r\n  debug:boolean\r\n  digitsPrecision:number\r\n  lineWidth:number\r\n}\r\n\r\n/**\r\n * Properties for an axis\r\n */\r\nexport type Axis = {\r\n  allowedSeries?:string[]\r\n  /**\r\n   * Name of axis, eg `x`\r\n   */\r\n  name:string,\r\n  /**\r\n   * Colour to use for axis labels\r\n   */\r\n  colour?:string,\r\n  /**\r\n   * Forced scale for values\r\n   */\r\n  scaleRange?:[number,number],\r\n  /**\r\n   * Forced range for labelling, by default\r\n   * uses scaleRange\r\n   */\r\n  labelRange?:[number,number],\r\n  /**\r\n   * Width of axis line\r\n   */\r\n  lineWidth:number,\r\n  /**\r\n   * How line ends\r\n   */\r\n  endWith: `none` | `arrow`,\r\n  /**\r\n   * Where to place the name of the axis\r\n   */\r\n  namePosition: `none` | `end` | `side`,\r\n  /**\r\n   * Width for y axis, height for x axis\r\n   */\r\n  textSize: number,\r\n  /**\r\n   * If true, axis labels (ie numeric scale) are shown. Default: true\r\n   */\r\n  showLabels:boolean,\r\n  /**\r\n   * If true, a line is drawn to represent axis. Default: true\r\n   */\r\n  showLine:boolean\r\n}\r\n\r\nexport type SeriesColours = {\r\n  [id:string]: string|undefined\r\n};\r\n\r\n/**\r\n * Plotter options\r\n */\r\nexport type PlotOpts = {\r\n  debug?:boolean,\r\n  seriesColours?:SeriesColours,\r\n  /**\r\n   * Default: 2\r\n   */\r\n  digitsPrecision?:number,\r\n  x?:Axis,\r\n  y?:Axis,\r\n  plotSize?:Rect\r\n  autoSizeCanvas?:boolean\r\n  style?:`connected` | `dots` | `none`\r\n  //palette?: Palette.Palette\r\n  /**\r\n   * Number of items to keep in the circular array\r\n   * Default: 10\r\n   */\r\n  capacity?:number\r\n  //showYAxis?:boolean\r\n  //showXAxis?:boolean\r\n  //yAxes?: string[]|string\r\n  textHeight?: number\r\n  /**\r\n   * Width of plotted line\r\n   */\r\n  lineWidth?:number\r\n  /**\r\n   * If true, sub-pixel data points are ignored\r\n   */\r\n  coalesce?:boolean\r\n  /**\r\n   * Fixed range to scale Y values. By default normalises values\r\n   * as they come in. This will also determine the y-axis labels and drawing\r\n   */\r\n  //fixedRange?:[number,number]\r\n  /**\r\n   * How many horizontal pixels per data point. If unspecified,\r\n   * it will scale based on width of canvas and capacity.\r\n   */\r\n  //dataXScale?:number\r\n}\r\n\r\nconst piPi = Math.PI *2;\r\n\r\nexport const defaultAxis = (name:string):Axis => ({\r\n  endWith: `none`,\r\n  lineWidth: 1,\r\n  namePosition: 'none',\r\n  name: name,\r\n  showLabels: name === `y`,\r\n  showLine: true,\r\n  textSize: 20\r\n });\r\n\r\nexport const calcScale = (buffer:BufferType, seriesColours?:SeriesColours) => {\r\n  const seriesNames = buffer.keys();\r\n  const scales:Series[] = [];\r\n  seriesNames.forEach(s => {\r\n    const series = buffer.get(s);\r\n    if (series === undefined) return;\r\n\r\n    let {min,max} = minMaxAvg(series);\r\n    let range = max - min;\r\n    \r\n    let colour;\r\n    if (seriesColours !== undefined) {\r\n      colour = seriesColours[s];\r\n    }\r\n    if (colour == undefined) colour = Colour.getCssVariable(`yellow`, `white`);\r\n     \r\n    if (range === 0) {\r\n      range = min;\r\n      min = min - range/2;\r\n      max = max + range/2;\r\n    }\r\n    scales.push({\r\n      min, max, range,\r\n      name: s,\r\n      colour: colour\r\n    })\r\n  });\r\n  return scales;\r\n}\r\n\r\nexport const add = (buffer:BufferType, value:number, series:string = \"\") => {\r\n  buffer.addKeyedValues(series, value);\r\n}\r\n\r\ntype BufferType = MapOfMutable<number, CircularArray<number>> | MapOfMutable<number, ReadonlyArray<number>>;\r\n\r\nexport const drawValue = (index:number, buffer:BufferType, drawing:DrawingOpts) => {\r\n  const c =\r\n  drawing =  {\r\n    ...drawing,\r\n    translucentPlot: true,\r\n    leadingEdgeDot: false\r\n  };\r\n  draw(buffer, drawing);\r\n  \r\n  drawing =  {\r\n    ...drawing,\r\n    highlightIndex: index,\r\n    leadingEdgeDot: true,\r\n    translucentPlot: false,\r\n    style: `none`,\r\n    clearCanvas: false\r\n  };\r\n  draw(buffer, drawing);\r\n};\r\n\r\nconst scaleWithFixedRange = (buffer:BufferType, range:[number,number], drawing:DrawingOpts) => calcScale(buffer, drawing.seriesColours).map((s) => ({...s, range: range[1] - range[0], min: range[0], max: range[1]}));\r\n\r\n/**\r\n * Draws a `buffer` of data with `drawing` options.\r\n * \r\n * @param buffer \r\n * @param drawing \r\n */\r\nexport const draw = (buffer:BufferType, drawing:DrawingOpts) => {\r\n  const {x:xAxis, y:yAxis, ctx, canvasSize} = drawing;\r\n  const margin = drawing.margin;\r\n  const cap = drawing.capacity === 0 ? buffer.lengthMax : drawing.capacity;\r\n  const series = drawing.y.scaleRange ? scaleWithFixedRange(buffer, drawing.y.scaleRange, drawing) : calcScale(buffer, drawing.seriesColours);\r\n\r\n  if (drawing.clearCanvas) ctx.clearRect(0,0,canvasSize.width,canvasSize.height);\r\n  \r\n  if (drawing.debug) {\r\n    ctx.strokeStyle = `orange`;\r\n    ctx.strokeRect(0,0,canvasSize.width, canvasSize.height); \r\n  }\r\n  \r\n  // Move in for margin\r\n  ctx.translate(margin, margin);\r\n\r\n  // Calculate/use plot area\r\n  const plotSize = drawing.plotSize ?? plotSizeFromBounds(canvasSize, drawing);\r\n\r\n  // Draw vertical axes\r\n  const axisSize = {height: plotSize.height + margin + margin, width:plotSize.width};\r\n\r\n  if (yAxis.showLabels || yAxis.showLine) {\r\n    // Draw the labels for each series\r\n    series.forEach(s => {\r\n      if (yAxis.allowedSeries !== undefined) {\r\n        if (!yAxis.allowedSeries.includes(s.name)) return;\r\n      }\r\n      drawYSeriesScale(s, axisSize, drawing);\r\n    });\r\n\r\n    // Draw vertical line\r\n    if (yAxis.showLine) drawYLine(axisSize, series[0], drawing);\r\n  }\r\n\r\n  // Draw x/horizontal axis if needed\r\n  if (xAxis.showLabels || xAxis.showLine) {\r\n    const yPos = yAxis.labelRange ? yAxis.labelRange[0] : series[0].min;\r\n    drawXAxis(plotSize.width, calcYForValue(yPos, series[0], plotSize.height)+margin + xAxis.lineWidth, drawing);\r\n  }\r\n\r\n  const plotDrawing = {\r\n    ...drawing,\r\n    plotSize}\r\n    //,\r\n    //dataXScale: drawing.dataXScale ?? plotSize.width / (cap -1)\r\n  //};\r\n\r\n  // Draw data for each series\r\n  series.forEach(s => {\r\n    const data = buffer.getSource(s.name);\r\n    if (data === undefined) return;\r\n    \r\n    let leadingEdgeIndex = (buffer.typeName === `circular`)  ? (data as CircularArray<number>).pointer - 1: data.length -1;\r\n    if (drawing.highlightIndex !== undefined) leadingEdgeIndex = drawing.highlightIndex; \r\n    ctx.save();\r\n    ctx.translate(0, margin + margin);\r\n    drawSeriesData(s, data, plotSize, plotDrawing, leadingEdgeIndex);\r\n    ctx.restore();\r\n  });\r\n\r\n  ctx.resetTransform();\r\n}\r\n\r\n/**\r\n * Draw vertical axis\r\n * @param series \r\n * @param height \r\n * @param drawing \r\n */\r\nconst drawYSeriesScale = (series:Series, plotSize:Rect, drawing:DrawingOpts) => {\r\n  const {ctx, y, digitsPrecision, margin} = drawing;\r\n  const {width, height} = plotSize;\r\n\r\n  if (drawing.debug) {\r\n    ctx.strokeStyle = `purple`;\r\n    ctx.strokeRect(0,0, y.textSize, height + margin);  \r\n  }\r\n  \r\n  ctx.fillStyle = series.colour.length > 0 ? series.colour : `white`;\r\n\r\n  // Override colour with axis-defined colour\r\n  if (y.colour) ctx.fillStyle = y.colour;\r\n\r\n  // Draw labels\r\n  const min = y.labelRange ? y.labelRange[0] : series.min;\r\n  const max = y.labelRange ? y.labelRange[1] : series.max;\r\n  const range = y.labelRange ? max - min : series.range;\r\n  const mid = min + (range / 2)\r\n  const halfHeight = drawing.textHeight / 2;\r\n\r\n  ctx.textBaseline = `top`;\r\n  ctx.fillText(min.toFixed(digitsPrecision), 0, calcYForValue(min, series, height)-halfHeight);\r\n  ctx.fillText(mid.toFixed(digitsPrecision), 0, calcYForValue(mid, series, height)-halfHeight);\r\n  ctx.fillText(max.toFixed(digitsPrecision), 0, calcYForValue(max, series, height) - margin);\r\n\r\n  ctx.translate(y.textSize + margin, 0);\r\n}\r\n\r\nconst drawYLine = (plotSize:Rect, series:Series, drawing:DrawingOpts) => {\r\n  const {ctx, y} = drawing;\r\n  const {width, height} = plotSize;\r\n  \r\n  const min = y.labelRange ? y.labelRange[0] : series.min;\r\n  const max = y.labelRange ? y.labelRange[1] : series.max;\r\n\r\n  const minPos = calcYForValue(min, series, height);\r\n  const maxPos = calcYForValue(max, series, height);\r\n\r\n  // Draw line\r\n  ctx.translate(y.lineWidth, 0);\r\n  ctx.lineWidth = y.lineWidth;\r\n  ctx.beginPath();\r\n  ctx.moveTo(0, minPos);\r\n  ctx.lineTo(0, maxPos);\r\n  ctx.strokeStyle = series.colour;\r\n  if (y.colour) ctx.strokeStyle = y.colour;\r\n  ctx.stroke();\r\n  ctx.translate(y.lineWidth, 0);\r\n};\r\n\r\nconst drawXAxis = (width:number, yPos:number, drawing:DrawingOpts) => {\r\n  const {ctx, x, y} = drawing;\r\n\r\n  if (!x.showLine) return;\r\n\r\n  if (x.colour) ctx.strokeStyle = x.colour;\r\n  ctx.lineWidth = x.lineWidth;\r\n  ctx.beginPath();\r\n\r\n  // Assumes ctx is translated after drawing Y axis\r\n  ctx.moveTo(0, yPos);//height-1);\r\n  ctx.lineTo(width, yPos);//height -1);\r\n  ctx.stroke();\r\n}\r\n\r\n/**\r\n * Draw series data\r\n * @param series \r\n * @param values \r\n * @param plotSize \r\n * @param drawing \r\n */\r\nconst drawSeriesData = (series:Series, values:ArrayLike<number>, plotSize:Rect, drawing:DrawingOpts, leadingEdgeIndex:number) => {\r\n  const {ctx, lineWidth, translucentPlot = false, margin, x:xAxis} = drawing;\r\n  const style = drawing.style ?? `connected`;\r\n  const height = plotSize.height - margin;\r\n\r\n  let dataXScale = 1;\r\n  if (xAxis.scaleRange) {\r\n    const xAxisRange = xAxis.scaleRange[1] - xAxis.scaleRange[0];\r\n    dataXScale = plotSize.width / xAxisRange;\r\n  } else {\r\n    if (drawing.capacity === 0) dataXScale = plotSize.width / values.length;\r\n    else dataXScale = plotSize.width / drawing.capacity;\r\n  }\r\n\r\n  // Step through data faster if per-pixel density is above one\r\n  const incrementBy = drawing.coalesce ? \r\n    dataXScale! < 0 ? Math.floor((1/dataXScale!)) : 1\r\n    : 1;\r\n\r\n  let x = 0;\r\n  let leadingEdge:Point|undefined;\r\n  \r\n  if (drawing.debug) {\r\n    ctx.strokeStyle = `green`;\r\n    ctx.strokeRect(0,0, plotSize.width, plotSize.height);\r\n  }\r\n\r\n  const colourTransform = (c:string) => {\r\n    if (translucentPlot) return Colour.opacity(c, 0.2);\r\n    return c;\r\n  }\r\n\r\n  if (style === `dots`) { \r\n    ctx.fillStyle = colourTransform(series.colour);// colourTransform(drawing.palette.getOrAdd(`series${series.name}`));\r\n  } else if (style === `none`) {\r\n  } else {\r\n    ctx.beginPath();\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.strokeStyle = colourTransform(series.colour); //colourTransform(drawing.palette.getOrAdd(`series${series.name}`));\r\n  } \r\n\r\n  for (let i=0; i<values.length; i += incrementBy) {\r\n    let y = calcYForValue(values[i], series, height) -1;// (1 - (values[i] - series.min) / series.range) * height;\r\n    \r\n    if (style === `dots`) {\r\n      ctx.beginPath();\r\n      ctx.arc(x, y, lineWidth, 0, piPi);\r\n      ctx.fill();\r\n    } else if (style === `none`) {\r\n    } else  {\r\n      if (i == 0) ctx.moveTo(x, y);\r\n      ctx.lineTo(x, y);\r\n    }\r\n    \r\n    if (i === leadingEdgeIndex) {\r\n      leadingEdge = {x, y}\r\n    }\r\n    x += dataXScale;\r\n  }\r\n\r\n  if (style === `connected`) {\r\n    ctx.stroke();\r\n  }\r\n\r\n  // Draw a circle at latest data point\r\n  if (leadingEdge !== undefined && drawing.leadingEdgeDot) {\r\n    ctx.beginPath();\r\n    ctx.fillStyle = colourTransform(series.colour);// drawing.palette.getOrAdd(`series${series.name}`));\r\n    ctx.arc(leadingEdge.x, leadingEdge.y, 3, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n  }\r\n}\r\n\r\nconst calcYForValue = (v:number, series:Series, height:number) => (1 - (v - series.min) / series.range) * height ;\r\n\r\nconst calcSizing = (margin:number, x:Axis, y:Axis) => {\r\n  let fromLeft = margin;\r\n  if (y.showLabels) fromLeft += y.textSize;\r\n  if (y.showLine) fromLeft += y.lineWidth;\r\n  if (y.showLabels || y.showLine) fromLeft += margin + margin;\r\n  let fromRight = margin;\r\n\r\n  let fromTop = margin + margin;\r\n  let fromBottom = margin + margin;\r\n  if (x.showLabels) fromBottom += x.textSize;\r\n  else fromBottom += margin;\r\n  if (x.showLine) fromBottom += x.lineWidth;\r\n  if (x.showLabels || x.showLine) fromBottom += margin;\r\n\r\n  return {\r\n    left: fromLeft,\r\n    right: fromRight,\r\n    top: fromTop,\r\n    bottom: fromBottom\r\n  };\r\n}\r\n\r\nconst plotSizeFromBounds = (bounds:Rect, opts:{margin:number, y:Axis, x:Axis}):Rect => {\r\n  const { width, height } = bounds;\r\n  const sizing = calcSizing(opts.margin, opts.x, opts.y);\r\n  return {\r\n    width: width - sizing.left - sizing.right, \r\n    height: height - sizing.top - sizing.bottom\r\n  }\r\n};\r\n\r\nconst canvasSizeFromPlot = (plot:Rect, opts:{margin:number, y:Axis, x:Axis}):Rect => {\r\n  const { width, height } = plot;\r\n  const sizing = calcSizing(opts.margin, opts.x, opts.y);\r\n  return {\r\n    width: plot.width + sizing.left + sizing.right,\r\n    height: plot.height + sizing.top + sizing.bottom\r\n  };\r\n};\r\n\r\n/**\r\n * Creates a simple horizontal data plot within a DIV.\r\n * \r\n * ```\r\n * const p = plot(`#parentDiv`);\r\n * p.add(10);\r\n * p.clear();\r\n * \r\n * // Plot data using series\r\n * p.add(-1, `temp`);\r\n * p.add(0.4, `humidty`);\r\n * ```\r\n * \r\n * Options can be specified to customise plot\r\n * ```\r\n * const p = plot(`#parentDiv`, {\r\n *  capacity: 100,     // How many data points to store (default: 10)\r\n *  showYAxis: false,  // Toggle whether y axis is shown (default: true)\r\n *  lineWidth: 2,      // Width of plot line (default: 2)\r\n *  yAxes:  [`temp`],  // Only show these y axes (by default all are shown)\r\n *  palette: Palette,  // Colour palette instance to use\r\n *  coalesce: true,    // If true, sub-pixel data points are skipped, improving performance for dense plots at the expense of plot precision\r\n * });\r\n * ```\r\n * \r\n * For all `capacity` values other than `0`, a circular array is used to track data. Otherwise an array is used that will\r\n * grow infinitely.\r\n * \r\n * By default, will attempt to use CSS variable `--series[seriesName]` for axis colours.\r\n *  `--series[name]-axis` for titles. Eg `--seriesX`. For data added without a named series,\r\n * it will use `--series` and `--series-axis`.\r\n * @param parentElOrQuery\r\n * @param opts\r\n * @return Plotter instance\r\n */\r\nexport const plot = (parentElOrQuery:string|HTMLElement, opts:PlotOpts):Plotter => {\r\n  if (parentElOrQuery === null) throw new Error(`parentElOrQuery is null. Expected string or element`);\r\n\r\n  const parentEl = resolveEl(parentElOrQuery);\r\n  let canvasEl:HTMLCanvasElement;\r\n  let destroyCanvasEl = true;\r\n  let plotSize:Rect|undefined = opts.plotSize;\r\n  let canvasSize:Rect\r\n  if (parentEl.nodeName === `CANVAS`)  {\r\n    // Use provided canvas\r\n    canvasEl = parentEl as HTMLCanvasElement;  \r\n    destroyCanvasEl = false;\r\n    canvasSize = {width: canvasEl.width, height: canvasEl.height};\r\n  } else {\r\n    // Create a CANVAS that fills parent\r\n    //console.log('not reusing');\r\n    canvasEl = document.createElement(`CANVAS`) as HTMLCanvasElement;\r\n    parentEl.append(canvasEl);\r\n    plotSize = opts.plotSize;\r\n    canvasSize = {width: canvasEl.width, height: canvasEl.height};\r\n  }\r\n  \r\n  const ctx = canvasEl.getContext(`2d`)!;\r\n  const capacity = opts.capacity ?? 10;\r\n  const buffer = capacity > 0 ? mapCircular<number>({ capacity }) : mapArray<number>();\r\n  const metrics = ctx.measureText('Xy');\r\n  const coalesce = opts.coalesce ?? true;\r\n\r\n  // Sanity-check\r\n  if (ctx === null) throw new Error(`Drawing context not available`);\r\n\r\n  const xAxis = opts.x ?? defaultAxis(`x`);\r\n  let yAxis = opts.y ?? defaultAxis(`y`);\r\n\r\n  let drawingOpts = {\r\n    ...opts,\r\n    y: yAxis,\r\n    x: xAxis,\r\n\r\n    capacity, coalesce, plotSize, canvasSize, ctx,\r\n    textHeight: opts.textHeight ?? metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent,\r\n    // palette: opts.palette ?? Palette.create(),\r\n    style: opts.style ?? `connected`,\r\n    margin: 3,\r\n    yLabelWidth: 25,\r\n    clearCanvas:true,\r\n    leadingEdgeDot:true,\r\n    debug: opts.debug ?? false,\r\n    digitsPrecision: opts.digitsPrecision ?? 2,\r\n    lineWidth: opts.lineWidth ?? 2\r\n  };\r\n\r\n  if (plotSize) {\r\n    // Size canvas based on given plot size\r\n    //console.log(`Canvas size from plot`);\r\n    const canvasSize = canvasSizeFromPlot(plotSize, drawingOpts);\r\n    canvasEl.width = canvasSize.width;\r\n    canvasEl.height = canvasSize.height;\r\n    //console.log(`Canvas size from plot: ${canvasSize.width},${canvasSize.height} plot: ${plotSize.width}, ${plotSize.height}`);\r\n    drawingOpts.canvasSize = canvasSize;\r\n  } else {\r\n    //console.log(`Assuming canvas is sized`);\r\n  }\r\n\r\n  //console.log(drawingOpts);\r\n  if (opts.autoSizeCanvas) {\r\n    console.log(`autoSizeCanvas`);\r\n    parentSizeCanvas(canvasEl, (args) => {\r\n      const bounds = args.bounds;\r\n      drawingOpts = {\r\n        ...drawingOpts, \r\n        plotSize: plotSizeFromBounds(bounds, drawingOpts),\r\n        canvasSize: bounds\r\n      };\r\n      draw(buffer, drawingOpts);\r\n\r\n    });\r\n  }\r\n\r\n  return {\r\n    drawValue: (index:number) => {\r\n      drawValue(index, buffer, drawingOpts);\r\n    },\r\n    dispose: () => {\r\n      if (destroyCanvasEl) canvasEl.remove();\r\n    },\r\n    add: (value:number, series = \"\", skipDrawing = false) => {\r\n      add(buffer, value, series);\r\n      if (skipDrawing) return;\r\n      draw(buffer, drawingOpts)\r\n    },\r\n    clear:() => {\r\n      buffer.clear();\r\n    }\r\n  }\r\n}\r\n\r\n","/**\r\n * Manage a set of colours. Uses CSS variables as a fallback if colour is not added\r\n *\r\n */\r\nexport type Palette = {\r\n  //eslint-disable-next-line functional/no-method-signature\r\n  setElementBase(el:Element):void\r\n  //eslint-disable-next-line functional/no-method-signature\r\n  has(key:string):boolean\r\n\r\n  /**\r\n   * Returns a colour by name. \r\n   * \r\n   * If the colour is not found:\r\n   *  1. Try to use a CSS variable `--key`, or\r\n   *  2. The next fallback colour is used (array cycles)\r\n   *\r\n   * @param key\r\n   * @returns\r\n   */\r\n  //eslint-disable-next-line functional/no-method-signature\r\n  get(key:string, fallback?:string):string\r\n\r\n  /**\r\n   * Gets a colour by key, adding and returning fallback if not present\r\n   * @param key Key of colour\r\n   * @param fallback Fallback colour if key is not found\r\n   */\r\n  //eslint-disable-next-line functional/no-method-signature\r\n  getOrAdd(key: string, fallback?:string):string\r\n\r\n  /**\r\n   * Adds a colour with a given key\r\n   *\r\n   * @param key\r\n   * @param colour\r\n   */\r\n  //eslint-disable-next-line functional/no-method-signature\r\n  add(key:string, value:string):void\r\n\r\n  alias(from:string, to:string):void\r\n};\r\n\r\nexport const create = (fallbacks?:readonly string[]):Palette => new PaletteImpl(fallbacks);\r\n\r\nclass PaletteImpl {\r\n  /* eslint-disable-next-line functional/prefer-readonly-type */\r\n  readonly #store:Map<string, string> = new Map();\r\n  /* eslint-disable-next-line functional/prefer-readonly-type */\r\n  readonly #aliases:Map<string, string> = new Map();\r\n\r\n  readonly fallbacks:readonly string[];\r\n  #lastFallback = 0;\r\n\r\n  #elementBase:Element;\r\n\r\n  constructor(fallbacks?:readonly string[]) {\r\n    if (fallbacks !== undefined) this.fallbacks = fallbacks;\r\n    else this.fallbacks = [`red`, `blue`, `green`, `orange`];\r\n    this.#elementBase = document.body;\r\n  }\r\n\r\n  setElementBase(el:Element) {\r\n    this.#elementBase = el;\r\n  }\r\n\r\n  add(key:string, colour:string) {\r\n    this.#store.set(key, colour);\r\n  }\r\n\r\n  alias(from:string, to:string) {\r\n    this.#aliases.set(from, to);\r\n  }\r\n\r\n  get(key:string, fallback?:string):string {\r\n    const alias =  this.#aliases.get(key);\r\n    if (alias !== undefined) key = alias;\r\n  \r\n    const c = this.#store.get(key);\r\n    if (c !== undefined) return c;\r\n\r\n    const varName = `--` + key;\r\n    // eslint-disable-next-line functional/no-let\r\n    let fromCss = getComputedStyle(this.#elementBase).getPropertyValue(varName).trim();\r\n\r\n    // Not found\r\n    if (fromCss === undefined || fromCss.length === 0) {\r\n      if (fallback !== undefined) return fallback;\r\n      fromCss = this.fallbacks[this.#lastFallback];\r\n      this.#lastFallback++;\r\n      if (this.#lastFallback === this.fallbacks.length) this.#lastFallback = 0;\r\n    }\r\n    return fromCss;\r\n  }\r\n\r\n  getOrAdd(key:string, fallback?:string):string {\r\n    if (this.has(key)) return this.get(key);\r\n    const c = this.get(key, fallback);\r\n    this.add(key, c);\r\n    return c;\r\n  }\r\n\r\n  has(key:string):boolean {\r\n    return this.#store.has(key);\r\n  }\r\n}\r\n\r\n"],"mappings":"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","names":[]}