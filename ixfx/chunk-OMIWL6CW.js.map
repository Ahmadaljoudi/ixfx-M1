{"version":3,"sources":["../src/Timer.ts"],"sourcesContent":["import {integer as guardInteger} from './Guards.js';\r\nimport {ResettableTimeout, Continuously, Timer} from './Interfaces.js';\r\n\r\n/**\r\n * Returns a {@link ResettableTimeout} that can be triggered or cancelled.\r\n *  \r\n * Once `start()` is called, `callback` will be scheduled to execute after `timeoutMs`.\r\n * If `start()` is called again, the waiting period will be reset to `timeoutMs`.\r\n * \r\n * @example Essential functionality\r\n * ```js\r\n * const fn = () => {\r\n *  console.log(`Executed`);\r\n * };\r\n * const t = resettableTimeout(fn, 60*1000); \r\n * t.start();   // After 1 minute `fn` will run, printing to the console\r\n * ```\r\n * \r\n * @example More functionality\r\n * ```\r\n * t.cancel();  // Cancel it from running\r\n * t.start();   // Schedule again after 1 minute\r\n * t.start(30*1000); // Cancel that, and now scheduled after 30s\r\n * t.isDone;    // True if a scheduled event is pending\r\n * ```\r\n * \r\n * @param callback \r\n * @param timeoutMs \r\n * @returns {@link ResettableTimeout}\r\n */\r\nexport const resettableTimeout = (callback:()=>void, timeoutMs:number):ResettableTimeout => {\r\n  if (callback === undefined) throw new Error(`callback parameter is undefined`);\r\n  guardInteger(timeoutMs, `aboveZero`, `timeoutMs`);\r\n\r\n  //eslint-disable-next-line functional/no-let\r\n  let timer = 0;\r\n\r\n  const start = (altTimeoutMs:number = timeoutMs) => {\r\n    guardInteger(altTimeoutMs, `aboveZero`, `altTimeoutMs`);\r\n    if (timer !== 0) stop();\r\n    timer = window.setTimeout(() => {\r\n      callback();\r\n      timer = 0;\r\n    }, altTimeoutMs);\r\n  };\r\n\r\n  const cancel = () => {\r\n    if (timer === 0) return;\r\n    window.clearTimeout(timer);\r\n  };\r\n\r\n  return {\r\n    start,\r\n    cancel,\r\n    get isDone() {\r\n      return timer !== 0;\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Returns a {@link Continuously} that continuously executes `callback`. Call `start` to begin.\r\n * \r\n * @example Animation loop\r\n * ```js\r\n * const draw = () => {\r\n *  // Draw on canvas\r\n * }\r\n * continuously(draw).start(); // Run draw as fast as possible using `window.requestAnimationFrame` \r\n * ```\r\n * \r\n * @example With delay\r\n * ```js\r\n * const fn = () => {\r\n *  console.log(`1 minute`);\r\n * }\r\n * const c = continuously(fn, 60*1000);\r\n * c.start(); // Runs `fn` every minute\r\n * ```\r\n * \r\n * @example With res\r\n * @param callback \r\n * @param resetCallback \r\n * @param intervalMs \r\n * @returns \r\n */\r\nexport const continuously = (callback:(ticks?:number)=>boolean|void, intervalMs?:number, resetCallback?:((ticks?:number) => boolean|void)):Continuously => {\r\n  if (intervalMs !== undefined) guardInteger(intervalMs, `aboveZero`, `intervalMs`);\r\n\r\n  //eslint-disable-next-line functional/no-let\r\n  let running = false;\r\n  //eslint-disable-next-line functional/no-let\r\n  let ticks = 0;\r\n  \r\n  const schedule = intervalMs === undefined ? (cb:()=>void) => window.requestAnimationFrame(cb) : (cb:()=>void) => window.setTimeout(cb, intervalMs);\r\n  const cancel = () => {\r\n    if (!running) return;\r\n    running = false;\r\n    ticks = 0;\r\n  };\r\n\r\n  const loop = () => {\r\n    if (!running) return;\r\n    const r = callback(ticks++);\r\n    if (r !== undefined && !r) {\r\n      cancel();\r\n      return;\r\n    }\r\n\r\n    schedule(loop);\r\n  };\r\n\r\n  const start = () => {\r\n    // Already running, but theres a resetCallback to check if we should keep going\r\n    if (running && resetCallback !== undefined) {\r\n      const r = resetCallback(ticks);\r\n      if (r !== undefined && !r) {\r\n        // Reset callback tells us to stop\r\n        cancel();\r\n        return; // Skip starting again\r\n      } \r\n    } else if (running) {\r\n      return; // already running\r\n    }\r\n\r\n    // Start running\r\n    running = true;\r\n    schedule(loop);\r\n  };\r\n\r\n  return {\r\n    start,\r\n    get isDone() {\r\n      return running;\r\n    },\r\n    get ticks() {\r\n      return ticks;\r\n    },\r\n    cancel\r\n  };\r\n};\r\n\r\n/**\r\n * Pauses execution for `timeoutMs`.\r\n * \r\n * @example\r\n * ```js\r\n * console.log(`Hello`);\r\n * await sleep(1000);\r\n * console.log(`There`); // Prints one second after\r\n * ```\r\n * @param timeoutMs\r\n * @return\r\n */\r\nexport const sleep = <V>(timeoutMs: number): Promise<V> => new Promise<V>(resolve => setTimeout(resolve, timeoutMs));\r\n\r\n/**\r\n * Pauses execution for `timeoutMs` after which the asynchronous `callback` is executed and awaited.\r\n * \r\n * @example\r\n * ```js\r\n * const result = await delay(async () => Math.random(), 1000);\r\n * console.log(result); // Prints out result after one second\r\n * ```\r\n * @template V\r\n * @param callback\r\n * @param timeoutMs\r\n * @return\r\n */\r\nexport const delay = async <V>(callback:() => Promise<V>, timeoutMs: number): Promise<V> =>  {\r\n  guardInteger(timeoutMs, `aboveZero`, `timeoutMs`);\r\n  await sleep(timeoutMs);\r\n  return Promise.resolve(await callback());\r\n};\r\n\r\nexport type TimerSource = () => Timer;\r\n/**\r\n * A timer that uses clock time\r\n *\r\n * @returns {Timer}\r\n */\r\nexport const msRelativeTimer = (): Timer => {\r\n  // eslint-disable-next-line functional/no-let\r\n  let start = window.performance.now();\r\n  return {\r\n    reset: () => {\r\n      start = window.performance.now();\r\n    },\r\n    elapsed: () => (window.performance.now() - start)\r\n  };\r\n};\r\n\r\n/**\r\n * A timer that progresses with each call\r\n *\r\n * @returns {Timer}\r\n */\r\nexport const tickRelativeTimer = (): Timer => {\r\n  // eslint-disable-next-line functional/no-let\r\n  let start = 0;\r\n  return {\r\n    reset: () => {\r\n      start = 0;\r\n    },\r\n    elapsed: () => start++\r\n  };\r\n};"],"mappings":";;;;;AA8BO,IAAM,oBAAoB,CAAC,UAAmB,cAAuC;AAC1F,MAAI,aAAa;AAAW,UAAM,IAAI,MAAM;AAC5C,UAAa,WAAW,aAAa;AAGrC,MAAI,QAAQ;AAEZ,QAAM,QAAQ,CAAC,eAAsB,cAAc;AACjD,YAAa,cAAc,aAAa;AACxC,QAAI,UAAU;AAAG;AACjB,YAAQ,OAAO,WAAW,MAAM;AAC9B;AACA,cAAQ;AAAA,OACP;AAAA;AAGL,QAAM,SAAS,MAAM;AACnB,QAAI,UAAU;AAAG;AACjB,WAAO,aAAa;AAAA;AAGtB,SAAO;AAAA,IACL;AAAA,IACA;AAAA,QACI,SAAS;AACX,aAAO,UAAU;AAAA;AAAA;AAAA;AA+BhB,IAAM,eAAe,CAAC,UAAwC,YAAoB,kBAAkE;AACzJ,MAAI,eAAe;AAAW,YAAa,YAAY,aAAa;AAGpE,MAAI,UAAU;AAEd,MAAI,QAAQ;AAEZ,QAAM,WAAW,eAAe,SAAY,CAAC,OAAgB,OAAO,sBAAsB,MAAM,CAAC,OAAgB,OAAO,WAAW,IAAI;AACvI,QAAM,SAAS,MAAM;AACnB,QAAI,CAAC;AAAS;AACd,cAAU;AACV,YAAQ;AAAA;AAGV,QAAM,OAAO,MAAM;AACjB,QAAI,CAAC;AAAS;AACd,UAAM,IAAI,SAAS;AACnB,QAAI,MAAM,UAAa,CAAC,GAAG;AACzB;AACA;AAAA;AAGF,aAAS;AAAA;AAGX,QAAM,QAAQ,MAAM;AAElB,QAAI,WAAW,kBAAkB,QAAW;AAC1C,YAAM,IAAI,cAAc;AACxB,UAAI,MAAM,UAAa,CAAC,GAAG;AAEzB;AACA;AAAA;AAAA,eAEO,SAAS;AAClB;AAAA;AAIF,cAAU;AACV,aAAS;AAAA;AAGX,SAAO;AAAA,IACL;AAAA,QACI,SAAS;AACX,aAAO;AAAA;AAAA,QAEL,QAAQ;AACV,aAAO;AAAA;AAAA,IAET;AAAA;AAAA;AAgBG,IAAM,QAAQ,CAAI,cAAkC,IAAI,QAAW,aAAW,WAAW,SAAS;AAelG,IAAM,QAAQ,OAAU,UAA2B,cAAmC;AAC3F,UAAa,WAAW,aAAa;AACrC,QAAM,MAAM;AACZ,SAAO,QAAQ,QAAQ,MAAM;AAAA;AASxB,IAAM,kBAAkB,MAAa;AAE1C,MAAI,QAAQ,OAAO,YAAY;AAC/B,SAAO;AAAA,IACL,OAAO,MAAM;AACX,cAAQ,OAAO,YAAY;AAAA;AAAA,IAE7B,SAAS,MAAO,OAAO,YAAY,QAAQ;AAAA;AAAA;AASxC,IAAM,oBAAoB,MAAa;AAE5C,MAAI,QAAQ;AACZ,SAAO;AAAA,IACL,OAAO,MAAM;AACX,cAAQ;AAAA;AAAA,IAEV,SAAS,MAAM;AAAA;AAAA;","names":[]}