{"version":3,"sources":["../src/flow/index.ts"],"sourcesContent":["import { number as guardNumber} from \"../Guards.js\";\r\n\r\nexport * as StateMachine from './StateMachine.js';\r\nexport * from './Timer.js';\r\n\r\n\r\nexport type RepeatPredicate = (repeats:number, valuesProduced:number)=>boolean;\r\n/**\r\n * Runs `fn` a certain number of times, accumulating result into return array.\r\n * If `fn` returns undefined, it is skipped.\r\n * \r\n * ```js\r\n * // Results will be an array with five random numbers\r\n * const results = repeat(5, () => Math.random());\r\n * ```\r\n * \r\n * Repeats can be specified as an integer (eg 5 for five repeats), or a function\r\n * that gives _false_ when repeating should stop.\r\n * \r\n * ```js\r\n * // Keep running `fn` until we've accumulated 10 values\r\n * // Useful if `fn` sometimes returns _undefined_\r\n * const results = repeat((repeats, valuesProduced) => valuesProduced < 10, fn);\r\n * ```\r\n * \r\n * If you don't need to accumulate return values, consider {@link Generators.count} with {@link Generators.forEach}.\r\n * \r\n * @param countOrPredicate Number of repeats or function returning false when to stop \r\n * @param fn Function to run, must return a value to accumulate into array or _undefined_\r\n * @returns Array of accumulated results\r\n */\r\nexport const repeat = <V>(countOrPredicate:number|RepeatPredicate, fn:()=>V|undefined):readonly V[] => {\r\n  // Unit tested: expected return array length\r\n  //eslint-disable-next-line functional/no-let\r\n  let repeats, valuesProduced;\r\n  repeats = valuesProduced = 0;\r\n  const ret = [];\r\n\r\n  if (typeof countOrPredicate === `number`) {\r\n    guardNumber(countOrPredicate, `positive`, `countOrPredicate`);\r\n    //eslint-disable-next-line functional/no-loop-statement\r\n    while (countOrPredicate-- > 0) {\r\n      repeats++;\r\n      const v = fn();\r\n      if (v === undefined) continue;\r\n      //eslint-disable-next-line functional/immutable-data\r\n      ret.push(v);\r\n      valuesProduced++;\r\n    }\r\n  } else {\r\n    //eslint-disable-next-line functional/no-loop-statement\r\n    while (countOrPredicate(repeats, valuesProduced)) {\r\n      repeats++;\r\n      const v = fn();\r\n      if (v === undefined) continue;\r\n      //eslint-disable-next-line functional/immutable-data\r\n      ret.push(v);\r\n      valuesProduced++;\r\n    }\r\n  }\r\n  return ret;\r\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BO,IAAM,SAAS,CAAI,kBAAyC,OAAoC;AAGrG,MAAI,SAAS;AACb,YAAU,iBAAiB;AAC3B,QAAM,MAAM,CAAC;AAEb,MAAI,OAAO,qBAAqB,UAAU;AACxC,WAAY,kBAAkB,YAAY,kBAAkB;AAE5D,WAAO,qBAAqB,GAAG;AAC7B;AACA,YAAM,IAAI,GAAG;AACb,UAAI,MAAM;AAAW;AAErB,UAAI,KAAK,CAAC;AACV;AAAA,IACF;AAAA,EACF,OAAO;AAEL,WAAO,iBAAiB,SAAS,cAAc,GAAG;AAChD;AACA,YAAM,IAAI,GAAG;AACb,UAAI,MAAM;AAAW;AAErB,UAAI,KAAK,CAAC;AACV;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;","names":[]}