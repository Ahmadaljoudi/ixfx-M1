{"version":3,"sources":["../src/Guards.ts"],"sourcesContent":["\r\nexport type NumberGuardRange = `` | `positive` | `negative` | `aboveZero` | `belowZero` | `percentage` | `bipolar`;\r\n\r\n/**\r\n * Throws an error if `t` is not a number or within specified range\r\n * @param t Value to check\r\n * @param name Name of parameter (for more helpful exception messages)\r\n * @param range Range to enforce\r\n * @returns \r\n */\r\nexport const number = (t:number, range:NumberGuardRange = ``, name = `?`):boolean => {\r\n  if (Number.isNaN(t)) throw new Error(`Parameter '${name}' is NaN`);\r\n  if (typeof t !== `number`) throw new Error(`Parameter '${name}' does not have type of number`);\r\n  switch (range) {\r\n  case `positive`:\r\n    if (t < 0) throw new Error(`Parameter ${name} must be at least zero`);\r\n    break;\r\n  case `negative`:\r\n    if (t > 0) throw new Error(`Parameter ${name} must be zero or lower`);\r\n    break;\r\n  case `aboveZero`:\r\n    if (t <= 0) throw new Error(`Parameter ${name} must be above zero`);\r\n    break;\r\n  case `belowZero`:\r\n    if (t >= 0) throw new Error(`Parameter ${name} must be below zero`);\r\n    break;\r\n  case `percentage`:\r\n    if (t > 1 || t < 0) throw new Error(`Parameter ${name} must be in percentage range (0 to 1)`);\r\n    break;\r\n  case `bipolar`:\r\n    if (t > 1 || t < -1) throw new Error(`Parameter ${name} must be in bipolar percentage range (-1 to 1)`);\r\n    break;\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n * Throws an error if `t` is not in the range of 0-1.\r\n * \r\n * This is the same as calling ```number(t, `percentage`)```\r\n * @param t \r\n * @param name \r\n * @returns \r\n */\r\nexport const percent = (t: number, name = `?`) => number(t, `percentage`, name);\r\n\r\n/**\r\n * Throws an error if `t` is not an integer\r\n * @param t \r\n * @param name \r\n * @param range \r\n */\r\nexport const integer = (t:number, name = `?`, range:NumberGuardRange = ``) => {\r\n  number(t, range, name);\r\n  if (!Number.isInteger(t)) throw new Error(`Paramter ${name} is not an integer`);\r\n};\r\n\r\n/**\r\n * Returns true if parameter is an array of strings\r\n * @param t \r\n * @returns \r\n */\r\nexport const isStringArray = (t:unknown):boolean => {\r\n  if (!Array.isArray(t)) return false;\r\n  return t.find(v => typeof v !== `string`) === undefined;\r\n};\r\n\r\n/**\r\n * Throws an error if parameter is not an array\r\n * @param t\r\n * @param name \r\n */\r\nexport const array = (t: unknown, name = `?`): void => {\r\n  if (!Array.isArray(t)) throw new Error(`Parameter '${name}' is expected to be an array'`);\r\n};\r\n\r\n/** Throws an error if parameter is not defined */\r\nexport const defined = <T>(argument: T | undefined): argument is T => argument !== undefined;\r\n"],"mappings":";AAUO,IAAM,SAAS,CAAC,GAAU,QAAyB,IAAI,OAAO,QAAgB;AACnF,MAAI,OAAO,MAAM;AAAI,UAAM,IAAI,MAAM,cAAc;AACnD,MAAI,OAAO,MAAM;AAAU,UAAM,IAAI,MAAM,cAAc;AACzD,UAAQ;AAAA,SACH;AACH,UAAI,IAAI;AAAG,cAAM,IAAI,MAAM,aAAa;AACxC;AAAA,SACG;AACH,UAAI,IAAI;AAAG,cAAM,IAAI,MAAM,aAAa;AACxC;AAAA,SACG;AACH,UAAI,KAAK;AAAG,cAAM,IAAI,MAAM,aAAa;AACzC;AAAA,SACG;AACH,UAAI,KAAK;AAAG,cAAM,IAAI,MAAM,aAAa;AACzC;AAAA,SACG;AACH,UAAI,IAAI,KAAK,IAAI;AAAG,cAAM,IAAI,MAAM,aAAa;AACjD;AAAA,SACG;AACH,UAAI,IAAI,KAAK,IAAI;AAAI,cAAM,IAAI,MAAM,aAAa;AAClD;AAAA;AAEF,SAAO;AAAA;AAWF,IAAM,UAAU,CAAC,GAAW,OAAO,QAAQ,OAAO,GAAG,cAAc;AAQnE,IAAM,UAAU,CAAC,GAAU,OAAO,KAAK,QAAyB,OAAO;AAC5E,SAAO,GAAG,OAAO;AACjB,MAAI,CAAC,OAAO,UAAU;AAAI,UAAM,IAAI,MAAM,YAAY;AAAA;AAQjD,IAAM,gBAAgB,CAAC,MAAsB;AAClD,MAAI,CAAC,MAAM,QAAQ;AAAI,WAAO;AAC9B,SAAO,EAAE,KAAK,OAAK,OAAO,MAAM,cAAc;AAAA;AAQzC,IAAM,QAAQ,CAAC,GAAY,OAAO,QAAc;AACrD,MAAI,CAAC,MAAM,QAAQ;AAAI,UAAM,IAAI,MAAM,cAAc;AAAA;","names":[]}