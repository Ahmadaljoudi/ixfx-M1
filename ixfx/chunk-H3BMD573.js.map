{"version":3,"sources":["../src/io/index.ts","../src/io/NordicBleDevice.ts","../src/io/Codec.ts","../src/io/StringReceiveBuffer.ts","../src/io/StringWriteBuffer.ts","../src/io/BleDevice.ts","../src/io/EspruinoDevice.ts"],"sourcesContent":["/**\r\n * Generic support for Bluetooth LE devices\r\n */\r\nexport * as Bluetooth from './NordicBleDevice.js';\r\n\r\n/**\r\n * Espruino-based devices connected via Bluetooth LE\r\n * \r\n * Overview:\r\n * * {@link puck}: Connect to a Puck.js\r\n * * {@link connect}: Connect to a generic Espruino\r\n */\r\nexport * as Espruino from './EspruinoDevice.js';","import {BleDevice} from \"./BleDevice.js\";\r\n\r\nexport const defaultOpts = {\r\n  chunkSize: 20,\r\n  service: `6e400001-b5a3-f393-e0a9-e50e24dcca9e`,\r\n  txGattCharacteristic: `6e400002-b5a3-f393-e0a9-e50e24dcca9e`,\r\n  rxGattCharacteristic: `6e400003-b5a3-f393-e0a9-e50e24dcca9e`,\r\n  name: `NordicDevice`,\r\n  connectAttempts: 5,\r\n  debug: false\r\n};\r\n\r\ntype Opts = {\r\n  readonly chunkSize?:number\r\n  readonly name?:string\r\n  readonly connectAttempts?:number\r\n  readonly debug?:boolean\r\n}\r\n\r\nexport class NordicBleDevice extends BleDevice  {\r\n  constructor(device: BluetoothDevice, opts:Opts = {}) {\r\n    super(device, {...defaultOpts, ...opts});\r\n  }\r\n}\r\n\r\n","export class Codec {\r\n  enc = new TextEncoder();\r\n  dec = new TextDecoder(`utf-8`);\r\n\r\n  toBuffer(str: string) {\r\n    return this.enc.encode(str);\r\n  }\r\n\r\n  fromBuffer(buffer: ArrayBuffer) {\r\n    return this.dec.decode(buffer);\r\n  }\r\n}","export class StringReceiveBuffer {\r\n  buffer: string = ``;\r\n\r\n  constructor(private onData: (data: string) => void, private separator = `\\n`) {\r\n\r\n  }\r\n\r\n  clear() {\r\n    this.buffer = ``;\r\n  }\r\n  \r\n  add(str: string) {\r\n    if (str.length === 0) return;\r\n\r\n    // Look for separator\r\n    const pos = str.indexOf(this.separator);\r\n    if (pos < 0) {\r\n      // Not found, just add to buffer and return\r\n      this.buffer += str;\r\n      return;\r\n    }\r\n\r\n    // Found! Trigger callback for existing buffer and part of new string\r\n    const part = str.substring(0, pos);\r\n    try {\r\n      this.onData(this.buffer + part);\r\n    } catch (ex) {\r\n      console.warn(ex);\r\n    }\r\n    \r\n    // Clear buffer\r\n    this.buffer = ``;\r\n\r\n    // If there are characters let, add remainer\r\n    if (pos < str.length) return;\r\n    this.add(str.substring(pos + 1));\r\n\r\n  }\r\n}","import {QueueMutable, queueMutable} from \"../collections\";\r\nimport {Continuously, continuously} from \"../flow\";\r\nimport {splitByLength} from \"../Text\";\r\n\r\nexport class StringWriteBuffer {\r\n  paused = false;\r\n  queue: QueueMutable<string>;\r\n  writer: Continuously;\r\n  intervalMs: number;\r\n\r\n  constructor(private onData: (data: string) => Promise<void>, private chunkSize = -1) {\r\n    this.intervalMs = 10;\r\n    this.queue = queueMutable<string>();\r\n    this.writer = continuously(() => this.onWrite(), this.intervalMs);\r\n  }\r\n\r\n  clear() {\r\n    this.queue = queueMutable<string>();\r\n  }\r\n\r\n  async onWrite(): Promise<boolean> {\r\n    if (this.queue.isEmpty) {\r\n      console.debug(`WriteBuffer.onWrite: queue empty`);\r\n      return false; // Stop continuously\r\n    }\r\n\r\n    if (this.paused) {\r\n      console.debug(`WriteBuffer.onWrite: paused...`);\r\n      return true; // Keep going tho\r\n    }\r\n\r\n    // Dequeue and send\r\n    const s = this.queue.dequeue();\r\n    if (s === undefined) return false;\r\n    await this.onData(s);\r\n\r\n    return true;\r\n  }\r\n\r\n  add(str: string) {\r\n    // Add whole string or chunked string\r\n    if (this.chunkSize) {\r\n      this.queue.enqueue(...splitByLength(str, this.chunkSize));\r\n    } else {\r\n      this.queue.enqueue(str);\r\n    }\r\n\r\n    // Run continuously loop if it's not already running\r\n    this.writer.start();\r\n  }\r\n}","import {SimpleEventEmitter} from \"../Events.js\";\r\nimport {StateChangeEvent, StateMachine} from \"../flow/StateMachine\";\r\nimport {indexOfCharCode, omitChars} from \"../Text\";\r\nimport {Codec} from \"./Codec\";\r\nimport {StringReceiveBuffer} from \"./StringReceiveBuffer\";\r\nimport {StringWriteBuffer} from \"./StringWriteBuffer\";\r\nimport {retry} from \"../flow/Timer.js\";\r\n\r\nexport type Opts = {\r\n  readonly service:string\r\n  readonly rxGattCharacteristic:string\r\n  readonly txGattCharacteristic:string\r\n  readonly chunkSize:number\r\n  readonly name:string\r\n  readonly connectAttempts:number\r\n  readonly debug:boolean\r\n}\r\n\r\nexport type DataEvent = {\r\n  readonly data:string\r\n}\r\n\r\ntype Events = {\r\n  readonly data: DataEvent\r\n  readonly change: StateChangeEvent\r\n};\r\n\r\nexport class BleDevice extends SimpleEventEmitter<Events> {\r\n  states: StateMachine;\r\n  codec: Codec;\r\n  rx: BluetoothRemoteGATTCharacteristic | undefined;\r\n  tx: BluetoothRemoteGATTCharacteristic | undefined;\r\n  gatt: BluetoothRemoteGATTServer | undefined;\r\n  verboseLogging = false;\r\n\r\n  rxBuffer: StringReceiveBuffer;\r\n  txBuffer: StringWriteBuffer;\r\n\r\n  constructor(private device: BluetoothDevice, private config:Opts) {\r\n    super();\r\n    this.verboseLogging = config.debug;\r\n    this.txBuffer = new StringWriteBuffer(async data => {\r\n      await this.writeInternal(data);\r\n    }, config.chunkSize);\r\n\r\n    this.rxBuffer = new StringReceiveBuffer(line => {\r\n      this.fireEvent(`data`, { data:line });\r\n    });\r\n\r\n    this.codec = new Codec();\r\n    this.states = new StateMachine(`ready`, {\r\n      ready: `connecting`,\r\n      connecting: [`connected`, `closed`],\r\n      connected: [`closed`],\r\n      closed: `connecting`\r\n    });\r\n\r\n    this.states.addEventListener(`change`, evt => {\r\n      this.fireEvent(`change`, evt);\r\n      this.verbose(`${evt.priorState} -> ${evt.newState}`);\r\n      if (evt.priorState === `connected`) {\r\n        // Clear out buffers\r\n        this.rxBuffer.clear();\r\n        this.txBuffer.clear();\r\n      }\r\n    });\r\n\r\n    device.addEventListener(`gattserverdisconnected`, () => {\r\n      if (this.isClosed) return;\r\n      this.verbose(`GATT server disconnected`);\r\n      this.states.state = `closed`;\r\n    });\r\n\r\n    this.verbose(`ctor ${device.name} ${device.id}`);\r\n  }\r\n\r\n  get isConnected():boolean {\r\n    return this.states.state === `connected`;\r\n  }\r\n\r\n  get isClosed():boolean {\r\n    return this.states.state === `closed`;\r\n  }\r\n\r\n  write(txt: string) {\r\n    if (this.states.state !== `connected`) throw new Error(`Cannot write while state is ${this.states.state}`);\r\n    this.txBuffer.add(txt);\r\n  }\r\n\r\n  private async writeInternal(txt: string) {\r\n    this.verbose(`writeInternal ${txt}`);\r\n    const tx = this.tx;\r\n    if (tx === undefined) throw new Error(`Unexpectedly without tx characteristic`);\r\n    try {\r\n      await tx.writeValue(this.codec.toBuffer(txt));\r\n    } catch (ex:unknown) {\r\n      this.warn(ex);\r\n    }\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.states.state !== `connected`) return;\r\n    this.gatt?.disconnect();\r\n  }\r\n\r\n  async connect() {\r\n    const attempts = this.config.connectAttempts ?? 3;\r\n\r\n    this.states.state = `connecting`;\r\n\r\n    this.verbose(`connect`);\r\n    const gatt = this.device.gatt;\r\n    if (gatt === undefined) throw new Error(`Gatt not available on device`);\r\n\r\n    await retry(async () => {\r\n      const server = await gatt.connect();\r\n      this.verbose(`Getting primary service`);\r\n      const service = await server.getPrimaryService(this.config.service);\r\n      this.verbose(`Getting characteristics`);\r\n      const rx = await service.getCharacteristic(this.config.rxGattCharacteristic);\r\n      const tx = await service.getCharacteristic(this.config.txGattCharacteristic);\r\n  \r\n      rx.addEventListener(`characteristicvaluechanged`, (evt) => this.onRx(evt));\r\n      this.rx = rx;\r\n      this.tx = tx;\r\n      this.gatt = gatt;\r\n      this.states.state = `connected`;\r\n  \r\n      await rx.startNotifications();\r\n    }, attempts, 200);\r\n  }\r\n\r\n  private onRx(evt: Event) {\r\n    const rx = this.rx;\r\n    if (rx === undefined) return;\r\n\r\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const view = (evt.target as any).value as DataView;\r\n    if (view === undefined) return;\r\n\r\n    //eslint-disable-next-line functional/no-let\r\n    let str = this.codec.fromBuffer(view.buffer);\r\n\r\n    // Check for flow control chars\r\n    const plzStop = indexOfCharCode(str, 19);\r\n    const plzStart = indexOfCharCode(str, 17);\r\n\r\n    // Remove if found\r\n    if (plzStart && plzStop < plzStart) {\r\n      this.verbose(`Tx plz start`);\r\n      str = omitChars(str, plzStart, 1);\r\n      this.txBuffer.paused = false;\r\n    }\r\n    if (plzStop && plzStop > plzStart) {\r\n      this.verbose(`Tx plz stop`);\r\n      str = omitChars(str, plzStop, 1);\r\n      this.txBuffer.paused = true;\r\n    }\r\n\r\n    this.rxBuffer.add(str);\r\n  }\r\n\r\n  protected verbose(m: string) {\r\n    if (this.verboseLogging) console.info(`${this.config.name} `, m);\r\n  }\r\n\r\n  protected log(m: string) {\r\n    console.log(`${this.config.name} `, m);\r\n  }\r\n\r\n  protected warn(m:unknown) {\r\n    console.warn(`${this.config.name} `, m);\r\n  }\r\n}\r\n\r\n","import {StateChangeEvent} from \"~/flow/StateMachine.js\";\r\nimport {waitFor} from \"../flow/Timer.js\";\r\nimport {string as randomString} from \"../Random.js\";\r\nimport * as BleDevice from \"./BleDevice.js\";\r\nimport {defaultOpts as NordicDefaults, NordicBleDevice} from \"./NordicBleDevice.js\";\r\n\r\n/**\r\n * Options for device\r\n */\r\nexport type Options = {\r\n  /**\r\n   * Default milliseconds to wait before giving up on a well-formed reply. 5 seconds is the default.\r\n   */\r\n  readonly evalTimeoutMs?:number;\r\n  /**\r\n   * Name of device. Only used for printing log mesages to the console\r\n   */\r\n  readonly name?:string;\r\n\r\n  /**\r\n   * If true, additional logging information is printed\r\n   */\r\n  readonly debug?:boolean;\r\n}\r\n\r\n/**\r\n * Options for code evaluation\r\n */\r\nexport type EvalOpts = {\r\n  /**\r\n   * Milliseconds to wait before giving up on well-formed reply. 5 seconds is the default.\r\n   */\r\n  readonly timeoutMs?:number\r\n  /**\r\n   * If true (default), it assumes that anything received from the board\r\n   * is a response to the eval\r\n   */\r\n  readonly assumeExclusive?:boolean\r\n};\r\n\r\n/**\r\n * An Espruino BLE-connection\r\n * \r\n * Use the `puck` function to initialise and connect to a Puck.js.\r\n * It must be called in a UI event handler for browser security reasons.\r\n * \r\n * ```js\r\n * const e = await puck();\r\n * ```\r\n * \r\n * Listen for events:\r\n * ```js\r\n * // Received something\r\n * e.addEventListener(`data`, d => console.log(d.data));\r\n * // Monitor connection state\r\n * e.addEventListener(`change`, c => console.log(`${d.priorState} -> ${d.newState}`));\r\n * ```\r\n * \r\n * Write to the device (note the \\n for a new line at the end of the string). This will\r\n * execute the code on the Espruino.\r\n * \r\n * ```js\r\n * e.write(`digitalPulse(LED1,1,[10,500,10,500,10]);\\n`);\r\n * ```\r\n * \r\n * Run some code and return result:\r\n * ```js\r\n * const result = await e.eval(`2+2\\n`);\r\n * ```\r\n */\r\nexport class EspruinoDevice extends NordicBleDevice {\r\n  evalTimeoutMs:number;\r\n\r\n  /**\r\n   * Creates instance. You probably would rather use {@link puck} to create.\r\n   * @param device\r\n   * @param opts \r\n   */\r\n  constructor(device:BluetoothDevice, opts:Options = {}) {\r\n    super(device, opts);\r\n    this.evalTimeoutMs = opts.evalTimeoutMs ?? 5*1000;\r\n  }\r\n\r\n  /**\r\n   * Writes a script to Espruino.\r\n   * \r\n   * It will first send a CTRL+C to cancel any previous input, `reset()` to clear the board,\r\n   * and then the provided `code` followed by a new line.\r\n   * @param code Code to send. A new line is added automatically.\r\n   * \r\n   * ```js\r\n   * // Eg from https://www.espruino.com/Web+Bluetooth\r\n   * writeScript(`\r\n   * setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\r\n   * NRF.on('disconnect',()=>reset());\r\n   * `);\r\n   * ```\r\n   */\r\n  async writeScript(code:string) {\r\n    this.write(`\\x03\\x10reset();\\n`);\r\n    this.write(`\\x10${code}\\n`);\r\n  }\r\n\r\n  /**\r\n   * Sends some code to be executed on the Espruino. The result\r\n   * is packaged into JSON and sent back to your code. An exception is\r\n   * thrown if code can't be executed for some reason.\r\n   * \r\n   * ```js\r\n   * const sum = await e.eval(`2+2`);\r\n   * ```\r\n   * \r\n   * It will wait for a period of time for a well-formed response from the\r\n   * Espruino. This might not happen if there is a connection problem\r\n   * or a syntax error in the code being evaled. In cases like the latter,\r\n   * it will take up to `timeoutMs` (default 5 seconds) before we give up\r\n   * waiting for a correct response and throw an error.\r\n   * \r\n   * Tweaking of the timeout may be required if `eval()` is giving up too quickly\r\n   * or too slowly. A default timeout can be given when creating the class.\r\n   * \r\n   * Options:\r\n   *  timeoutMs: Timeout for execution. 5 seconds by default\r\n   *  assumeExclusive If true, eval assumes all replies from controller are in response to eval. True by default\r\n   * @param code Code to run on the Espruino.\r\n   * @param opts Options\r\n   */\r\n  async eval(code:string, opts:EvalOpts = {}):Promise<string> {\r\n    const timeoutMs = opts.timeoutMs ?? this.evalTimeoutMs;\r\n    const assumeExclusive = opts.assumeExclusive ?? true;\r\n\r\n    if (typeof code !== `string`) throw new Error(`code parameter should be a string`);\r\n      \r\n    return new Promise((resolve, reject) => {\r\n      // Generate a random id so reply can be matched up with this request\r\n      const id = randomString(5);\r\n\r\n      const onData = (d:BleDevice.DataEvent) => {\r\n        try {\r\n          // Parse reply, expecting JSON.\r\n          const dd = JSON.parse(d.data);\r\n\r\n          // Check for reply field, and that it matches\r\n          if (`reply` in dd) {\r\n            if (dd.reply === id) {\r\n              done(); // Stop waiting for result\r\n              if (`result` in dd) {\r\n                resolve(dd.result);\r\n              }\r\n            } else {\r\n              this.warn(`Expected reply ${id}, got ${dd.reply}`);\r\n            }\r\n          }\r\n        } catch (ex:unknown) {\r\n          // If there was a syntax error, response won't be JSON\r\n          if (assumeExclusive) {\r\n            // Fail with unexpected reply as the message\r\n            done(d.data);\r\n          } else {\r\n            // Unexpected reply, but we cannot be sure if it's in response to eval or\r\n            // some other code running on board. So just warn and eventually timeout\r\n            this.warn(ex);\r\n          }\r\n        }\r\n      };\r\n\r\n      const onStateChange = (e:StateChangeEvent) => {\r\n        if (e.newState !== `connected`) done(`State changed to '${e.newState}', aborting`);\r\n      };\r\n\r\n      this.addEventListener(`data`, onData);\r\n      this.addEventListener(`change`, onStateChange);\r\n\r\n      // Init waitFor\r\n      const done = waitFor(timeoutMs, (reason:string) => {\r\n        reject(reason);\r\n      }, () => {\r\n        // If we got a response or there was a timeout, remove event listeners\r\n        this.removeEventListener(`data`, onData);\r\n        this.removeEventListener(`change`, onStateChange);\r\n      });\r\n\r\n      this.write(`\\x10Bluetooth.println(JSON.stringify({reply:\"${id}\", result:JSON.stringify(${code})}))\\n`);\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @inheritdoc EspruinoDevice\r\n * @returns Returns a connected instance, or throws exception if user cancelled or could not connect.\r\n */\r\nexport const puck = async (opts:{readonly name?:string, readonly debug?:boolean} = {}) => {\r\n  const name = opts.name ?? `Puck`;\r\n  const debug = opts.debug ?? false;\r\n\r\n  const device = await navigator.bluetooth.requestDevice({\r\n    filters: [\r\n      {namePrefix: `Puck.js`},\r\n      // {namePrefix: 'Pixl.js'},\r\n      // {namePrefix: 'MDBT42Q'},\r\n      // {namePrefix: 'RuuviTag'},\r\n      // {namePrefix: 'iTracker'},\r\n      // {namePrefix: 'Thingy'},\r\n      // {namePrefix: 'Espruino'},\r\n      {services: [NordicDefaults.service]}\r\n    ], optionalServices: [NordicDefaults.service]\r\n  });\r\n  const d = new EspruinoDevice(device, {name, debug});\r\n  await d.connect();\r\n  return d;\r\n};\r\n\r\n/**\r\n * @inheritdoc EspruinoDevice\r\n * @returns Returns a connected instance, or throws exception if user cancelled or could not connect.\r\n */\r\nexport const connect = async () => {\r\n  const device = await navigator.bluetooth.requestDevice({\r\n    filters: [\r\n      {namePrefix: `Puck.js`},\r\n      {namePrefix: `Pixl.js`},\r\n      {namePrefix: `MDBT42Q`},\r\n      {namePrefix: `RuuviTag`},\r\n      {namePrefix: `iTracker`},\r\n      {namePrefix: `Thingy`},\r\n      {namePrefix: `Espruino`},\r\n      {services: [NordicDefaults.service]}\r\n    ], optionalServices: [NordicDefaults.service]\r\n  });\r\n  const d = new EspruinoDevice(device, {name:`Espruino`});\r\n  await d.connect();\r\n  return d;\r\n};"],"mappings":"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","names":[]}