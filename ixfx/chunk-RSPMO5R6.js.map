{"version":3,"sources":["../src/Events.ts","../src/collections/SimpleMapArray.ts"],"sourcesContent":["/* eslint-disable */\nimport { simpleMapArrayMutable } from \"./collections/SimpleMapArray.js\";\nexport type Listener<Events> = (ev: unknown, sender: SimpleEventEmitter<Events>) => void;\n\n// type FlowSource = {\n//   name:string,\n//   dispose():void,\n//   input:FlowSink,\n// };\n\n// type FlowHandler = (args?:any) => void;\n\n// interface FlowSink {\n//  [key:string]: FlowHandler;\n// }\n\n// export type Debouncer = {\n//   reset:()=>void\n//   dispose:()=>void\n// }\n\n// const sinkify = (handler:FlowHandler): FlowSink => ({ '*': handler });\n\n// export const debounceFactory = (sink:FlowSink, opts:{timeoutMs:number}): FlowSource => {\n//   let timer:number|undefined;\n\n//   const input = sinkify(() => {\n//     //console.log(`debounce reset`);\n//     if (timer) window.clearTimeout(timer);\n//     timer = window.setTimeout(() => { sink[`*`](null); }, opts.timeoutMs);\n//   });\n\n//   const dispose = () => {\n//     if (timer) window.clearTimeout(timer);\n//     timer = undefined;\n//   };\n\n//   return { input, dispose, name:`debounce` };\n// };\n\n// export const debounce = (triggered:()=>void, timeoutMs:number):Debouncer => {\n//   const opts = { timeoutMs: timeoutMs};\n  \n//   const sink:FlowSink = {\n//     '*': () => {\n//       triggered();\n//     }\n//   };\n//   const source = debounceFactory(sink, opts);\n//   const reset = () => {\n//     source.input[`*`](null);\n//   };\n//   return {...source, reset};\n// };\n\nexport interface ISimpleEventEmitter<Events> {\n  addEventListener<K extends keyof Events>(type: K, listener: (ev: Events[K], sender: SimpleEventEmitter<Events>) => void): void;\n  removeEventListener<K extends keyof Events>(type: K, listener: (ev: Events[K], sender: SimpleEventEmitter<Events>) => void):void;\n};\n\nexport class SimpleEventEmitter<Events> implements ISimpleEventEmitter<Events> {\n  readonly #listeners = simpleMapArrayMutable<Listener<Events>>();\n\n  /**\n   * Fire event\n   * @private\n   * @param type Type of event \n   * @param args Arguments for event\n   * @returns\n   */\n  protected fireEvent<K extends keyof Events>(type: K, args: Events[K]) {\n    const listeners = this.#listeners.get(type as string);\n    if (listeners === undefined) return;\n    listeners.forEach(l => {\n      try {\n        l(args, this);\n      } catch (err) {\n        console.debug(`Event listener error: `, err);\n      }\n    });\n  }\n\n  /**\n   * Adds event listener\n   *\n   * @template K\n   * @param {K} type\n   * @param {Listener<Events>} listener\n   * @memberof SimpleEventEmitter\n   */\n  addEventListener<K extends keyof Events>(type: K, listener: (ev: Events[K], sender: SimpleEventEmitter<Events>) => void): void { // (this: any, ev: Events[K]) => any): void {\n    this.#listeners.add(type as string, listener as Listener<Events>);\n  }\n  \n  /**\n   * Remove event listener\n   *\n   * @param {Listener<Events>} listener\n   * @memberof SimpleEventEmitter\n   */\n  removeEventListener<K extends keyof Events>(type: K, listener: (ev: Events[K], sender: SimpleEventEmitter<Events>) => void) { // listener: Listener<Events>): void {\n    this.#listeners.delete(type as string, listener as Listener<Events>);\n  }\n\n  /**\n   * Clear all event listeners\n   * @private\n   * @memberof SimpleEventEmitter\n   */\n  clearEventListeners() {\n    this.#listeners.clear();\n  }\n}\n\n// type TestEventMap = {\n//   readonly change: TestEvent\n//   readonly other: TestEvent2;\n// }\n\n// interface TestEvent2 {\n//   readonly something: string;\n// }\n// interface TestEvent {\n//   readonly blah: boolean;\n// }\n\n// class TestEmitter extends SimpleEventEmitter<TestEventMap> {\n//   constructor() {\n//     super();\n//     this.addEventListener(`change`, (e) => {\n//       e.blah;\n//     });\n//   }\n// }\n\n/*\nexport class Event {\n  public target: any;\n  public type: string;\n  constructor(type: string, target: any) {\n    this.target = target;\n    this.type = type;\n  }\n}\n\nexport class ErrorEvent extends Event {\n  public message: string;\n  public error: Error;\n  constructor(error: Error, target: any) {\n    super('error', target);\n    this.message = error.message;\n    this.error = error;\n  }\n}\n\nexport class CloseEvent extends Event {\n  public code: number;\n  public reason: string;\n  public wasClean = true;\n  constructor(code = 1000, reason = '', target: any) {\n    super('close', target);\n    this.code = code;\n    this.reason = reason;\n  }\n}\nexport interface WebSocketEventMap {\n  close: CloseEvent;\n  error: ErrorEvent;\n  message: MessageEvent;\n  open: Event;\n}\n\nexport interface WebSocketEventListenerMap {\n  close: (event: CloseEvent) => void | {handleEvent: (event: CloseEvent) => void};\n  error: (event: ErrorEvent) => void | {handleEvent: (event: ErrorEvent) => void};\n  message: (event: MessageEvent) => void | {handleEvent: (event: MessageEvent) => void};\n  open: (event: Event) => void | {handleEvent: (event: Event) => void};\n}\n*/","import {SimpleMapArrayMutable} from \"./Interfaces.js\";\n\nclass SimpleMapArrayMutableImpl<V> {\n  /* eslint-disable-next-line functional/prefer-readonly-type */\n  readonly #map: Map<string, ReadonlyArray<V>> = new Map();\n\n  add(key: string, ...values: ReadonlyArray<V>) {\n    const existing = this.#map.get(key);\n    if (existing === undefined) {\n      this.#map.set(key, values);\n    } else {\n      this.#map.set(key, [...existing, ...values]);\n    }\n  }\n\n  keys():IterableIterator<string> {\n    return this.#map.keys();\n  }\n\n  \n  debugString(): string {\n    // eslint-disable-next-line functional/no-let\n    let r = ``;\n    const keys = Array.from(this.#map.keys());\n    keys.every(k => {\n      const v = this.#map.get(k);\n      if (v === undefined) return;\n      r += k + ` (${v.length}) = ${JSON.stringify(v)}\\r\\n`;\n    });\n    return r;\n  }\n\n  get(key: string): ReadonlyArray<V> | undefined {\n    return this.#map.get(key);\n  }\n\n  delete(key: string, v: V): boolean {\n    const existing = this.#map.get(key);\n    if (existing === undefined) return false;\n    const without = existing.filter(i => i !== v);\n    this.#map.set(key, without);\n    return without.length < existing.length;\n  }\n\n  clear() {\n    this.#map.clear();\n  }\n}\n\n/**\n * A simple mutable map of arrays, without events. It can store multiple values\n * under the same key.\n * \n * For a fancier approaches, consider {@link mapArray}, {@link mapCircularMutable} or {@link mapSet}.\n * \n * @example\n * ```js\n * const m = simpleMapArrayMutable();\n * m.add(`hello`, 1, 2, 3); // Adds numbers under key `hello`\n * m.delete(`hello`);       // Deletes everything under `hello`\n * \n * const hellos = m.get(`hello`); // Get list of items under `hello`\n * ```\n *\n * @template V Type of items\n * @returns New instance\n */\nexport const simpleMapArrayMutable = <V>():SimpleMapArrayMutable<V> => new SimpleMapArrayMutableImpl();"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAEA,IAAM,4BAAN,MAAmC;AAAA,EAAnC;AAEE;AAAA,uBAAS,MAAsC,oBAAI,IAAI;AAAA;AAAA,EAEvD,IAAI,QAAgB,QAA0B;AAC5C,UAAM,WAAW,mBAAK,MAAK,IAAI,GAAG;AAClC,QAAI,aAAa,QAAW;AAC1B,yBAAK,MAAK,IAAI,KAAK,MAAM;AAAA,IAC3B,OAAO;AACL,yBAAK,MAAK,IAAI,KAAK,CAAC,GAAG,UAAU,GAAG,MAAM,CAAC;AAAA,IAC7C;AAAA,EACF;AAAA,EAEA,OAAgC;AAC9B,WAAO,mBAAK,MAAK,KAAK;AAAA,EACxB;AAAA,EAGA,cAAsB;AAEpB,QAAI,IAAI;AACR,UAAM,OAAO,MAAM,KAAK,mBAAK,MAAK,KAAK,CAAC;AACxC,SAAK,MAAM,OAAK;AACd,YAAM,IAAI,mBAAK,MAAK,IAAI,CAAC;AACzB,UAAI,MAAM;AAAW;AACrB,WAAK,IAAI,KAAK,EAAE,aAAa,KAAK,UAAU,CAAC;AAAA;AAAA,IAC/C,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EAEA,IAAI,KAA2C;AAC7C,WAAO,mBAAK,MAAK,IAAI,GAAG;AAAA,EAC1B;AAAA,EAEA,OAAO,KAAa,GAAe;AACjC,UAAM,WAAW,mBAAK,MAAK,IAAI,GAAG;AAClC,QAAI,aAAa;AAAW,aAAO;AACnC,UAAM,UAAU,SAAS,OAAO,OAAK,MAAM,CAAC;AAC5C,uBAAK,MAAK,IAAI,KAAK,OAAO;AAC1B,WAAO,QAAQ,SAAS,SAAS;AAAA,EACnC;AAAA,EAEA,QAAQ;AACN,uBAAK,MAAK,MAAM;AAAA,EAClB;AACF;AA3CW;AA+DJ,IAAM,wBAAwB,MAAkC,IAAI,0BAA0B;;;ADnErG;AA4DO,IAAM,qBAAN,MAAwE;AAAA,EAAxE;AACL,uBAAS,YAAa,sBAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASpD,UAAkC,MAAS,MAAiB;AACpE,UAAM,YAAY,mBAAK,YAAW,IAAI,IAAc;AACpD,QAAI,cAAc;AAAW;AAC7B,cAAU,QAAQ,OAAK;AACrB,UAAI;AACF,UAAE,MAAM,IAAI;AAAA,MACd,SAAS,KAAP;AACA,gBAAQ,MAAM,0BAA0B,GAAG;AAAA,MAC7C;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,iBAAyC,MAAS,UAA6E;AAC7H,uBAAK,YAAW,IAAI,MAAgB,QAA4B;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,oBAA4C,MAAS,UAAuE;AAC1H,uBAAK,YAAW,OAAO,MAAgB,QAA4B;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,sBAAsB;AACpB,uBAAK,YAAW,MAAM;AAAA,EACxB;AACF;AAnDW;","names":[]}