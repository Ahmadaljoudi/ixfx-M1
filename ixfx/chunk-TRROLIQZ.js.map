{"version":3,"sources":["../src/io/index.ts","../src/io/NordicBleDevice.ts","../src/io/Codec.ts","../src/io/StringReceiveBuffer.ts","../src/io/StringWriteBuffer.ts","../src/io/BleDevice.ts","../src/io/EspruinoDevice.ts","../src/io/Camera.ts","../src/io/Serial.ts","../src/io/JsonDevice.ts"],"sourcesContent":["/**\r\n * Generic support for Bluetooth LE devices\r\n */\r\nexport * as Bluetooth from './NordicBleDevice.js';\r\n\r\n/**\r\n * Espruino-based devices connected via Bluetooth LE\r\n * \r\n * Overview:\r\n * * {@link puck}: Connect to a Puck.js\r\n * * {@link connect}: Connect to a generic Espruino\r\n */\r\nexport * as Espruino from './EspruinoDevice.js';\r\n\r\nexport * as Camera from './Camera.js';\r\n\r\nexport * as Serial from './Serial.js';","import {BleDevice} from \"./BleDevice.js\";\r\n\r\nexport const defaultOpts = {\r\n  chunkSize: 20,\r\n  service: `6e400001-b5a3-f393-e0a9-e50e24dcca9e`,\r\n  txGattCharacteristic: `6e400002-b5a3-f393-e0a9-e50e24dcca9e`,\r\n  rxGattCharacteristic: `6e400003-b5a3-f393-e0a9-e50e24dcca9e`,\r\n  name: `NordicDevice`,\r\n  connectAttempts: 5,\r\n  debug: false\r\n};\r\n\r\ntype Opts = {\r\n  readonly chunkSize?:number\r\n  readonly name?:string\r\n  readonly connectAttempts?:number\r\n  readonly debug?:boolean\r\n}\r\n\r\nexport class NordicBleDevice extends BleDevice  {\r\n  constructor(device: BluetoothDevice, opts:Opts = {}) {\r\n    super(device, {...defaultOpts, ...opts});\r\n  }\r\n}\r\n\r\n","\r\n/**\r\n * Handles utf-8 text encoding/decoding\r\n */\r\nexport class Codec {\r\n  enc = new TextEncoder();\r\n  dec = new TextDecoder(`utf-8`);\r\n\r\n  /**\r\n   * Convert string to Uint8Array buffer\r\n   * @param str \r\n   * @returns \r\n   */\r\n  toBuffer(str: string) {\r\n    return this.enc.encode(str);\r\n  }\r\n\r\n  /**\r\n   * Returns a string from a provided buffer\r\n   * @param buffer \r\n   * @returns \r\n   */\r\n  fromBuffer(buffer: ArrayBuffer) {\r\n    return this.dec.decode(buffer);\r\n  }\r\n}","import {lineThroughPoints} from \"~/visual/Drawing\";\r\n\r\nexport class StringReceiveBuffer {\r\n  buffer: string = ``;\r\n  stream:WritableStream<string>|undefined;\r\n\r\n  constructor(private onData: (data: string) => void, public separator = `\\n`) {\r\n\r\n  }\r\n\r\n  clear() {\r\n    this.buffer = ``;\r\n  }\r\n\r\n  writable() {\r\n    if (this.stream === undefined) this.stream = this.createWritable();\r\n    return this.stream;\r\n  }\r\n\r\n  private createWritable() {\r\n    //eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    const b = this;\r\n    return new WritableStream<string>({\r\n      write(chunk) {\r\n        b.add(chunk);\r\n      },\r\n      close() {\r\n        b.clear();\r\n      }\r\n    });\r\n  }\r\n\r\n  add(str: string) {\r\n    if (str.length === 0) return;\r\n\r\n    // Look for separator in new string\r\n    const pos = str.indexOf(this.separator);\r\n    if (pos < 0) {\r\n      // Not found, just add to buffer and return\r\n      this.buffer += str;\r\n      return;\r\n    }\r\n\r\n    // Found! Trigger callback for existing buffer and part of new string\r\n    const part = str.substring(0, pos);\r\n    try {\r\n      console.log(`>>` + this.buffer + part + '<<');\r\n      this.onData(this.buffer + part);\r\n    } catch (ex) {\r\n      console.warn(ex);\r\n    }\r\n    \r\n    // Clear buffer\r\n    this.buffer = ``;\r\n\r\n    // If there are characters let, add remainer\r\n    if (pos < str.length) return;\r\n    this.add(str.substring(pos + 1));\r\n\r\n  }\r\n}","import {QueueMutable, queueMutable} from \"../collections\";\r\nimport {Continuously, continuously} from \"../flow\";\r\nimport {splitByLength} from \"../Text\";\r\n\r\nexport class StringWriteBuffer {\r\n  paused = false;\r\n  queue: QueueMutable<string>;\r\n  writer: Continuously;\r\n  intervalMs: number;\r\n  stream:WritableStream<string>|undefined;\r\n\r\n  constructor(private onData: (data: string) => Promise<void>, private chunkSize = -1) {\r\n    this.intervalMs = 10;\r\n    this.queue = queueMutable<string>();\r\n    this.writer = continuously(() => this.onWrite(), this.intervalMs);\r\n  }\r\n\r\n  clear() {\r\n    this.queue = queueMutable<string>();\r\n  }\r\n\r\n  writable() {\r\n    if (this.stream === undefined) this.stream = this.createWritable();\r\n    return this.stream;\r\n  }\r\n\r\n  private createWritable() {\r\n    //eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    const b = this;\r\n    return new WritableStream<string>({\r\n      write(chunk) {\r\n        b.add(chunk);\r\n      },\r\n      close() {\r\n        b.clear();\r\n      }\r\n    });\r\n  }\r\n\r\n  async onWrite(): Promise<boolean> {\r\n    if (this.queue.isEmpty) {\r\n      //console.warn(`WriteBuffer.onWrite: queue empty`);\r\n      return false; // Stop continuously\r\n    }\r\n\r\n    if (this.paused) {\r\n      console.warn(`WriteBuffer.onWrite: paused...`);\r\n      return true; // Keep going tho\r\n    }\r\n\r\n    // Dequeue and send\r\n    const s = this.queue.dequeue();\r\n    if (s === undefined) return false;\r\n    await this.onData(s);\r\n\r\n    return true;\r\n  }\r\n\r\n  add(str: string) {\r\n    // Add whole string or chunked string\r\n    if (this.chunkSize > 0) {\r\n      this.queue.enqueue(...splitByLength(str, this.chunkSize));\r\n    } else {\r\n      this.queue.enqueue(str);\r\n    }\r\n\r\n    // Run continuously loop if it's not already running\r\n    this.writer.start();\r\n  }\r\n}","import {SimpleEventEmitter} from \"../Events.js\";\r\nimport {StateChangeEvent, StateMachine} from \"../flow/StateMachine\";\r\nimport {indexOfCharCode, omitChars} from \"../Text\";\r\nimport {Codec} from \"./Codec\";\r\nimport {StringReceiveBuffer} from \"./StringReceiveBuffer\";\r\nimport {StringWriteBuffer} from \"./StringWriteBuffer\";\r\nimport {retry} from \"../flow/Timer.js\";\r\n\r\nexport type Opts = {\r\n  readonly service:string\r\n  readonly rxGattCharacteristic:string\r\n  readonly txGattCharacteristic:string\r\n  readonly chunkSize:number\r\n  readonly name:string\r\n  readonly connectAttempts:number\r\n  readonly debug:boolean\r\n}\r\n\r\nexport type DataEvent = {\r\n  readonly data:string\r\n}\r\n\r\ntype Events = {\r\n  readonly data: DataEvent\r\n  readonly change: StateChangeEvent\r\n};\r\n\r\nexport class BleDevice extends SimpleEventEmitter<Events> {\r\n  states: StateMachine;\r\n  codec: Codec;\r\n  rx: BluetoothRemoteGATTCharacteristic | undefined;\r\n  tx: BluetoothRemoteGATTCharacteristic | undefined;\r\n  gatt: BluetoothRemoteGATTServer | undefined;\r\n  verboseLogging = false;\r\n\r\n  rxBuffer: StringReceiveBuffer;\r\n  txBuffer: StringWriteBuffer;\r\n\r\n  constructor(private device: BluetoothDevice, private config:Opts) {\r\n    super();\r\n    this.verboseLogging = config.debug;\r\n    this.txBuffer = new StringWriteBuffer(async data => {\r\n      await this.writeInternal(data);\r\n    }, config.chunkSize);\r\n\r\n    this.rxBuffer = new StringReceiveBuffer(line => {\r\n      this.fireEvent(`data`, { data:line });\r\n    });\r\n\r\n    this.codec = new Codec();\r\n    this.states = new StateMachine(`ready`, {\r\n      ready: `connecting`,\r\n      connecting: [`connected`, `closed`],\r\n      connected: [`closed`],\r\n      closed: `connecting`\r\n    });\r\n\r\n    this.states.addEventListener(`change`, evt => {\r\n      this.fireEvent(`change`, evt);\r\n      this.verbose(`${evt.priorState} -> ${evt.newState}`);\r\n      if (evt.priorState === `connected`) {\r\n        // Clear out buffers\r\n        this.rxBuffer.clear();\r\n        this.txBuffer.clear();\r\n      }\r\n    });\r\n\r\n    device.addEventListener(`gattserverdisconnected`, () => {\r\n      if (this.isClosed) return;\r\n      this.verbose(`GATT server disconnected`);\r\n      this.states.state = `closed`;\r\n    });\r\n\r\n    this.verbose(`ctor ${device.name} ${device.id}`);\r\n  }\r\n\r\n  get isConnected():boolean {\r\n    return this.states.state === `connected`;\r\n  }\r\n\r\n  get isClosed():boolean {\r\n    return this.states.state === `closed`;\r\n  }\r\n\r\n  write(txt: string) {\r\n    if (this.states.state !== `connected`) throw new Error(`Cannot write while state is ${this.states.state}`);\r\n    this.txBuffer.add(txt);\r\n  }\r\n\r\n  private async writeInternal(txt: string) {\r\n    this.verbose(`writeInternal ${txt}`);\r\n    const tx = this.tx;\r\n    if (tx === undefined) throw new Error(`Unexpectedly without tx characteristic`);\r\n    try {\r\n      await tx.writeValue(this.codec.toBuffer(txt));\r\n    } catch (ex:unknown) {\r\n      this.warn(ex);\r\n    }\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.states.state !== `connected`) return;\r\n    this.gatt?.disconnect();\r\n  }\r\n\r\n  async connect() {\r\n    const attempts = this.config.connectAttempts ?? 3;\r\n\r\n    this.states.state = `connecting`;\r\n\r\n    this.verbose(`connect`);\r\n    const gatt = this.device.gatt;\r\n    if (gatt === undefined) throw new Error(`Gatt not available on device`);\r\n\r\n    await retry(async () => {\r\n      const server = await gatt.connect();\r\n      this.verbose(`Getting primary service`);\r\n      const service = await server.getPrimaryService(this.config.service);\r\n      this.verbose(`Getting characteristics`);\r\n      const rx = await service.getCharacteristic(this.config.rxGattCharacteristic);\r\n      const tx = await service.getCharacteristic(this.config.txGattCharacteristic);\r\n  \r\n      rx.addEventListener(`characteristicvaluechanged`, (evt) => this.onRx(evt));\r\n      this.rx = rx;\r\n      this.tx = tx;\r\n      this.gatt = gatt;\r\n      this.states.state = `connected`;\r\n  \r\n      await rx.startNotifications();\r\n    }, attempts, 200);\r\n  }\r\n\r\n  private onRx(evt: Event) {\r\n    const rx = this.rx;\r\n    if (rx === undefined) return;\r\n\r\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const view = (evt.target as any).value as DataView;\r\n    if (view === undefined) return;\r\n\r\n    //eslint-disable-next-line functional/no-let\r\n    let str = this.codec.fromBuffer(view.buffer);\r\n\r\n    // Check for flow control chars\r\n    const plzStop = indexOfCharCode(str, 19);\r\n    const plzStart = indexOfCharCode(str, 17);\r\n\r\n    // Remove if found\r\n    if (plzStart && plzStop < plzStart) {\r\n      this.verbose(`Tx plz start`);\r\n      str = omitChars(str, plzStart, 1);\r\n      this.txBuffer.paused = false;\r\n    }\r\n    if (plzStop && plzStop > plzStart) {\r\n      this.verbose(`Tx plz stop`);\r\n      str = omitChars(str, plzStop, 1);\r\n      this.txBuffer.paused = true;\r\n    }\r\n\r\n    this.rxBuffer.add(str);\r\n  }\r\n\r\n  protected verbose(m: string) {\r\n    if (this.verboseLogging) console.info(`${this.config.name} `, m);\r\n  }\r\n\r\n  protected log(m: string) {\r\n    console.log(`${this.config.name} `, m);\r\n  }\r\n\r\n  protected warn(m:unknown) {\r\n    console.warn(`${this.config.name} `, m);\r\n  }\r\n}\r\n\r\n","import {StateChangeEvent} from \"~/flow/StateMachine.js\";\r\nimport {waitFor} from \"../flow/Timer.js\";\r\nimport {string as randomString} from \"../Random.js\";\r\nimport * as BleDevice from \"./BleDevice.js\";\r\nimport {defaultOpts as NordicDefaults, NordicBleDevice} from \"./NordicBleDevice.js\";\r\n\r\n/**\r\n * Options for device\r\n */\r\nexport type Options = {\r\n  /**\r\n   * Default milliseconds to wait before giving up on a well-formed reply. 5 seconds is the default.\r\n   */\r\n  readonly evalTimeoutMs?:number;\r\n  /**\r\n   * Name of device. Only used for printing log mesages to the console\r\n   */\r\n  readonly name?:string;\r\n\r\n  /**\r\n   * If true, additional logging information is printed\r\n   */\r\n  readonly debug?:boolean;\r\n}\r\n\r\n/**\r\n * Options for code evaluation\r\n */\r\nexport type EvalOpts = {\r\n  /**\r\n   * Milliseconds to wait before giving up on well-formed reply. 5 seconds is the default.\r\n   */\r\n  readonly timeoutMs?:number\r\n  /**\r\n   * If true (default), it assumes that anything received from the board\r\n   * is a response to the eval\r\n   */\r\n  readonly assumeExclusive?:boolean\r\n};\r\n\r\n/**\r\n * An Espruino BLE-connection\r\n * \r\n * Use the `puck` function to initialise and connect to a Puck.js.\r\n * It must be called in a UI event handler for browser security reasons.\r\n * \r\n * ```js\r\n * const e = await puck();\r\n * ```\r\n * \r\n * Listen for events:\r\n * ```js\r\n * // Received something\r\n * e.addEventListener(`data`, d => console.log(d.data));\r\n * // Monitor connection state\r\n * e.addEventListener(`change`, c => console.log(`${d.priorState} -> ${d.newState}`));\r\n * ```\r\n * \r\n * Write to the device (note the \\n for a new line at the end of the string). This will\r\n * execute the code on the Espruino.\r\n * \r\n * ```js\r\n * e.write(`digitalPulse(LED1,1,[10,500,10,500,10]);\\n`);\r\n * ```\r\n * \r\n * Run some code and return result:\r\n * ```js\r\n * const result = await e.eval(`2+2\\n`);\r\n * ```\r\n */\r\nexport class EspruinoDevice extends NordicBleDevice {\r\n  evalTimeoutMs:number;\r\n\r\n  /**\r\n   * Creates instance. You probably would rather use {@link puck} to create.\r\n   * @param device\r\n   * @param opts \r\n   */\r\n  constructor(device:BluetoothDevice, opts:Options = {}) {\r\n    super(device, opts);\r\n    this.evalTimeoutMs = opts.evalTimeoutMs ?? 5*1000;\r\n  }\r\n\r\n  /**\r\n   * Writes a script to Espruino.\r\n   * \r\n   * It will first send a CTRL+C to cancel any previous input, `reset()` to clear the board,\r\n   * and then the provided `code` followed by a new line.\r\n   * @param code Code to send. A new line is added automatically.\r\n   * \r\n   * ```js\r\n   * // Eg from https://www.espruino.com/Web+Bluetooth\r\n   * writeScript(`\r\n   * setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\r\n   * NRF.on('disconnect',()=>reset());\r\n   * `);\r\n   * ```\r\n   */\r\n  async writeScript(code:string) {\r\n    this.write(`\\x03\\x10reset();\\n`);\r\n    this.write(`\\x10${code}\\n`);\r\n  }\r\n\r\n  /**\r\n   * Sends some code to be executed on the Espruino. The result\r\n   * is packaged into JSON and sent back to your code. An exception is\r\n   * thrown if code can't be executed for some reason.\r\n   * \r\n   * ```js\r\n   * const sum = await e.eval(`2+2`);\r\n   * ```\r\n   * \r\n   * It will wait for a period of time for a well-formed response from the\r\n   * Espruino. This might not happen if there is a connection problem\r\n   * or a syntax error in the code being evaled. In cases like the latter,\r\n   * it will take up to `timeoutMs` (default 5 seconds) before we give up\r\n   * waiting for a correct response and throw an error.\r\n   * \r\n   * Tweaking of the timeout may be required if `eval()` is giving up too quickly\r\n   * or too slowly. A default timeout can be given when creating the class.\r\n   * \r\n   * Options:\r\n   *  timeoutMs: Timeout for execution. 5 seconds by default\r\n   *  assumeExclusive If true, eval assumes all replies from controller are in response to eval. True by default\r\n   * @param code Code to run on the Espruino.\r\n   * @param opts Options\r\n   */\r\n  async eval(code:string, opts:EvalOpts = {}):Promise<string> {\r\n    const timeoutMs = opts.timeoutMs ?? this.evalTimeoutMs;\r\n    const assumeExclusive = opts.assumeExclusive ?? true;\r\n\r\n    if (typeof code !== `string`) throw new Error(`code parameter should be a string`);\r\n      \r\n    return new Promise((resolve, reject) => {\r\n      // Generate a random id so reply can be matched up with this request\r\n      const id = randomString(5);\r\n\r\n      const onData = (d:BleDevice.DataEvent) => {\r\n        try {\r\n          // Parse reply, expecting JSON.\r\n          const dd = JSON.parse(d.data);\r\n\r\n          // Check for reply field, and that it matches\r\n          if (`reply` in dd) {\r\n            if (dd.reply === id) {\r\n              done(); // Stop waiting for result\r\n              if (`result` in dd) {\r\n                resolve(dd.result);\r\n              }\r\n            } else {\r\n              this.warn(`Expected reply ${id}, got ${dd.reply}`);\r\n            }\r\n          }\r\n        } catch (ex:unknown) {\r\n          // If there was a syntax error, response won't be JSON\r\n          if (assumeExclusive) {\r\n            // Fail with unexpected reply as the message\r\n            done(d.data);\r\n          } else {\r\n            // Unexpected reply, but we cannot be sure if it's in response to eval or\r\n            // some other code running on board. So just warn and eventually timeout\r\n            this.warn(ex);\r\n          }\r\n        }\r\n      };\r\n\r\n      const onStateChange = (e:StateChangeEvent) => {\r\n        if (e.newState !== `connected`) done(`State changed to '${e.newState}', aborting`);\r\n      };\r\n\r\n      this.addEventListener(`data`, onData);\r\n      this.addEventListener(`change`, onStateChange);\r\n\r\n      // Init waitFor\r\n      const done = waitFor(timeoutMs, (reason:string) => {\r\n        reject(reason);\r\n      }, () => {\r\n        // If we got a response or there was a timeout, remove event listeners\r\n        this.removeEventListener(`data`, onData);\r\n        this.removeEventListener(`change`, onStateChange);\r\n      });\r\n\r\n      this.write(`\\x10Bluetooth.println(JSON.stringify({reply:\"${id}\", result:JSON.stringify(${code})}))\\n`);\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @inheritdoc EspruinoDevice\r\n * @returns Returns a connected instance, or throws exception if user cancelled or could not connect.\r\n */\r\nexport const puck = async (opts:{readonly name?:string, readonly debug?:boolean} = {}) => {\r\n  const name = opts.name ?? `Puck`;\r\n  const debug = opts.debug ?? false;\r\n\r\n  const device = await navigator.bluetooth.requestDevice({\r\n    filters: [\r\n      {namePrefix: `Puck.js`},\r\n      // {namePrefix: 'Pixl.js'},\r\n      // {namePrefix: 'MDBT42Q'},\r\n      // {namePrefix: 'RuuviTag'},\r\n      // {namePrefix: 'iTracker'},\r\n      // {namePrefix: 'Thingy'},\r\n      // {namePrefix: 'Espruino'},\r\n      {services: [NordicDefaults.service]}\r\n    ], optionalServices: [NordicDefaults.service]\r\n  });\r\n  const d = new EspruinoDevice(device, {name, debug});\r\n  await d.connect();\r\n  return d;\r\n};\r\n\r\n/**\r\n * @inheritdoc EspruinoDevice\r\n * @returns Returns a connected instance, or throws exception if user cancelled or could not connect.\r\n */\r\nexport const connect = async () => {\r\n  const device = await navigator.bluetooth.requestDevice({\r\n    filters: [\r\n      {namePrefix: `Puck.js`},\r\n      {namePrefix: `Pixl.js`},\r\n      {namePrefix: `MDBT42Q`},\r\n      {namePrefix: `RuuviTag`},\r\n      {namePrefix: `iTracker`},\r\n      {namePrefix: `Thingy`},\r\n      {namePrefix: `Espruino`},\r\n      {services: [NordicDefaults.service]}\r\n    ], optionalServices: [NordicDefaults.service]\r\n  });\r\n  const d = new EspruinoDevice(device, {name:`Espruino`});\r\n  await d.connect();\r\n  return d;\r\n};","import * as Rects from '../geometry/Rect.js';\r\n\r\n/**\r\n * Print available media devices to console\r\n * @param filterKind Defaults `videoinput`\r\n */\r\nexport const dumpDevices = async (filterKind = `videoinput`) => {\r\n  const devices = await navigator.mediaDevices.enumerateDevices();\r\n\r\n  devices.forEach(d => {\r\n    if (d.kind !== filterKind) return;\r\n    console.log(d.label);\r\n    console.log(` Kind: ${d.kind}`);\r\n    console.log(` Device id: ${d.deviceId}`);\r\n  });\r\n};\r\n\r\nexport type Constraints = {\r\n  readonly facingMode?: `user`|`environment`,\r\n  readonly max?:Rects.Rect,\r\n  readonly min?:Rects.Rect\r\n}\r\n\r\n//eslint-disable-next-line functional/no-mixed-type\r\nexport type StartResult = {\r\n  readonly dispose:() => void;\r\n  readonly videoEl:HTMLVideoElement;\r\n}\r\n/**\r\n * Attempts to start a video-only stream from a camera into a hidden\r\n * VIDEO element for frame capture. The VIDEO element is created automatically.\r\n * \r\n * \r\n * ```\r\n * import { frames } from 'visual.js';\r\n * try \r\n *  const { videoEl, dispose } = await start();\r\n *  for await (const frame of frames(videoEl)) {\r\n *   // Do something with pixels...\r\n *  }\r\n * } catch (ex) {\r\n *  console.error(`Video could not be started`);\r\n * }\r\n * ```\r\n * \r\n * Be sure to call the dispose() function to stop the video stream and remove the created VIDEO element.\r\n * \r\n * @param constraints \r\n * @returns Returns {videoEl,dispose}, where videoEl is the created VIDEO element, and dispose is a function for removing the element and stopping the video.\r\n */\r\nexport const start = async (constraints:Constraints = {}): Promise<StartResult|undefined> => {\r\n  const videoEl = document.createElement(`VIDEO`) as HTMLVideoElement;\r\n  //eslint-disable-next-line functional/immutable-data\r\n  videoEl.style.display = `none`;\r\n  document.body.appendChild(videoEl);\r\n  \r\n  //eslint-disable-next-line functional/no-let\r\n  let stopVideo = () => { /* no-op */ };\r\n\r\n  const dispose = () => {\r\n    try {\r\n      // Stop source\r\n      stopVideo();\r\n    } catch {\r\n      /* no-op */\r\n    }\r\n\r\n    // Remove the element we created\r\n    videoEl.remove();\r\n  };\r\n\r\n  try {\r\n    // Attempt to start video\r\n    const r = await startWithVideoEl(videoEl, constraints);\r\n    stopVideo = r.dispose;\r\n  } catch (err) {\r\n    // If it didn't work, delete the created element \r\n    console.error(err);\r\n    dispose();\r\n    return;\r\n  }\r\n\r\n  return  {videoEl, dispose};\r\n};\r\n\r\n/**\r\n * Attempts to start a video-only stream from a camera into the designated VIDEO element.\r\n * @param videoEl \r\n * @param constraints \r\n * @returns Result contains videoEl and dispose function\r\n */\r\nconst startWithVideoEl = async (videoEl:HTMLVideoElement, constraints:Constraints = {}):Promise<StartResult> => {\r\n  if (videoEl === undefined) throw new Error(`videoEl undefined`);\r\n  if (videoEl === null) throw new Error(`videoEl null`);\r\n\r\n  const facingMode = constraints.facingMode ?? `user`;\r\n  const maxRes = constraints.max;\r\n  const minRes = constraints.min;\r\n\r\n  // Setup constraints\r\n  const c = {\r\n    audio: false,\r\n    video: {\r\n      facingMode,\r\n      width: {},\r\n      height: {}\r\n    }\r\n  };\r\n\r\n  if (maxRes) {\r\n    //eslint-disable-next-line functional/immutable-data\r\n    c.video.width = {\r\n      max: maxRes.width\r\n    };\r\n    //eslint-disable-next-line functional/immutable-data\r\n    c.video.height = {\r\n      max: maxRes.height\r\n    };\r\n  }\r\n  if (minRes) {\r\n    //eslint-disable-next-line functional/immutable-data\r\n    c.video.width = {\r\n      min: minRes.width\r\n    };\r\n    //eslint-disable-next-line functional/immutable-data\r\n    c.video.height = {\r\n      min: minRes.height\r\n    };\r\n  }\r\n\r\n  // Clean-up function\r\n  const dispose = () => {\r\n    console.log(`Camera:dispose`);\r\n    videoEl.pause();\r\n    const t = stream.getTracks();\r\n    t.forEach(track => track.stop());\r\n  };\r\n\r\n  // Request stream\r\n  const stream = await navigator.mediaDevices.getUserMedia(c);\r\n\r\n  // Assign to VIDEO element\r\n  //eslint-disable-next-line functional/immutable-data\r\n  videoEl.srcObject = stream;\r\n\r\n  const ret = {videoEl, dispose};\r\n  const p = new Promise<StartResult>((resolve, reject) => {\r\n    videoEl.addEventListener(`loadedmetadata`,  () => {\r\n      videoEl.play().then(() => {\r\n        resolve(ret);\r\n      }).catch((ex) => {\r\n        reject(ex);\r\n      });\r\n    });\r\n  });\r\n  return p;\r\n};","import {JsonDevice, Opts as JsonDeviceOpts} from \"./JsonDevice.js\";\r\n\r\nexport type Opts = JsonDeviceOpts & {\r\n  readonly filters?:ReadonlyArray<SerialPortFilter>\r\n  readonly baudRate?:number;\r\n}\r\n\r\nexport class Device extends JsonDevice {\r\n  port:SerialPort|undefined;\r\n  tx:WritableStreamDefaultWriter<string>|undefined;\r\n\r\n  baudRate:number;\r\n\r\n  constructor(private config:Opts = {}) {\r\n    super(config);\r\n    this.baudRate = config.baudRate ?? 9600;\r\n    if (config.name === undefined) super.name = `Serial.Device`;\r\n\r\n    // New line character\r\n    this.rxBuffer.separator = `\\r\\n`;\r\n  }\r\n\r\n  /**\r\n   * Writes text collected in buffer\r\n   * @param txt \r\n   */\r\n  protected async writeInternal(txt: string) {\r\n    if (this.tx === undefined) throw new Error(`tx not ready`);\r\n    try {\r\n      this.tx.write(txt);\r\n    } catch (ex:unknown) {\r\n      this.warn(ex);\r\n    }\r\n  }\r\n\r\n  onClosed(): void {\r\n    try {\r\n      this.port?.close();\r\n    } catch (ex) {\r\n      this.warn(ex);\r\n    }\r\n    this.states.state = `closed`; \r\n  }\r\n\r\n  onPreConnect(): Promise<void> {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  async onConnectAttempt(): Promise<void> {\r\n    //eslint-disable-next-line functional/no-let\r\n    let reqOpts:SerialPortRequestOptions = { };\r\n    const openOpts:SerialOptions = {\r\n      baudRate: this.baudRate\r\n    };\r\n\r\n    if (this.config.filters) reqOpts = { filters: [...this.config.filters] };\r\n    this.port = await navigator.serial.requestPort(reqOpts);\r\n\r\n    this.port.addEventListener(`disconnect`, _ => {\r\n      this.close();\r\n    });\r\n\r\n    await this.port.open(openOpts);\r\n\r\n    const txW = this.port.writable;\r\n    const txText = new TextEncoderStream();\r\n    if (txW !== null) {\r\n      txText.readable.pipeTo(txW);\r\n      this.tx = txText.writable.getWriter();\r\n    }\r\n\r\n    const rxR = this.port.readable;\r\n    const rxText = new TextDecoderStream();\r\n    if (rxR !== null) {\r\n      rxR.pipeTo(rxText.writable);\r\n      rxText.readable.pipeTo(this.rxBuffer.writable());\r\n    }\r\n  }\r\n}\r\n","import {SimpleEventEmitter} from \"../Events.js\";\r\nimport {StateChangeEvent, StateMachine} from \"../flow/StateMachine\";\r\nimport {indexOfCharCode, omitChars} from \"../Text\";\r\nimport {Codec} from \"./Codec\";\r\nimport {StringReceiveBuffer} from \"./StringReceiveBuffer\";\r\nimport {StringWriteBuffer} from \"./StringWriteBuffer\";\r\nimport {retry} from \"../flow/Timer.js\";\r\n\r\nexport type Opts = {\r\n  readonly chunkSize?: number\r\n  readonly name?: string\r\n  readonly connectAttempts?: number\r\n  readonly debug?: boolean\r\n}\r\n\r\nexport type DataEvent = {\r\n  readonly data: string\r\n}\r\n\r\ntype Events = {\r\n  readonly data: DataEvent\r\n  readonly change: StateChangeEvent\r\n};\r\n\r\nexport abstract class JsonDevice extends SimpleEventEmitter<Events> {\r\n  states: StateMachine;\r\n  codec: Codec;\r\n\r\n  verboseLogging = false;\r\n  name:string;\r\n  connectAttempts:number;\r\n  chunkSize:number;\r\n\r\n  rxBuffer: StringReceiveBuffer;\r\n  txBuffer: StringWriteBuffer;\r\n\r\n  constructor(config: Opts = {}) {\r\n    super();\r\n\r\n    // Init\r\n    this.verboseLogging = config.debug ?? false;\r\n    this.chunkSize = config.chunkSize ?? 1024;\r\n    this.connectAttempts = config.connectAttempts ?? 3;\r\n    this.name = config.name ?? `JsonDevice`;\r\n\r\n    // Transmit buffer\r\n    this.txBuffer = new StringWriteBuffer(async data => {\r\n      // When we have data to actually write to device\r\n      await this.writeInternal(data);\r\n    }, config.chunkSize);\r\n\r\n    // Receive buffer\r\n    this.rxBuffer = new StringReceiveBuffer(line => {\r\n      this.fireEvent(`data`, {data: line});\r\n    });\r\n\r\n    this.codec = new Codec();\r\n    this.states = new StateMachine(`ready`, {\r\n      ready: `connecting`,\r\n      connecting: [`connected`, `closed`],\r\n      connected: [`closed`],\r\n      closed: `connecting`\r\n    });\r\n\r\n    this.states.addEventListener(`change`, evt => {\r\n      this.fireEvent(`change`, evt);\r\n      this.verbose(`${evt.priorState} -> ${evt.newState}`);\r\n      if (evt.priorState === `connected`) {\r\n        // Clear out buffers\r\n        this.rxBuffer.clear();\r\n        this.txBuffer.clear();\r\n      }\r\n    });\r\n  }\r\n\r\n  get isConnected(): boolean {\r\n    return this.states.state === `connected`;\r\n  }\r\n\r\n  get isClosed(): boolean {\r\n    return this.states.state === `closed`;\r\n  }\r\n\r\n  write(txt: string) {\r\n    if (this.states.state !== `connected`) throw new Error(`Cannot write while state is ${this.states.state}`);\r\n    this.txBuffer.add(txt);\r\n  }\r\n\r\n  /**\r\n   * Writes text to output device\r\n   * @param txt \r\n   */\r\n  protected abstract writeInternal(txt: string):void;\r\n\r\n  close() {\r\n    if (this.states.state !== `connected`) return;\r\n    \r\n    this.onClosed();\r\n  }\r\n\r\n  /**\r\n   * Must change state\r\n   */\r\n  abstract onClosed():void;\r\n\r\n  abstract onPreConnect():Promise<void>;\r\n\r\n  async connect() {\r\n    const attempts = this.connectAttempts;\r\n\r\n    this.states.state = `connecting`;\r\n    this.verbose(`connect`);\r\n    await this.onPreConnect();\r\n    \r\n    await retry(async () => {\r\n      await this.onConnectAttempt();   \r\n      this.states.state = `connected`;\r\n    }, attempts, 200);\r\n  }\r\n\r\n  /**\r\n   * Should throw if did not succeed.\r\n   */\r\n  abstract onConnectAttempt():Promise<void>;\r\n\r\n  private onRx(evt: Event) {\r\n    //const rx = this.rx;\r\n    //if (rx === undefined) return;\r\n\r\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const view = (evt.target as any).value as DataView;\r\n    if (view === undefined) return;\r\n\r\n    //eslint-disable-next-line functional/no-let\r\n    let str = this.codec.fromBuffer(view.buffer);\r\n\r\n    // Check for flow control chars\r\n    const plzStop = indexOfCharCode(str, 19);\r\n    const plzStart = indexOfCharCode(str, 17);\r\n\r\n    // Remove if found\r\n    if (plzStart && plzStop < plzStart) {\r\n      this.verbose(`Tx plz start`);\r\n      str = omitChars(str, plzStart, 1);\r\n      this.txBuffer.paused = false;\r\n    }\r\n    if (plzStop && plzStop > plzStart) {\r\n      this.verbose(`Tx plz stop`);\r\n      str = omitChars(str, plzStop, 1);\r\n      this.txBuffer.paused = true;\r\n    }\r\n\r\n    this.rxBuffer.add(str);\r\n  }\r\n\r\n  protected verbose(m: string) {\r\n    if (this.verboseLogging) console.info(`${this.name} `, m);\r\n  }\r\n\r\n  protected log(m: string) {\r\n    console.log(`${this.name} `, m);\r\n  }\r\n\r\n  protected warn(m: unknown) {\r\n    console.warn(`${this.name} `, m);\r\n  }\r\n}\r\n\r\n"],"mappings":"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","names":[]}