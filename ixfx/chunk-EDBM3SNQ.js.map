{"version":3,"sources":["../src/io/index.ts","../src/io/NordicBleDevice.ts","../src/io/Codec.ts","../src/io/StringReceiveBuffer.ts","../src/io/StringWriteBuffer.ts","../src/io/BleDevice.ts","../src/io/AudioAnalyser.ts","../src/io/AudioVisualiser.ts","../src/temporal/NumberTracker.ts","../src/io/Espruino.ts","../src/io/EspruinoBleDevice.ts","../src/io/Serial.ts","../src/io/JsonDevice.ts","../src/io/EspruinoSerialDevice.ts","../src/io/Camera.ts"],"sourcesContent":["/**\r\n * Generic support for Bluetooth LE devices\r\n */\r\nexport * as Bluetooth from './NordicBleDevice.js';\r\n\r\nexport * as AudioAnalysers from '../io/AudioAnalyser.js';\r\nexport * as AudioVisualisers from '../io/AudioVisualiser.js';\r\n\r\n/**\r\n * Espruino-based devices connected via Bluetooth LE\r\n * \r\n * Overview:\r\n * * {@link puck}: Connect ./EspruinoBleDevice.js\r\n * * {@link connect}: Connect to a generic Espruino\r\n */\r\nexport * as Espruino from './Espruino.js';\r\n\r\nexport * as Camera from './Camera.js';\r\n\r\n/**\r\n * Microcontrollers such as Arduinos connected via USB serial\r\n * \r\n * Overview\r\n * * {@link Serial.Device}\r\n * \r\n */\r\nexport * as Serial from './Serial.js';","import {BleDevice} from \"./BleDevice.js\";\r\n\r\nexport const defaultOpts = {\r\n  chunkSize: 20,\r\n  service: `6e400001-b5a3-f393-e0a9-e50e24dcca9e`,\r\n  txGattCharacteristic: `6e400002-b5a3-f393-e0a9-e50e24dcca9e`,\r\n  rxGattCharacteristic: `6e400003-b5a3-f393-e0a9-e50e24dcca9e`,\r\n  name: `NordicDevice`,\r\n  connectAttempts: 5,\r\n  debug: false\r\n};\r\n\r\ntype Opts = {\r\n  readonly chunkSize?:number\r\n  readonly name?:string\r\n  readonly connectAttempts?:number\r\n  readonly debug?:boolean\r\n}\r\n\r\nexport class NordicBleDevice extends BleDevice  {\r\n  constructor(device: BluetoothDevice, opts:Opts = {}) {\r\n    super(device, {...defaultOpts, ...opts});\r\n  }\r\n}\r\n\r\n","\r\n/**\r\n * Handles utf-8 text encoding/decoding\r\n */\r\nexport class Codec {\r\n  enc = new TextEncoder();\r\n  dec = new TextDecoder(`utf-8`);\r\n\r\n  /**\r\n   * Convert string to Uint8Array buffer\r\n   * @param str \r\n   * @returns \r\n   */\r\n  toBuffer(str: string) {\r\n    return this.enc.encode(str);\r\n  }\r\n\r\n  /**\r\n   * Returns a string from a provided buffer\r\n   * @param buffer \r\n   * @returns \r\n   */\r\n  fromBuffer(buffer: ArrayBuffer) {\r\n    return this.dec.decode(buffer);\r\n  }\r\n}","\r\nexport class StringReceiveBuffer {\r\n  buffer: string = ``;\r\n  stream:WritableStream<string>|undefined;\r\n\r\n  constructor(private onData: (data: string) => void, public separator = `\\n`) {\r\n\r\n  }\r\n\r\n  clear() {\r\n    this.buffer = ``;\r\n  }\r\n\r\n  writable() {\r\n    if (this.stream === undefined) this.stream = this.createWritable();\r\n    return this.stream;\r\n  }\r\n\r\n  private createWritable() {\r\n    //eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    const b = this;\r\n    return new WritableStream<string>({\r\n      write(chunk) {\r\n        b.add(chunk);\r\n      },\r\n      close() {\r\n        b.clear();\r\n      }\r\n    });\r\n  }\r\n\r\n  addImpl(str: string):string {\r\n    // Look for separator in new string\r\n    const pos = str.indexOf(this.separator);\r\n    if (pos < 0) {\r\n      // Not found, just add to buffer and return\r\n      this.buffer += str;\r\n      return ``;\r\n    }\r\n\r\n    // Found! Trigger callback for existing buffer and part of new string\r\n    const part = str.substring(0, pos);\r\n    try {\r\n      this.onData(this.buffer + part);\r\n      str = str.substring(part.length+this.separator.length);\r\n    } catch (ex) {\r\n      console.warn(ex);\r\n    }\r\n    \r\n    this.buffer = ``;\r\n\r\n    return str;\r\n  }\r\n\r\n  add(str:string) {\r\n    //eslint-disable-next-line functional/no-loop-statement\r\n    while (str.length > 0) {\r\n      str = this.addImpl(str);\r\n    }\r\n  }\r\n}","import {QueueMutable, queueMutable} from \"../collections\";\r\nimport {Continuously, continuously} from \"../flow\";\r\nimport {splitByLength} from \"../Text\";\r\n\r\nexport class StringWriteBuffer {\r\n  paused = false;\r\n  queue: QueueMutable<string>;\r\n  writer: Continuously;\r\n  intervalMs: number;\r\n  stream:WritableStream<string>|undefined;\r\n\r\n  constructor(private onData: (data: string) => Promise<void>, private chunkSize = -1) {\r\n    this.intervalMs = 10;\r\n    this.queue = queueMutable<string>();\r\n    this.writer = continuously(() => this.onWrite(), this.intervalMs);\r\n  }\r\n\r\n  clear() {\r\n    this.queue = queueMutable<string>();\r\n  }\r\n\r\n  writable() {\r\n    if (this.stream === undefined) this.stream = this.createWritable();\r\n    return this.stream;\r\n  }\r\n\r\n  private createWritable() {\r\n    //eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    const b = this;\r\n    return new WritableStream<string>({\r\n      write(chunk) {\r\n        b.add(chunk);\r\n      },\r\n      close() {\r\n        b.clear();\r\n      }\r\n    });\r\n  }\r\n\r\n  async onWrite(): Promise<boolean> {\r\n    if (this.queue.isEmpty) {\r\n      //console.warn(`WriteBuffer.onWrite: queue empty`);\r\n      return false; // Stop continuously\r\n    }\r\n\r\n    if (this.paused) {\r\n      console.warn(`WriteBuffer.onWrite: paused...`);\r\n      return true; // Keep going tho\r\n    }\r\n\r\n    // Dequeue and send\r\n    const s = this.queue.dequeue();\r\n    if (s === undefined) return false;\r\n    await this.onData(s);\r\n\r\n    return true;\r\n  }\r\n\r\n  add(str: string) {\r\n    // Add whole string or chunked string\r\n    if (this.chunkSize > 0) {\r\n      this.queue.enqueue(...splitByLength(str, this.chunkSize));\r\n    } else {\r\n      this.queue.enqueue(str);\r\n    }\r\n\r\n    // Run continuously loop if it's not already running\r\n    this.writer.start();\r\n  }\r\n}","import {SimpleEventEmitter} from \"../Events.js\";\r\nimport { StateMachine} from \"../flow/StateMachine.js\";\r\nimport {indexOfCharCode, omitChars} from \"../Text\";\r\nimport {Codec} from \"./Codec\";\r\nimport {StringReceiveBuffer} from \"./StringReceiveBuffer\";\r\nimport {StringWriteBuffer} from \"./StringWriteBuffer\";\r\nimport {retry} from \"../flow/Timer.js\";\r\nimport {Events} from \"./Espruino.js\";\r\n\r\nexport type Opts = {\r\n  readonly service:string\r\n  readonly rxGattCharacteristic:string\r\n  readonly txGattCharacteristic:string\r\n  readonly chunkSize:number\r\n  readonly name:string\r\n  readonly connectAttempts:number\r\n  readonly debug:boolean\r\n}\r\n\r\nexport class BleDevice extends SimpleEventEmitter<Events> {\r\n  states: StateMachine;\r\n  codec: Codec;\r\n  rx: BluetoothRemoteGATTCharacteristic | undefined;\r\n  tx: BluetoothRemoteGATTCharacteristic | undefined;\r\n  gatt: BluetoothRemoteGATTServer | undefined;\r\n  verboseLogging = false;\r\n\r\n  rxBuffer: StringReceiveBuffer;\r\n  txBuffer: StringWriteBuffer;\r\n\r\n  constructor(private device: BluetoothDevice, private config:Opts) {\r\n    super();\r\n    this.verboseLogging = config.debug;\r\n    this.txBuffer = new StringWriteBuffer(async data => {\r\n      await this.writeInternal(data);\r\n    }, config.chunkSize);\r\n\r\n    this.rxBuffer = new StringReceiveBuffer(line => {\r\n      this.fireEvent(`data`, { data:line });\r\n    });\r\n\r\n    this.codec = new Codec();\r\n    this.states = new StateMachine(`ready`, {\r\n      ready: `connecting`,\r\n      connecting: [`connected`, `closed`],\r\n      connected: [`closed`],\r\n      closed: `connecting`\r\n    });\r\n\r\n    this.states.addEventListener(`change`, evt => {\r\n      this.fireEvent(`change`, evt);\r\n      this.verbose(`${evt.priorState} -> ${evt.newState}`);\r\n      if (evt.priorState === `connected`) {\r\n        // Clear out buffers\r\n        this.rxBuffer.clear();\r\n        this.txBuffer.clear();\r\n      }\r\n    });\r\n\r\n    device.addEventListener(`gattserverdisconnected`, () => {\r\n      if (this.isClosed) return;\r\n      this.verbose(`GATT server disconnected`);\r\n      this.states.state = `closed`;\r\n    });\r\n\r\n    this.verbose(`ctor ${device.name} ${device.id}`);\r\n  }\r\n\r\n  get isConnected():boolean {\r\n    return this.states.state === `connected`;\r\n  }\r\n\r\n  get isClosed():boolean {\r\n    return this.states.state === `closed`;\r\n  }\r\n\r\n  write(txt: string) {\r\n    if (this.states.state !== `connected`) throw new Error(`Cannot write while state is ${this.states.state}`);\r\n    this.txBuffer.add(txt);\r\n  }\r\n\r\n  private async writeInternal(txt: string) {\r\n    this.verbose(`writeInternal ${txt}`);\r\n    const tx = this.tx;\r\n    if (tx === undefined) throw new Error(`Unexpectedly without tx characteristic`);\r\n    try {\r\n      await tx.writeValue(this.codec.toBuffer(txt));\r\n    } catch (ex:unknown) {\r\n      this.warn(ex);\r\n    }\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.states.state !== `connected`) return;\r\n    this.gatt?.disconnect();\r\n  }\r\n\r\n  async connect() {\r\n    const attempts = this.config.connectAttempts ?? 3;\r\n\r\n    this.states.state = `connecting`;\r\n\r\n    this.verbose(`connect`);\r\n    const gatt = this.device.gatt;\r\n    if (gatt === undefined) throw new Error(`Gatt not available on device`);\r\n\r\n    await retry(async () => {\r\n      const server = await gatt.connect();\r\n      this.verbose(`Getting primary service`);\r\n      const service = await server.getPrimaryService(this.config.service);\r\n      this.verbose(`Getting characteristics`);\r\n      const rx = await service.getCharacteristic(this.config.rxGattCharacteristic);\r\n      const tx = await service.getCharacteristic(this.config.txGattCharacteristic);\r\n  \r\n      rx.addEventListener(`characteristicvaluechanged`, (evt) => this.onRx(evt));\r\n      this.rx = rx;\r\n      this.tx = tx;\r\n      this.gatt = gatt;\r\n      this.states.state = `connected`;\r\n  \r\n      await rx.startNotifications();\r\n    }, attempts, 200);\r\n  }\r\n\r\n  private onRx(evt: Event) {\r\n    const rx = this.rx;\r\n    if (rx === undefined) return;\r\n\r\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const view = (evt.target as any).value as DataView;\r\n    if (view === undefined) return;\r\n\r\n    //eslint-disable-next-line functional/no-let\r\n    let str = this.codec.fromBuffer(view.buffer);\r\n\r\n    // Check for flow control chars\r\n    const plzStop = indexOfCharCode(str, 19);\r\n    const plzStart = indexOfCharCode(str, 17);\r\n\r\n    // Remove if found\r\n    if (plzStart && plzStop < plzStart) {\r\n      this.verbose(`Tx plz start`);\r\n      str = omitChars(str, plzStart, 1);\r\n      this.txBuffer.paused = false;\r\n    }\r\n    if (plzStop && plzStop > plzStart) {\r\n      this.verbose(`Tx plz stop`);\r\n      str = omitChars(str, plzStop, 1);\r\n      this.txBuffer.paused = true;\r\n    }\r\n\r\n    this.rxBuffer.add(str);\r\n  }\r\n\r\n  protected verbose(m: string) {\r\n    if (this.verboseLogging) console.info(`${this.config.name} `, m);\r\n  }\r\n\r\n  protected log(m: string) {\r\n    console.log(`${this.config.name} `, m);\r\n  }\r\n\r\n  protected warn(m:unknown) {\r\n    console.warn(`${this.config.name} `, m);\r\n  }\r\n}\r\n\r\n","import {Arrays} from \"../collections/index.js\";\r\nimport AudioVisualiser from \"./AudioVisualiser.js\";\r\nimport {number as guardNumber, integer as guardInteger} from \"../Guards.js\";\r\nimport {isPowerOfTwo} from \"~/Util.js\";\r\n\r\n/**\r\n * Options for audio processing\r\n * \r\n * fftSize: Must be a power of 2, from 32 - 32768. Higher number means\r\n * more precision and higher CPU overhead\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize\r\n * \r\n * smoothingTimeConstant: Range from 0-1, default is 0.8.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant\r\n * \r\n * debug: If true, additonal console logging will happen\r\n */\r\nexport type Opts = Readonly<{\r\n  readonly showVis?:boolean\r\n  /**\r\n   * FFT size. Must be a power of 2, from 32 - 32768. Higher number means\r\n   * more precision and higher CPU overhead\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize\r\n   */\r\n  readonly fftSize?:number\r\n  /**\r\n   * Range from 0-1, default is 0.8\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant\r\n   */\r\n  readonly smoothingTimeConstant?:number\r\n  readonly debug?:boolean\r\n}>;\r\n\r\nexport type DataAnalyser = (node:AnalyserNode, analyser:AudioAnalyser) => void;\r\n\r\n/**\r\n * Basic audio analyser. Returns back waveform and FFT analysis. Use {@link peakLevel} if you want sound level, or {@link freq} if you just want FFT results.\r\n * \r\n * ```js\r\n * const onData = (freq, wave, analyser) => {\r\n *  // Demo: Get FFT results just for 100Hz-1KHz.\r\n *  const freqSlice = analyser.sliceByFrequency(100,1000,freq);\r\n * \r\n *  // Demo: Get FFT value for a particular frequency (1KHz)\r\n *  const amt = freq[analyser.getIndexForFrequency(1000)];\r\n * }\r\n * basic(onData, {fftSize: 512});\r\n * ```\r\n * \r\n * An `Analyser` instance is returned and can be controlled:\r\n * ```js\r\n * const analyser = basic(onData);\r\n * analyser.paused = true;\r\n * ```\r\n * \r\n * Note: Browers won't allow microphone access unless the call has come from a user-interaction, eg pointerup event handler. \r\n * \r\n * @param onData Handler for data\r\n * @param opts Options\r\n * @returns Analyser instance\r\n */\r\nexport const basic = (onData:(freq:Float32Array, wave:Float32Array, analyser:AudioAnalyser) => void, opts:Opts = {}):AudioAnalyser => new AudioAnalyser((node, analyser) => {\r\n  // Get frequency and amplitude data\r\n  const freq = new Float32Array(node.frequencyBinCount);\r\n  const wave = new Float32Array(node.fftSize);\r\n\r\n  // Load arrays with data\r\n  node.getFloatFrequencyData(freq);\r\n  node.getFloatTimeDomainData(wave);\r\n\r\n  // Send back\r\n  onData(freq, wave, analyser);\r\n}, opts);\r\n\r\n/**\r\n * Basic audio analyser. Returns FFT analysis. Use {@link peakLevel} if you want the sound level, or {@link basic} if you also want the waveform.\r\n * \r\n * ```js\r\n * const onData = (freq, analyser) => {\r\n *  // Demo: Print out each sound frequency (Hz) and amount of energy in that band\r\n *  for (let i=0;i<freq.length;i++) {\r\n *    const f = analyser.getFrequencyAtIndex(0);\r\n *    console.log(`${i}. frequency: ${f} amount: ${freq[i]}`);\r\n *  }\r\n * }\r\n * freq(onData, {fftSize:512});\r\n * ```\r\n * \r\n * Note: Browers won't allow microphone access unless the call has come from a user-interaction, eg pointerup event handler. \r\n * \r\n * @param onData \r\n * @param opts \r\n * @returns \r\n */\r\nexport const freq = (onData:(freq:Float32Array, analyser:AudioAnalyser)=>void, opts:Opts={}):AudioAnalyser => new AudioAnalyser((node, analyser) => {\r\n  const freq = new Float32Array(node.frequencyBinCount);\r\n  node.getFloatFrequencyData(freq);\r\n  onData(freq, analyser);\r\n}, opts);\r\n\r\n/**\r\n * Basic audio analyser which reports the peak sound level.\r\n * \r\n * ```js\r\n * peakLevel(level => {\r\n *  console.log(level);\r\n * });\r\n * ```\r\n * \r\n * Note: Browers won't allow microphone access unless the call has come from a user-interaction, eg pointerup event handler. \r\n * @param onData \r\n * @param opts \r\n * @returns \r\n */\r\nexport const peakLevel = (onData:(level:number, analyser:AudioAnalyser)=>void, opts:Opts={}):AudioAnalyser => new AudioAnalyser((node, analyser) => {\r\n  const wave = new Float32Array(node.fftSize);\r\n  node.getFloatTimeDomainData(wave);\r\n  onData(Arrays.maxFast(wave), analyser);\r\n}, opts);\r\n\r\n/**\r\n * Helper for doing audio analysis. It takes case of connecting the audio stream, running in a loop and pause capability.\r\n * \r\n * Provide a function which works with an [AnalyserNode](https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode), and does something with the result.\r\n * ```js\r\n * const myAnalysis = (node, analyser) => {\r\n *  const freq = new Float32Array(node.frequencyBinCount);\r\n *  node.getFloatFrequencyData(freq);\r\n *  // Do something with frequency data...\r\n * }\r\n * const a = new Analyser(myAnalysis);\r\n * ```\r\n * \r\n * Two helper functions provide ready-to-use Analysers:\r\n * * {@link peakLevel} peak decibel reading\r\n * * {@link freq} FFT results\r\n * * {@link basic} FFT results and waveform\r\n * \r\n * Note: Browers won't allow microphone access unless the call has come from a user-interaction, eg pointerup event handler.\r\n *\r\n */\r\nexport class AudioAnalyser {\r\n  showVis:boolean;\r\n  fftSize:number;\r\n  smoothingTimeConstant:number;\r\n  #isPaused = false;\r\n  debug:boolean;\r\n  #initInProgress = false;\r\n\r\n  visualiser:AudioVisualiser|undefined;  \r\n  audioCtx:AudioContext|undefined;\r\n  analyserNode:AnalyserNode|undefined;\r\n\r\n  analyse:DataAnalyser;\r\n\r\n  constructor(analyse:DataAnalyser, opts:Opts = {}) {\r\n    this.showVis = opts.showVis ?? false;\r\n    this.fftSize = opts.fftSize ?? 1024;\r\n    this.debug = opts.debug ?? false;\r\n    this.smoothingTimeConstant = opts.smoothingTimeConstant ?? 0.8;\r\n\r\n    guardInteger(this.fftSize, `positive`, `opts.fftSize`);\r\n    guardNumber(this.smoothingTimeConstant, `percentage`, `opts.smoothingTimeConstant`);\r\n\r\n    if (!isPowerOfTwo(this.fftSize)) throw new Error(`fftSize must be a power of two from 32 to 32768 (${this.fftSize})`);\r\n    if(this.fftSize < 32) throw new Error(`fftSize must be at least 32`);\r\n    if (this.fftSize > 32768) throw new Error(`fftSize must be no greater than 32768`);\r\n\r\n    this.analyse = analyse;\r\n    this.paused = false;\r\n\r\n    this.init();\r\n\r\n    const visualiserEl = document.getElementById(`audio-visualiser`);\r\n    if (visualiserEl) {\r\n      const visualiser = new AudioVisualiser(visualiserEl, this);\r\n      visualiser.setExpanded(this.showVis);\r\n      this.visualiser = visualiser;\r\n    }\r\n  }\r\n\r\n  init() {\r\n    if (this.#initInProgress) {\r\n      if (this.debug) console.debug(`Init already in progress`);\r\n      return;\r\n    }\r\n    this.#initInProgress = true;\r\n\r\n    // Initalise microphone\r\n    navigator.mediaDevices.getUserMedia({audio: true})\r\n      .then(stream => {     \r\n        this.onMicSuccess(stream);\r\n      })\r\n      .catch(err => {\r\n        this.#initInProgress = false;\r\n        console.error(err);\r\n      });\r\n  }\r\n\r\n  get paused():boolean {\r\n    return this.#isPaused;\r\n  }\r\n\r\n  set paused(v:boolean) {\r\n    if (v === this.#isPaused) return;\r\n    this.#isPaused = v;\r\n    if (!v) {\r\n      if (this.debug) console.log(`Unpaused`);\r\n      window.requestAnimationFrame(this.analyseLoop.bind(this));\r\n    } else {\r\n      if (this.debug) console.log(`Paused`);\r\n    }\r\n  }\r\n\r\n  private setup(audioCtx:AudioContext, stream:MediaStream) {\r\n    const analyser = audioCtx.createAnalyser();\r\n\r\n    // fftSize must be a power of 2. Higher values slower, more detailed\r\n    // Range is 32-32768\r\n    analyser.fftSize = this.fftSize;\r\n\r\n    // smoothingTimeConstant ranges from 0.0 to 1.0\r\n    // 0 = no averaging. Fast response, jittery\r\n    // 1 = maximum averaging. Slow response, smooth\r\n    analyser.smoothingTimeConstant = this.smoothingTimeConstant;\r\n\r\n    // Microphone -> analyser\r\n    const micSource = audioCtx.createMediaStreamSource(stream);\r\n    micSource.connect(analyser);\r\n    return analyser;\r\n  }\r\n\r\n  // Microphone successfully initalised, now have access to audio data\r\n  private onMicSuccess(stream:MediaStream) {\r\n    try {\r\n      const audioCtx = new AudioContext();\r\n\r\n      audioCtx.addEventListener(`statechange`, () => {\r\n        if (this.debug) console.log(`Audio context state: ${audioCtx.state}`);\r\n      });\r\n\r\n      this.audioCtx = audioCtx;\r\n      this.analyserNode = this.setup(audioCtx, stream);\r\n\r\n      // Start loop\r\n      window.requestAnimationFrame(this.analyseLoop.bind(this));\r\n    } catch (ex) {\r\n      this.#initInProgress = false;\r\n      console.error(ex);\r\n    }\r\n  }\r\n\r\n  private analyseLoop() {\r\n    if (this.paused) {\r\n      if (this.debug) console.log(`Paused`);\r\n      return;\r\n    }\r\n\r\n    const a = this.analyserNode;\r\n    if (a === undefined) {\r\n      console.warn(`Analyser undefined`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Perform analysis\r\n      this.analyse(a, this);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // Run again\r\n    window.requestAnimationFrame(this.analyseLoop.bind(this));\r\n  }\r\n\r\n  // visualise(wave, freq) {\r\n  //   if (!this.visualiser) return;\r\n  //   this.visualiser.renderWave(wave, true);\r\n  //   this.visualiser.renderFreq(freq);\r\n  // }\r\n\r\n  /**\r\n   * Returns the maximum FFT value within the given frequency range\r\n   */\r\n  getFrequencyRangeMax(lowFreq:number, highFreq:number, freqData:readonly number[]):number {\r\n    const samples = this.sliceByFrequency(lowFreq, highFreq, freqData);\r\n    return Arrays.max(...samples);\r\n  }\r\n\r\n  /**\r\n   * Returns a sub-sampling of frequency analysis data that falls between\r\n   * `lowFreq` and `highFreq`.\r\n   * @param lowFreq Low frequency\r\n   * @param highFreq High frequency\r\n   * @param freqData Full-spectrum frequency data\r\n   * @returns Sub-sampling of analysis\r\n   */\r\n  sliceByFrequency(lowFreq:number, highFreq:number, freqData:readonly number[]) {\r\n    const lowIndex = this.getIndexForFrequency(lowFreq);\r\n    const highIndex = this.getIndexForFrequency(highFreq);\r\n\r\n    // Grab a 'slice' of the array between these indexes\r\n    const samples = freqData.slice(lowIndex, highIndex);\r\n    return samples;\r\n  }\r\n\r\n  /**\r\n   * Returns the starting frequency for a given binned frequency index.\r\n   * @param index Array index\r\n   * @returns Sound frequency\r\n   */\r\n  getFrequencyAtIndex(index:number):number {\r\n    const a = this.analyserNode;\r\n    const ctx = this.audioCtx;\r\n    if (a === undefined) throw new Error(`Analyser not available`);\r\n    if (ctx === undefined) throw new Error(`Audio context not available`);\r\n\r\n    guardInteger(index, `positive`, `index`);\r\n    if (index > a.frequencyBinCount) throw new Error(`Index ${index} exceeds frequency bin count ${a.frequencyBinCount}`);\r\n\r\n    return index * ctx.sampleRate / (a.frequencyBinCount * 2);\r\n  }\r\n\r\n  /**\r\n   * Returns a binned array index for a given frequency\r\n   * @param freq Sound frequency\r\n   * @returns Array index into frequency bins\r\n   */\r\n  getIndexForFrequency(freq:number):number {\r\n    const a = this.analyserNode;\r\n    if (a === undefined) throw new Error(`Analyser not available`);\r\n\r\n    const nyquist = a.context.sampleRate / 2.0;\r\n    const index = Math.round(freq / nyquist * a.frequencyBinCount);\r\n    if (index < 0) return 0;\r\n    if (index >= a.frequencyBinCount) return a.frequencyBinCount - 1;\r\n    return index;\r\n  }\r\n}","/**\r\n * Visualiser component\r\n *\r\n * Usage: import visualiser.js. Instantiate on document load, and pass in the\r\n * parent element into the constructor.\r\n *\r\n * eg: const v = new Visualiser(document.getElementById('renderer'));\r\n *\r\n * Data must be passed to the component via renderFreq or renderWave.\r\n * \r\n * Draws on https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API\r\n */\r\n\r\nimport {Arrays} from '~/collections/index.js';\r\nimport {Points} from '../geometry/index.js';\r\nimport {numberTracker} from '../temporal/NumberTracker.js';\r\nimport {AudioAnalyser} from './AudioAnalyser.js';\r\n\r\n// TODO: This is an adaption of old code. Needs to be smartened up further\r\nexport default class AudioVisualiser {\r\n  freqMaxRange = 200;\r\n  audio:AudioAnalyser;\r\n  parent:HTMLElement;\r\n \r\n  lastPointer:Points.Point = {x:0, y:0};\r\n  pointerDown = false;\r\n  pointerClicking = false;\r\n  pointerClickDelayMs = 100;\r\n  pointerDelaying = false;\r\n\r\n  waveTracker;\r\n  freqTracker;\r\n  el:HTMLElement;\r\n\r\n  constructor(parentElem:HTMLElement, audio:AudioAnalyser) {\r\n    this.audio = audio;\r\n    this.parent = parentElem;\r\n    this.waveTracker = numberTracker();\r\n    this.freqTracker = numberTracker();\r\n   \r\n    // Add HTML\r\n    parentElem.innerHTML = `\r\n    <section>\r\n      <button id=\"rendererComponentToggle\">🔼</button>\r\n      <div>\r\n        <h1>Visualiser</h1>\r\n        <div style=\"display:flex; flex-wrap: wrap\">\r\n          <div class=\"visPanel\">\r\n            <h2>Frequency distribution</h2>\r\n            <br />\r\n            <canvas id=\"rendererComponentFreqData\" height=\"200\" width=\"400\"></canvas>\r\n          </div>\r\n          <div class=\"visPanel\">\r\n            <h2>Waveform</h2>\r\n            <button id=\"rendererComponentWaveReset\">Reset</button>\r\n            <div>\r\n              Press and hold on wave to measure\r\n            </div>\r\n            <br />\r\n            <canvas id=\"rendererComponentWaveData\" height=\"200\" width=\"400\"></canvas>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    `;\r\n    this.el = parentElem.children[0] as HTMLElement;\r\n\r\n    document.getElementById(`rendererComponentToggle`)?.addEventListener(`click`, () => {\r\n      this.setExpanded(!this.isExpanded());\r\n    });\r\n    this.el.addEventListener(`pointermove`, (e) => this.onPointer(e));\r\n    //this.el.addEventListener(`touchbegin`, (e) => this.onPointer(e));\r\n    this.el.addEventListener(`pointerup`, () => { \r\n      this.pointerDelaying = false; \r\n      this.pointerDown = false;\r\n    });\r\n    this.el.addEventListener(`pointerdown`, () => {\r\n      this.pointerDelaying = true;\r\n      setTimeout(() => {\r\n        if (this.pointerDelaying) { this.pointerDelaying = false; this.pointerDown = true; }\r\n      }, this.pointerClickDelayMs);\r\n    });\r\n    this.el.addEventListener(`pointerleave`, () => { \r\n      this.pointerDelaying = false; \r\n      this.pointerDown = false; });\r\n\r\n    document.getElementById(`rendererComponentWaveReset`)?.addEventListener(`click`, () => {\r\n      this.clear();\r\n    });\r\n  }\r\n\r\n  renderFreq(freq:readonly number[]) {\r\n    if (!this.isExpanded()) return; // Don't render if collapsed\r\n    if (!freq) return; // Data is undefined/null\r\n\r\n    const canvas = document.getElementById(`rendererComponentFreqData`) as HTMLCanvasElement;\r\n    if (canvas === null) throw new Error(`Cannot find canvas element`);\r\n    const g = canvas.getContext(`2d`);\r\n    if (g === null) throw new Error(`Cannot create drawing context`);\r\n\r\n    const bins = freq.length;\r\n    const canvasWidth = canvas.clientWidth;\r\n    const canvasHeight = canvas.clientHeight;\r\n    g.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n    const pointer = this.getPointerRelativeTo(canvas);\r\n    const width = (canvasWidth / bins);\r\n    const minMax = Arrays.minMaxAvg(freq);\r\n\r\n    //eslint-disable-next-line functional/no-loop-statement,functional/no-let\r\n    for (let i = 0; i < bins; i++) {\r\n      if (!Number.isFinite(freq[i])) continue;\r\n\r\n      const value = freq[i] - minMax.min;\r\n      const valueRelative = value / this.freqMaxRange;\r\n      const height = Math.abs(canvasHeight * valueRelative);\r\n      const offset = canvasHeight - height;\r\n\r\n      const hue = i / bins * 360;\r\n      const left = i * width;\r\n      g.fillStyle = `hsl(` + hue + `, 100%, 50%)`;\r\n\r\n      // Show info about data under pointer\r\n      if (pointer.y > 0 && pointer.y <= canvasHeight && pointer.x >= left && pointer.x <= left + width) {\r\n        // Keep track of data\r\n        if (this.freqTracker.id !== i.toString()) {\r\n          this.freqTracker = numberTracker(i.toString());\r\n        }\r\n        this.freqTracker.seen(freq[i]);\r\n\r\n        const freqMma = this.freqTracker.getMinMaxAvg();\r\n\r\n        // Display\r\n        g.fillStyle = `black`;\r\n        if (this.audio) { \r\n          g.fillText(`Frequency (${i}) at pointer: ${this.audio.getFrequencyAtIndex(i).toLocaleString(`en`)} - ${this.audio.getFrequencyAtIndex(i + 1).toLocaleString(`en`)}`, 2, 10); \r\n        }\r\n        g.fillText(`Raw value: ${freq[i].toFixed(2)}`, 2, 20);\r\n        g.fillText(`Min: ${freqMma.min.toFixed(2)}`, 2, 40);\r\n        g.fillText(`Max: ${freqMma.max.toFixed(2)}`, 60, 40);\r\n        g.fillText(`Avg: ${freqMma.avg.toFixed(2)}`, 120, 40);\r\n\r\n      }\r\n      g.fillRect(left, offset, width, height);\r\n    }\r\n  }\r\n\r\n  isExpanded() {\r\n    const contentsElem = this.el.querySelector(`div`);\r\n    if (contentsElem === null) throw new Error(`contents div not found`);\r\n    return (contentsElem.style.display === ``);\r\n  }\r\n\r\n  setExpanded(value:boolean) {\r\n    const contentsElem = this.el.querySelector(`div`);\r\n    const button = this.el.querySelector(`button`);\r\n\r\n    if (button === null) throw new Error(`Button element not found`);\r\n    if (contentsElem === null) throw new Error(`Contents element not found`);\r\n    if (value) {\r\n      contentsElem.style.display = ``;\r\n      button.innerText = `🔼`;\r\n    } else {\r\n      contentsElem.style.display = `none`;\r\n      button.innerText = `🔽`;\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    this.clearCanvas(document.getElementById(`rendererComponentFreqData`) as HTMLCanvasElement);\r\n    this.clearCanvas(document.getElementById(`rendererComponentWaveData`) as HTMLCanvasElement);\r\n  }\r\n\r\n  // Clears a canvas to white\r\n  clearCanvas(canvas:HTMLCanvasElement|null) {\r\n    if (canvas === null) throw new Error(`Canvas is null`);\r\n    const g = canvas.getContext(`2d`);\r\n    if (g === null) throw new Error(`Cannot create drawing context`);\r\n    g.fillStyle = `white`;\r\n    g.fillRect(0, 0, canvas.clientWidth, canvas.clientHeight);\r\n  }\r\n\r\n  // Renders waveform data.\r\n  // Adapted from MDN's AnalyserNode.getFloatTimeDomainData() example\r\n  renderWave(wave:readonly number[], bipolar = true) {\r\n    if (!this.isExpanded()) return; // Don't render if collapsed\r\n    if (!wave) return; // Undefined or null data\r\n    const canvas = document.getElementById(`rendererComponentWaveData`) as HTMLCanvasElement;\r\n    if (canvas === null) throw new Error(`Cannot find wave canvas`);\r\n    \r\n    const g = canvas.getContext(`2d`);\r\n    if (g === null) throw new Error(`Cannot create drawing context for wave`);\r\n\r\n    const canvasWidth = canvas.clientWidth;\r\n    const canvasHeight = canvas.clientHeight;\r\n    const pointer = this.getPointerRelativeTo(canvas);\r\n    const infoAreaHeight = 20;\r\n    const infoAreaWidth = 60;\r\n    const bins = wave.length;\r\n    g.fillStyle = `white`;\r\n    g.fillRect(0, 0, infoAreaWidth, infoAreaHeight);\r\n\r\n    const width = canvasWidth / bins;\r\n\r\n    // Clears the screen with very light tint of white\r\n    // to fade out last waveform. Set this higher to remove effect\r\n    g.fillStyle = `rgba(255, 255, 255, 0.03)`;\r\n    g.fillRect(0, 20, canvasWidth, canvasHeight);\r\n\r\n    g.fillStyle = `red`;\r\n    if (bipolar) {\r\n      g.fillRect(0, canvasHeight / 2, canvasWidth, 1);\r\n    } else {\r\n      g.fillRect(0, canvasHeight - 1, canvasWidth, 1);\r\n    }\r\n\r\n    g.lineWidth = 1;\r\n    g.strokeStyle = `black`;\r\n    g.beginPath();\r\n\r\n    //eslint-disable-next-line functional/no-let\r\n    let x = 0;\r\n\r\n    //eslint-disable-next-line functional/no-loop-statement,functional/no-let\r\n    for (let i = 0; i < bins; i++) {\r\n      const height = wave[i] * canvasHeight;\r\n      const y = bipolar ? (canvasHeight / 2) - height : canvasHeight - height;\r\n\r\n      if (i === 0) {\r\n        g.moveTo(x, y);\r\n      } else {\r\n        g.lineTo(x, y);\r\n      }\r\n      x += width;\r\n\r\n      if (this.pointerDown) this.waveTracker.seen(wave[i]);\r\n    }\r\n    g.lineTo(canvasWidth, bipolar ? canvasHeight / 2 : canvasHeight);//canvas.height / 2);\r\n    g.stroke();\r\n\r\n    // Draw\r\n    if (this.pointerDown) {\r\n      const waveMma = this.waveTracker.getMinMaxAvg();\r\n      g.fillStyle = `rgba(255,255,0,1)`;\r\n      g.fillRect(infoAreaWidth, 0, 150, 20);\r\n      g.fillStyle = `black`;\r\n      g.fillText(`Min: ` + waveMma.min.toFixed(2), 60, 10);\r\n      g.fillText(`Max: ` + waveMma.max.toFixed(2), 110, 10);\r\n      g.fillText(`Avg: ` + waveMma.avg.toFixed(2), 160, 10);\r\n    } else {\r\n      this.waveTracker.reset();\r\n    }\r\n\r\n    // Show info about data under pointer\r\n    if (pointer.y > 0 && pointer.y <= canvasHeight && pointer.x >= 0 && pointer.x <= canvasWidth) {\r\n      g.fillStyle = `black`;\r\n      g.fillText(`Level: ` + (1.0 - (pointer.y / canvasHeight)).toFixed(2), 2, 10);\r\n    }\r\n\r\n  }\r\n\r\n  // Yields pointer position relative to given element\r\n  getPointerRelativeTo(elem:HTMLElement) {\r\n    const rect = elem.getBoundingClientRect();\r\n    return {\r\n      x: this.lastPointer.x - rect.left - window.scrollX, //elem.offsetLeft + window.scrollX,\r\n      y: this.lastPointer.y - rect.top - window.scrollY//elem.offsetTop + window.scrollY\r\n    };\r\n  }\r\n\r\n  // Keeps track of last pointer position in page coordinate space\r\n  onPointer(evt:MouseEvent|PointerEvent) {\r\n    this.lastPointer = {\r\n      x: evt.pageX,\r\n      y: evt.pageY\r\n    };\r\n    evt.preventDefault();\r\n  }\r\n\r\n  // getMinMax(data, start = 0, end = data.length) {\r\n  //   if (end > data.length) throw new Error(`end is past size of array`);\r\n  //   if (start < 0) throw new Error(`start should be at least 0`);\r\n  //   if (end <= start) throw new Error(`end should be greater than start`);\r\n\r\n  //   let max = Number.MIN_SAFE_INTEGER;\r\n  //   let min = Number.MAX_SAFE_INTEGER;\r\n  //   for (let i = start; i < end; i++) {\r\n  //     max = Math.max(data[i], max);\r\n  //     min = Math.min(data[i], min);\r\n  //   }\r\n  //   if (!Number.isFinite(max)) max = 0;\r\n  //   if (!Number.isFinite(min)) min = 0;\r\n\r\n  //   return {max: max, min: min};\r\n  // }\r\n}","import { Opts as TrackOpts, Timestamped, TrackedPrimitiveValue} from \"./TrackedValue.js\";\r\n\r\n/**\r\n * Keeps track of the min, max and avg in a stream of values without actually storing them.\r\n * \r\n * Usage:\r\n * \r\n * ```js\r\n *  const t = numberTracker(); \r\n *  t.seen(10);\r\n * \r\n *  t.avg / t.min/ t.max / t.getMinMax()\r\n * ```\r\n * \r\n * Use `reset()` to clear everything, or `resetAvg()` to only reset averaging calculation.\r\n * \r\n * Trackers can automatically reset after a given number of samples\r\n * ```\r\n * // reset after 100 samples\r\n * const t = numberTracker(`something`, 100);\r\n * ```\r\n * @class NumberTracker\r\n */\r\nexport class NumberTracker extends TrackedPrimitiveValue<number> {\r\n  //samples = 0;\r\n  total = 0;\r\n  min = Number.MAX_SAFE_INTEGER;\r\n  max = Number.MIN_SAFE_INTEGER;\r\n\r\n  get avg() { \r\n    return this.total / this.seenCount;\r\n  }\r\n\r\n  // resetAvg(newId: string | null = null) {\r\n  //   if (newId !== null) this.id = newId;\r\n  //   this.total = 0;\r\n  //   this.samples = 0;\r\n  // }\r\n\r\n  relativeDifference():number|undefined {\r\n    if (this.last === undefined) return;\r\n    if (this.initial === undefined) return;\r\n    return this.last / this.initial;\r\n  }\r\n\r\n  onReset() {\r\n    this.min = Number.MAX_SAFE_INTEGER;\r\n    this.max = Number.MIN_SAFE_INTEGER;\r\n    this.total = 0;\r\n  }\r\n\r\n  onSeen(values:Timestamped<number>[]) {\r\n    if (values.some(v => Number.isNaN(v))) throw Error(`Cannot add NaN`);\r\n    this.total = values.reduce((acc, v) => acc+v, this.total);\r\n    this.min = Math.min(...values, this.min);\r\n    this.max = Math.max(...values, this.max);\r\n  }\r\n\r\n  getMinMaxAvg() {\r\n    return {\r\n      min: this.min,\r\n      max: this.max,\r\n      avg: this.avg,\r\n    };\r\n  }\r\n}\r\n\r\nexport const numberTracker = (id?:string, opts?:TrackOpts) => new NumberTracker(id ?? ``, opts ?? {});\r\n\r\n","import {EspruinoBleDevice} from \"./EspruinoBleDevice\";\r\nimport {defaultOpts as NordicDefaults } from \"./NordicBleDevice.js\";\r\nimport {StateChangeEvent} from \"../flow/StateMachine.js\";\r\nimport {ISimpleEventEmitter} from \"../Events.js\";\r\nimport {string as randomString} from \"../Random.js\";\r\nimport {waitFor} from \"../flow/Timer.js\";\r\nimport {EspruinoSerialDevice} from \"./EspruinoSerialDevice\";\r\n\r\nexport type DataEvent = {\r\n  readonly data:string\r\n}\r\n\r\nexport type Events = {\r\n  readonly data: DataEvent\r\n  readonly change: StateChangeEvent\r\n};\r\n\r\n/**\r\n * Options for device\r\n */\r\nexport type Options = {\r\n  /**\r\n   * Default milliseconds to wait before giving up on a well-formed reply. 5 seconds is the default.\r\n   */\r\n  readonly evalTimeoutMs?: number;\r\n  /**\r\n   * Name of device. Only used for printing log mesages to the console\r\n   */\r\n  readonly name?: string;\r\n\r\n  /**\r\n   * If true, additional logging information is printed\r\n   */\r\n  readonly debug?: boolean;\r\n}\r\n\r\n/**\r\n * Options for code evaluation\r\n */\r\nexport type EvalOpts = {\r\n  /**\r\n   * Milliseconds to wait before giving up on well-formed reply. 5 seconds is the default.\r\n   */\r\n  readonly timeoutMs?: number\r\n  /**\r\n   * If true (default), it assumes that anything received from the board\r\n   * is a response to the eval\r\n   */\r\n  readonly assumeExclusive?: boolean\r\n};\r\n\r\n\r\n/**\r\n * @inheritdoc EspruinoBleDevice\r\n * @returns Returns a connected instance, or throws exception if user cancelled or could not connect.\r\n */\r\nexport const puck = async (opts:{readonly name?:string, readonly debug?:boolean} = {}) => {\r\n  const name = opts.name ?? `Puck`;\r\n  const debug = opts.debug ?? false;\r\n\r\n  const device = await navigator.bluetooth.requestDevice({\r\n    filters: [\r\n      {namePrefix: `Puck.js`},\r\n      // {namePrefix: 'Pixl.js'},\r\n      // {namePrefix: 'MDBT42Q'},\r\n      // {namePrefix: 'RuuviTag'},\r\n      // {namePrefix: 'iTracker'},\r\n      // {namePrefix: 'Thingy'},\r\n      // {namePrefix: 'Espruino'},\r\n      {services: [NordicDefaults.service]}\r\n    ], optionalServices: [NordicDefaults.service]\r\n  });\r\n  const d = new EspruinoBleDevice(device, {name, debug});\r\n  await d.connect();\r\n  return d;\r\n};\r\n\r\n/**\r\n * @inheritdoc EspruinoSerialDevice\r\n * @param opts \r\n * @returns Returns a connected instance, or throws exception if user cancelled or could not connect.\r\n */\r\nexport const serial = async (opts:{readonly name?:string, readonly debug?:boolean, readonly evalTimeoutMs?:number} = {}) => {\r\n  const d = new EspruinoSerialDevice(opts);\r\n  await d.connect();\r\n  return d;\r\n};\r\n\r\n\r\n/**\r\n * @inheritdoc EspruinoDevice\r\n * @returns Returns a connected instance, or throws exception if user cancelled or could not connect.\r\n */\r\nexport const connectBle = async () => {\r\n  const device = await navigator.bluetooth.requestDevice({\r\n    filters: [\r\n      {namePrefix: `Puck.js`},\r\n      {namePrefix: `Pixl.js`},\r\n      {namePrefix: `MDBT42Q`},\r\n      {namePrefix: `RuuviTag`},\r\n      {namePrefix: `iTracker`},\r\n      {namePrefix: `Thingy`},\r\n      {namePrefix: `Espruino`},\r\n      {services: [NordicDefaults.service]}\r\n    ], optionalServices: [NordicDefaults.service]\r\n  });\r\n  const d = new EspruinoBleDevice(device, {name:`Espruino`});\r\n  await d.connect();\r\n  return d;\r\n};\r\n\r\nexport interface EspruinoDevice extends ISimpleEventEmitter<Events> {\r\n  write(m:string):void\r\n  get evalTimeoutMs():number\r\n}\r\n\r\nexport const deviceEval = async (code:string, opts:EvalOpts = {}, device:EspruinoDevice, evalReplyPrefix:string, debug:boolean, warn:(m:string) => void):Promise<string> => {\r\n  const timeoutMs = opts.timeoutMs ?? device.evalTimeoutMs;\r\n  const assumeExclusive = opts.assumeExclusive ?? true;\r\n\r\n  if (typeof code !== `string`) throw new Error(`code parameter should be a string`);\r\n    \r\n  return new Promise((resolve, reject) => {\r\n    // Generate a random id so reply can be matched up with this request\r\n    const id = randomString(5);\r\n\r\n    const onData = (d:DataEvent) => {\r\n      try {\r\n        // Parse reply, expecting JSON.\r\n        const dd = JSON.parse(d.data);\r\n\r\n        // Check for reply field, and that it matches\r\n        if (`reply` in dd) {\r\n          if (dd.reply === id) {\r\n            done(); // Stop waiting for result\r\n            if (`result` in dd) {\r\n              resolve(dd.result);\r\n            }\r\n          } else {\r\n            warn(`Expected reply ${id}, got ${dd.reply}`);\r\n          }\r\n        }\r\n      } catch (ex:unknown) {\r\n        // If there was a syntax error, response won't be JSON\r\n        if (assumeExclusive) {\r\n          // Fail with unexpected reply as the message\r\n          done(d.data);\r\n        } else {\r\n          // Unexpected reply, but we cannot be sure if it's in response to eval or\r\n          // some other code running on board. So just warn and eventually timeout\r\n          warn(ex as string);\r\n        }\r\n      }\r\n    };\r\n\r\n    const onStateChange = (e:StateChangeEvent) => {\r\n      if (e.newState !== `connected`) done(`State changed to '${e.newState}', aborting`);\r\n    };\r\n\r\n    device.addEventListener(`data`, onData);\r\n    device.addEventListener(`change`, onStateChange);\r\n\r\n    // Init waitFor\r\n    const done = waitFor(timeoutMs, (reason:string) => {\r\n      reject(reason);\r\n    }, () => {\r\n      // If we got a response or there was a timeout, remove event listeners\r\n      device.removeEventListener(`data`, onData);\r\n      device.removeEventListener(`change`, onStateChange);\r\n    });\r\n\r\n    const src = `\\x10${evalReplyPrefix}(JSON.stringify({reply:\"${id}\", result:JSON.stringify(${code})}))\\n`;\r\n    if (debug) warn(src);\r\n    device.write(src);\r\n  });\r\n};","import {EvalOpts, Options,  deviceEval} from \"./Espruino.js\";\r\nimport {NordicBleDevice} from \"./NordicBleDevice.js\";\r\n\r\n/**\r\n * An Espruino BLE-connection\r\n * \r\n * Use the `puck` function to initialise and connect to a Puck.js.\r\n * It must be called in a UI event handler for browser security reasons.\r\n * \r\n * ```js\r\n * const e = await puck();\r\n * ```\r\n * \r\n * Listen for events:\r\n * ```js\r\n * // Received something\r\n * e.addEventListener(`data`, d => console.log(d.data));\r\n * // Monitor connection state\r\n * e.addEventListener(`change`, c => console.log(`${d.priorState} -> ${d.newState}`));\r\n * ```\r\n * \r\n * Write to the device (note the \\n for a new line at the end of the string). This will\r\n * execute the code on the Espruino.\r\n * \r\n * ```js\r\n * e.write(`digitalPulse(LED1,1,[10,500,10,500,10]);\\n`);\r\n * ```\r\n * \r\n * Run some code and return result:\r\n * ```js\r\n * const result = await e.eval(`2+2\\n`);\r\n * ```\r\n */\r\nexport class EspruinoBleDevice extends NordicBleDevice {\r\n  evalTimeoutMs:number;\r\n  evalReplyBluetooth = true;\r\n\r\n  /**\r\n   * Creates instance. You probably would rather use {@link puck} to create.\r\n   * @param device\r\n   * @param opts \r\n   */\r\n  constructor(device:BluetoothDevice, opts:Options = {}) {\r\n    super(device, opts);\r\n    this.evalTimeoutMs = opts.evalTimeoutMs ?? 5*1000;\r\n  }\r\n\r\n  /**\r\n   * Writes a script to Espruino.\r\n   * \r\n   * It will first send a CTRL+C to cancel any previous input, `reset()` to clear the board,\r\n   * and then the provided `code` followed by a new line.\r\n   * \r\n   * Use {@link eval} instead to execute remote code and get the result back.\r\n   * \r\n   * ```js\r\n   * // Eg from https://www.espruino.com/Web+Bluetooth\r\n   * writeScript(`\r\n   *  setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\r\n   *  NRF.on('disconnect',()=>reset());\r\n   * `);\r\n   * ```\r\n   * \r\n   * @param code Code to send. A new line is added automatically.\r\n   */\r\n  async writeScript(code:string) {\r\n    this.write(`\\x03\\x10reset();\\n`);\r\n    this.write(`\\x10${code}\\n`);\r\n  }\r\n\r\n  /**\r\n   * Sends some code to be executed on the Espruino. The result\r\n   * is packaged into JSON and sent back to your code. An exception is\r\n   * thrown if code can't be executed for some reason.\r\n   * \r\n   * ```js\r\n   * const sum = await e.eval(`2+2`);\r\n   * ```\r\n   * \r\n   * It will wait for a period of time for a well-formed response from the\r\n   * Espruino. This might not happen if there is a connection problem\r\n   * or a syntax error in the code being evaled. In cases like the latter,\r\n   * it will take up to `timeoutMs` (default 5 seconds) before we give up\r\n   * waiting for a correct response and throw an error.\r\n   * \r\n   * Tweaking of the timeout may be required if `eval()` is giving up too quickly\r\n   * or too slowly. A default timeout can be given when creating the class.\r\n   * \r\n   * Options:\r\n   *  timeoutMs: Timeout for execution. 5 seconds by default\r\n   *  assumeExclusive If true, eval assumes all replies from controller are in response to eval. True by default\r\n   * @param code Code to run on the Espruino.\r\n   * @param opts Options\r\n   */\r\n  async eval(code:string, opts:EvalOpts = {}):Promise<string> {\r\n    return deviceEval(code, opts, this, `Bluetooth.println`, false, (msg) => {\r\n      this.warn(msg);\r\n    });\r\n  }\r\n  /*\r\n    const timeoutMs = opts.timeoutMs ?? this.evalTimeoutMs;\r\n    const assumeExclusive = opts.assumeExclusive ?? true;\r\n\r\n    if (typeof code !== `string`) throw new Error(`code parameter should be a string`);\r\n      \r\n    return new Promise((resolve, reject) => {\r\n      // Generate a random id so reply can be matched up with this request\r\n      const id = randomString(5);\r\n\r\n      const onData = (d:DataEvent) => {\r\n        try {\r\n          // Parse reply, expecting JSON.\r\n          const dd = JSON.parse(d.data);\r\n\r\n          // Check for reply field, and that it matches\r\n          if (`reply` in dd) {\r\n            if (dd.reply === id) {\r\n              done(); // Stop waiting for result\r\n              if (`result` in dd) {\r\n                resolve(dd.result);\r\n              }\r\n            } else {\r\n              this.warn(`Expected reply ${id}, got ${dd.reply}`);\r\n            }\r\n          }\r\n        } catch (ex:unknown) {\r\n          // If there was a syntax error, response won't be JSON\r\n          if (assumeExclusive) {\r\n            // Fail with unexpected reply as the message\r\n            done(d.data);\r\n          } else {\r\n            // Unexpected reply, but we cannot be sure if it's in response to eval or\r\n            // some other code running on board. So just warn and eventually timeout\r\n            this.warn(ex);\r\n          }\r\n        }\r\n      };\r\n\r\n      const onStateChange = (e:StateChangeEvent) => {\r\n        if (e.newState !== `connected`) done(`State changed to '${e.newState}', aborting`);\r\n      };\r\n\r\n      this.addEventListener(`data`, onData);\r\n      this.addEventListener(`change`, onStateChange);\r\n\r\n      // Init waitFor\r\n      const done = waitFor(timeoutMs, (reason:string) => {\r\n        reject(reason);\r\n      }, () => {\r\n        // If we got a response or there was a timeout, remove event listeners\r\n        this.removeEventListener(`data`, onData);\r\n        this.removeEventListener(`change`, onStateChange);\r\n      });\r\n\r\n      this.write(`\\x10Bluetooth.println(JSON.stringify({reply:\"${id}\", result:JSON.stringify(${code})}))\\n`);\r\n    });\r\n  */\r\n}\r\n\r\n","import {JsonDevice, Opts as JsonDeviceOpts} from \"./JsonDevice.js\";\r\n\r\nexport type Opts = JsonDeviceOpts & {\r\n  readonly filters?:ReadonlyArray<SerialPortFilter>\r\n  readonly baudRate?:number;\r\n}\r\n\r\n/**\r\n * Serial device. Assumes data is sent with new line characters (\\r\\n) between messages.\r\n * \r\n * ```\r\n * const s = new Device();\r\n * s.addEventListener(`change`, evt => {\r\n *  console.log(`State change ${evt.priorState} -> ${evt.newState}`);\r\n *  if (evt.newState === `connected`) {\r\n *    // Do something when connected...\r\n *  }\r\n * });\r\n * \r\n * // In a UI event handler...\r\n * s.connect();\r\n * ```\r\n * \r\n * Reading incoming data:\r\n * ```\r\n * // Parse incoming data as JSON\r\n * s.addEventListener(`data`, evt => {\r\n *  try {\r\n *    const o = JSON.parse(evt.data);\r\n *    // If we get this far, JSON is legit \r\n *  } catch (ex) {\r\n *  }\r\n * });\r\n * ```\r\n * \r\n * Writing to the microcontroller\r\n * ```\r\n * s.write(JSON.stringify({msg:\"hello\"}));\r\n * ```\r\n */\r\nexport class Device extends JsonDevice {\r\n  port:SerialPort|undefined;\r\n  tx:WritableStreamDefaultWriter<string>|undefined;\r\n\r\n  baudRate:number;\r\n\r\n  constructor(private config:Opts = {}) {\r\n    super(config);\r\n    this.baudRate = config.baudRate ?? 9600;\r\n    if (config.name === undefined) super.name = `Serial.Device`;\r\n\r\n    // Serial.println on microcontroller == \\r\\n\r\n    this.rxBuffer.separator = `\\r\\n`;\r\n  }\r\n\r\n  /**\r\n   * Writes text collected in buffer\r\n   * @param txt \r\n   */\r\n  protected async writeInternal(txt: string) {\r\n    if (this.tx === undefined) throw new Error(`tx not ready`);\r\n    try {\r\n      this.tx.write(txt);\r\n    } catch (ex:unknown) {\r\n      this.warn(ex);\r\n    }\r\n  }\r\n\r\n  onClosed(): void {\r\n    try {\r\n      this.port?.close();\r\n    } catch (ex) {\r\n      this.warn(ex);\r\n    }\r\n    this.states.state = `closed`; \r\n  }\r\n\r\n  onPreConnect(): Promise<void> {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  async onConnectAttempt(): Promise<void> {\r\n    //eslint-disable-next-line functional/no-let\r\n    let reqOpts:SerialPortRequestOptions = { };\r\n    const openOpts:SerialOptions = {\r\n      baudRate: this.baudRate\r\n    };\r\n\r\n    if (this.config.filters) reqOpts = { filters: [...this.config.filters] };\r\n    this.port = await navigator.serial.requestPort(reqOpts);\r\n\r\n    this.port.addEventListener(`disconnect`, _ => {\r\n      this.close();\r\n    });\r\n\r\n    await this.port.open(openOpts);\r\n\r\n    const txW = this.port.writable;\r\n    const txText = new TextEncoderStream();\r\n    if (txW !== null) {\r\n      txText.readable.pipeTo(txW);\r\n      this.tx = txText.writable.getWriter();\r\n    }\r\n\r\n    const rxR = this.port.readable;\r\n    const rxText = new TextDecoderStream();\r\n    if (rxR !== null) {\r\n      rxR.pipeTo(rxText.writable);\r\n      rxText.readable.pipeTo(this.rxBuffer.writable());\r\n    }\r\n  }\r\n}\r\n","import {SimpleEventEmitter} from \"../Events.js\";\r\nimport {StateChangeEvent, StateMachine} from \"../flow/StateMachine\";\r\nimport {indexOfCharCode, omitChars} from \"../Text\";\r\nimport {Codec} from \"./Codec\";\r\nimport {StringReceiveBuffer} from \"./StringReceiveBuffer\";\r\nimport {StringWriteBuffer} from \"./StringWriteBuffer\";\r\nimport {retry} from \"../flow/Timer.js\";\r\n\r\nexport type Opts = {\r\n  readonly chunkSize?: number\r\n  readonly name?: string\r\n  readonly connectAttempts?: number\r\n  readonly debug?: boolean\r\n}\r\n\r\nexport type DataEvent = {\r\n  readonly data: string\r\n}\r\n\r\ntype Events = {\r\n  readonly data: DataEvent\r\n  readonly change: StateChangeEvent\r\n};\r\n\r\nexport abstract class JsonDevice extends SimpleEventEmitter<Events> {\r\n  states: StateMachine;\r\n  codec: Codec;\r\n\r\n  verboseLogging = false;\r\n  name:string;\r\n  connectAttempts:number;\r\n  chunkSize:number;\r\n\r\n  rxBuffer: StringReceiveBuffer;\r\n  txBuffer: StringWriteBuffer;\r\n\r\n  constructor(config: Opts = {}) {\r\n    super();\r\n\r\n    // Init\r\n    this.verboseLogging = config.debug ?? false;\r\n    this.chunkSize = config.chunkSize ?? 1024;\r\n    this.connectAttempts = config.connectAttempts ?? 3;\r\n    this.name = config.name ?? `JsonDevice`;\r\n\r\n    // Transmit buffer\r\n    this.txBuffer = new StringWriteBuffer(async data => {\r\n      // When we have data to actually write to device\r\n      await this.writeInternal(data);\r\n    }, config.chunkSize);\r\n\r\n    // Receive buffer\r\n    this.rxBuffer = new StringReceiveBuffer(line => {\r\n      this.fireEvent(`data`, {data: line});\r\n    });\r\n\r\n    this.codec = new Codec();\r\n    this.states = new StateMachine(`ready`, {\r\n      ready: `connecting`,\r\n      connecting: [`connected`, `closed`],\r\n      connected: [`closed`],\r\n      closed: `connecting`\r\n    });\r\n\r\n    this.states.addEventListener(`change`, evt => {\r\n      this.fireEvent(`change`, evt);\r\n      this.verbose(`${evt.priorState} -> ${evt.newState}`);\r\n      if (evt.priorState === `connected`) {\r\n        // Clear out buffers\r\n        this.rxBuffer.clear();\r\n        this.txBuffer.clear();\r\n      }\r\n    });\r\n  }\r\n\r\n  get isConnected(): boolean {\r\n    return this.states.state === `connected`;\r\n  }\r\n\r\n  get isClosed(): boolean {\r\n    return this.states.state === `closed`;\r\n  }\r\n\r\n  write(txt: string) {\r\n    if (this.states.state !== `connected`) throw new Error(`Cannot write while state is ${this.states.state}`);\r\n    this.txBuffer.add(txt);\r\n  }\r\n\r\n  /**\r\n   * Writes text to output device\r\n   * @param txt \r\n   */\r\n  protected abstract writeInternal(txt: string):void;\r\n\r\n  close() {\r\n    if (this.states.state !== `connected`) return;\r\n    \r\n    this.onClosed();\r\n  }\r\n\r\n  /**\r\n   * Must change state\r\n   */\r\n  abstract onClosed():void;\r\n\r\n  abstract onPreConnect():Promise<void>;\r\n\r\n  async connect() {\r\n    const attempts = this.connectAttempts;\r\n\r\n    this.states.state = `connecting`;\r\n    await this.onPreConnect();\r\n    \r\n    await retry(async () => {\r\n      await this.onConnectAttempt();   \r\n      this.states.state = `connected`;\r\n    }, attempts, 200);\r\n  }\r\n\r\n  /**\r\n   * Should throw if did not succeed.\r\n   */\r\n  protected abstract onConnectAttempt():Promise<void>;\r\n\r\n  private onRx(evt: Event) {\r\n    //const rx = this.rx;\r\n    //if (rx === undefined) return;\r\n\r\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const view = (evt.target as any).value as DataView;\r\n    if (view === undefined) return;\r\n\r\n    //eslint-disable-next-line functional/no-let\r\n    let str = this.codec.fromBuffer(view.buffer);\r\n\r\n    // Check for flow control chars\r\n    const plzStop = indexOfCharCode(str, 19);\r\n    const plzStart = indexOfCharCode(str, 17);\r\n\r\n    // Remove if found\r\n    if (plzStart && plzStop < plzStart) {\r\n      this.verbose(`Tx plz start`);\r\n      str = omitChars(str, plzStart, 1);\r\n      this.txBuffer.paused = false;\r\n    }\r\n    if (plzStop && plzStop > plzStart) {\r\n      this.verbose(`Tx plz stop`);\r\n      str = omitChars(str, plzStop, 1);\r\n      this.txBuffer.paused = true;\r\n    }\r\n\r\n    this.rxBuffer.add(str);\r\n  }\r\n\r\n  protected verbose(m: string) {\r\n    if (this.verboseLogging) console.info(`${this.name} `, m);\r\n  }\r\n\r\n  protected log(m: string) {\r\n    console.log(`${this.name} `, m);\r\n  }\r\n\r\n  protected warn(m: unknown) {\r\n    console.warn(`${this.name} `, m);\r\n  }\r\n}\r\n\r\n","import { deviceEval, EvalOpts} from \"./Espruino.js\";\r\nimport {Device as SerialDevice, Opts as SerialOpts} from \"./Serial.js\";\r\n\r\nexport type Opts = SerialOpts & {\r\n  readonly evalTimeoutMs?:number\r\n};\r\n\r\nexport class EspruinoSerialDevice extends SerialDevice {\r\n  evalTimeoutMs:number;\r\n  evalReplyBluetooth = false;\r\n\r\n  constructor(opts?:Opts) {\r\n    super(opts);\r\n\r\n    if (opts === undefined) opts = {};\r\n    this.evalTimeoutMs = opts.evalTimeoutMs ?? 5*1000;  \r\n  }\r\n\r\n  /**\r\n   * Writes a script to Espruino.\r\n   * \r\n   * It will first send a CTRL+C to cancel any previous input, `reset()` to clear the board,\r\n   * and then the provided `code` followed by a new line.\r\n   * \r\n   * Use {@link eval} instead to execute remote code and get the result back.\r\n   * \r\n   * ```js\r\n   * // Eg from https://www.espruino.com/Web+Bluetooth\r\n   * writeScript(`\r\n   *  setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\r\n   *  NRF.on('disconnect',()=>reset());\r\n   * `);\r\n   * ```\r\n   * \r\n   * @param code Code to send. A new line is added automatically.\r\n   */\r\n  async writeScript(code:string) {\r\n    this.write(`\\x03\\x10reset();\\n`);\r\n    this.write(`\\x10${code}\\n`);\r\n  }\r\n\r\n  /**\r\n   * Sends some code to be executed on the Espruino. The result\r\n   * is packaged into JSON and sent back to your code. An exception is\r\n   * thrown if code can't be executed for some reason.\r\n   * \r\n   * ```js\r\n   * const sum = await e.eval(`2+2`);\r\n   * ```\r\n   * \r\n   * It will wait for a period of time for a well-formed response from the\r\n   * Espruino. This might not happen if there is a connection problem\r\n   * or a syntax error in the code being evaled. In cases like the latter,\r\n   * it will take up to `timeoutMs` (default 5 seconds) before we give up\r\n   * waiting for a correct response and throw an error.\r\n   * \r\n   * Tweaking of the timeout may be required if `eval()` is giving up too quickly\r\n   * or too slowly. A default timeout can be given when creating the class.\r\n   * \r\n   * Options:\r\n   *  timeoutMs: Timeout for execution. 5 seconds by default\r\n   *  assumeExclusive If true, eval assumes all replies from controller are in response to eval. True by default\r\n   * @param code Code to run on the Espruino.\r\n   * @param opts Options\r\n   */\r\n  async eval(code:string, opts:EvalOpts = {}):Promise<string> {\r\n    return deviceEval(code, opts, this, `console.log`, true, (msg) => {\r\n      this.warn(msg);\r\n    });\r\n  }\r\n}","import * as Rects from '../geometry/Rect.js';\r\n\r\n/**\r\n * Print available media devices to console\r\n * @param filterKind Defaults `videoinput`\r\n */\r\nexport const dumpDevices = async (filterKind = `videoinput`) => {\r\n  const devices = await navigator.mediaDevices.enumerateDevices();\r\n\r\n  devices.forEach(d => {\r\n    if (d.kind !== filterKind) return;\r\n    console.log(d.label);\r\n    console.log(` Kind: ${d.kind}`);\r\n    console.log(` Device id: ${d.deviceId}`);\r\n  });\r\n};\r\n\r\nexport type Constraints = {\r\n  readonly facingMode?: `user`|`environment`,\r\n  readonly max?:Rects.Rect,\r\n  readonly min?:Rects.Rect\r\n}\r\n\r\n//eslint-disable-next-line functional/no-mixed-type\r\nexport type StartResult = {\r\n  readonly dispose:() => void;\r\n  readonly videoEl:HTMLVideoElement;\r\n}\r\n/**\r\n * Attempts to start a video-only stream from a camera into a hidden\r\n * VIDEO element for frame capture. The VIDEO element is created automatically.\r\n * \r\n * \r\n * ```\r\n * import { frames } from 'visual.js';\r\n * try \r\n *  const { videoEl, dispose } = await start();\r\n *  for await (const frame of frames(videoEl)) {\r\n *   // Do something with pixels...\r\n *  }\r\n * } catch (ex) {\r\n *  console.error(`Video could not be started`);\r\n * }\r\n * ```\r\n * \r\n * Be sure to call the dispose() function to stop the video stream and remove the created VIDEO element.\r\n * \r\n * @param constraints \r\n * @returns Returns {videoEl,dispose}, where videoEl is the created VIDEO element, and dispose is a function for removing the element and stopping the video.\r\n */\r\nexport const start = async (constraints:Constraints = {}): Promise<StartResult|undefined> => {\r\n  const videoEl = document.createElement(`VIDEO`) as HTMLVideoElement;\r\n  //eslint-disable-next-line functional/immutable-data\r\n  videoEl.style.display = `none`;\r\n  document.body.appendChild(videoEl);\r\n  \r\n  //eslint-disable-next-line functional/no-let\r\n  let stopVideo = () => { /* no-op */ };\r\n\r\n  const dispose = () => {\r\n    try {\r\n      // Stop source\r\n      stopVideo();\r\n    } catch {\r\n      /* no-op */\r\n    }\r\n\r\n    // Remove the element we created\r\n    videoEl.remove();\r\n  };\r\n\r\n  try {\r\n    // Attempt to start video\r\n    const r = await startWithVideoEl(videoEl, constraints);\r\n    stopVideo = r.dispose;\r\n  } catch (err) {\r\n    // If it didn't work, delete the created element \r\n    console.error(err);\r\n    dispose();\r\n    return;\r\n  }\r\n\r\n  return  {videoEl, dispose};\r\n};\r\n\r\n/**\r\n * Attempts to start a video-only stream from a camera into the designated VIDEO element.\r\n * @param videoEl \r\n * @param constraints \r\n * @returns Result contains videoEl and dispose function\r\n */\r\nconst startWithVideoEl = async (videoEl:HTMLVideoElement, constraints:Constraints = {}):Promise<StartResult> => {\r\n  if (videoEl === undefined) throw new Error(`videoEl undefined`);\r\n  if (videoEl === null) throw new Error(`videoEl null`);\r\n\r\n  const facingMode = constraints.facingMode ?? `user`;\r\n  const maxRes = constraints.max;\r\n  const minRes = constraints.min;\r\n\r\n  // Setup constraints\r\n  const c = {\r\n    audio: false,\r\n    video: {\r\n      facingMode,\r\n      width: {},\r\n      height: {}\r\n    }\r\n  };\r\n\r\n  if (maxRes) {\r\n    //eslint-disable-next-line functional/immutable-data\r\n    c.video.width = {\r\n      max: maxRes.width\r\n    };\r\n    //eslint-disable-next-line functional/immutable-data\r\n    c.video.height = {\r\n      max: maxRes.height\r\n    };\r\n  }\r\n  if (minRes) {\r\n    //eslint-disable-next-line functional/immutable-data\r\n    c.video.width = {\r\n      min: minRes.width\r\n    };\r\n    //eslint-disable-next-line functional/immutable-data\r\n    c.video.height = {\r\n      min: minRes.height\r\n    };\r\n  }\r\n\r\n  // Clean-up function\r\n  const dispose = () => {\r\n    console.log(`Camera:dispose`);\r\n    videoEl.pause();\r\n    const t = stream.getTracks();\r\n    t.forEach(track => track.stop());\r\n  };\r\n\r\n  // Request stream\r\n  const stream = await navigator.mediaDevices.getUserMedia(c);\r\n\r\n  // Assign to VIDEO element\r\n  //eslint-disable-next-line functional/immutable-data\r\n  videoEl.srcObject = stream;\r\n\r\n  const ret = {videoEl, dispose};\r\n  const p = new Promise<StartResult>((resolve, reject) => {\r\n    videoEl.addEventListener(`loadedmetadata`,  () => {\r\n      videoEl.play().then(() => {\r\n        resolve(ret);\r\n      }).catch((ex) => {\r\n        reject(ex);\r\n      });\r\n    });\r\n  });\r\n  return p;\r\n};"],"mappings":"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","names":[]}