{"version":3,"sources":["../src/Guards.ts"],"sourcesContent":["export const percent = (t: number, name = `?`): void => {\r\n  if (Number.isNaN(t)) throw new Error(`Parameter '${name}' is NaN`);\r\n  if (t < 0) throw new Error(`Parameter '${name}' must be above or equal to 0`);\r\n  if (t > 1) throw new Error(`Parameter '${name}' must be below or equal to 1`);\r\n};\r\n\r\nexport const notNegative = (t:number, name = `?`):boolean => {\r\n  if (t < 0) throw new Error(`Parameter ${name} must be at least zero`);\r\n  return true;\r\n};\r\n\r\nexport const integer = (t:number, name = `?`, enforcePositive = false) => {\r\n  if (Number.isNaN(t)) throw new Error(`Parameter '${name}' is NaN`);\r\n  if (!Number.isInteger(t)) throw new Error(`Paramter ${name} is not an integer`);\r\n  if (enforcePositive && t < 0) throw new Error(`Parameter '${name}' must be at least zero`);\r\n\r\n}\r\n\r\nexport const isStringArray = (t:any):boolean => {\r\n  if (!Array.isArray(t)) return false;\r\n  for (let i=0;i<t.length;i++) {\r\n    if (typeof t[i] !== `string`) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const array = (t: any, name = `?`): void => {\r\n  if (!Array.isArray(t)) throw new Error(`Parameter '${name}' is expected to be an array'`);\r\n};\r\n\r\nexport const defined = <T>(argument: T | undefined): argument is T => argument !== undefined;\r\n"],"mappings":";AAAO,IAAM,UAAU,CAAC,GAAW,OAAO,QAAc;AACtD,MAAI,OAAO,MAAM;AAAI,UAAM,IAAI,MAAM,cAAc;AACnD,MAAI,IAAI;AAAG,UAAM,IAAI,MAAM,cAAc;AACzC,MAAI,IAAI;AAAG,UAAM,IAAI,MAAM,cAAc;AAAA;AAQpC,IAAM,UAAU,CAAC,GAAU,OAAO,KAAK,kBAAkB,UAAU;AACxE,MAAI,OAAO,MAAM;AAAI,UAAM,IAAI,MAAM,cAAc;AACnD,MAAI,CAAC,OAAO,UAAU;AAAI,UAAM,IAAI,MAAM,YAAY;AACtD,MAAI,mBAAmB,IAAI;AAAG,UAAM,IAAI,MAAM,cAAc;AAAA;AAIvD,IAAM,gBAAgB,CAAC,MAAkB;AAC9C,MAAI,CAAC,MAAM,QAAQ;AAAI,WAAO;AAC9B,WAAS,IAAE,GAAE,IAAE,EAAE,QAAO,KAAK;AAC3B,QAAI,OAAO,EAAE,OAAO;AAAU,aAAO;AAAA;AAEvC,SAAO;AAAA;AAGF,IAAM,QAAQ,CAAC,GAAQ,OAAO,QAAc;AACjD,MAAI,CAAC,MAAM,QAAQ;AAAI,UAAM,IAAI,MAAM,cAAc;AAAA;","names":[]}