{"version":3,"sources":["../src/flow/Sleep.ts","../src/flow/Interval.ts","../src/flow/Delay.ts"],"sourcesContent":["import {integer as guardInteger} from '../Guards.js';\n/**\n * Returns after `timeoutMs`. \n * \n * @example In an async function\n * ```js\n * console.log(`Hello`);\n * await sleep(1000);\n * console.log(`There`); // Prints one second after\n * ```\n * \n * @example As a promise\n * ```js\n * console.log(`Hello`);\n * sleep(1000)\n *  .then(() => console.log(`There`)); // Prints one second after\n * ```\n * \n * If a timeout of 0 is given, `requestAnimationFrame` is used instead of `setTimeout`.\n * \n * {@link delay} and {@link sleep} are similar. `delay()` takes a parameter of what code to execute after the timeout, while `sleep()` just resolves after the timeout.\n * \n * @param timeoutMs\n * @return\n */\nexport const sleep = <V>(timeoutMs: number, value?:V): Promise<V|undefined> => {\n  guardInteger(timeoutMs, `positive`, `timeoutMs`);\n  if (timeoutMs === 0) {\n    return new Promise<V|undefined>(resolve => requestAnimationFrame(_ => {\n      resolve(value);\n    }));\n  } else {\n    return new Promise<V|undefined>(resolve => setTimeout(() => resolve(value), timeoutMs));\n  }\n};","import {sleep} from \"./Sleep.js\";\n\nexport type IntervalAsync<V> = (() => V|Promise<V>) | Generator<V>;\n/**\n * Generates values from `produce` with `intervalMs` time delay. \n * `produce` can be a simple function that returns a value, an async function, or a generator.\n * \n * @example Produce a random number every 500ms:\n * ```\n * const randomGenerator = interval(() => Math.random(), 1000);\n * for await (const r of randomGenerator) {\n *  // Random value every 1 second\n *  // Warning: does not end by itself, a `break` statement is needed\n * }\n * ```\n *\n * @example Return values from a generator every 500ms:\n * ```js\n * // Make a generator that counts to 10\n * const counter = count(10);\n * for await (const v of interval(counter, 1000)) {\n *  // Do something with `v`\n * }\n * ```\n * \n * If you just want to loop at a certain speed, consider using {@link continuously} instead.\n * @template V Returns value of `produce` function\n * @param intervalMs Interval between execution\n * @param produce Function to call\n * @template V Data type\n * @returns\n */\nexport const interval = async function*<V>(produce: IntervalAsync<V>, intervalMs: number) {\n  //eslint-disable-next-line functional/no-let\n  let cancelled = false;\n  try {\n    while (!cancelled) {\n      await sleep(intervalMs);\n      if (cancelled) return;\n      if (typeof produce === `function`) {\n        // Returns V or Promise<V>\n        const result = await produce();\n        yield result;\n      } else if (typeof produce === `object`) {\n        // Generator, perhaps?\n        if (`next` in produce && `return` in produce && `throw` in produce) {\n          const result = await produce.next();\n          if (result.done) return;\n          yield result.value; \n        } else {\n          throw new Error(`interval: produce param does not seem to be a generator?`);\n        }\n      } else {\n        throw new Error(`produce param does not seem to return a value/Promise and is not a generator?`);\n      }\n    }\n  } finally {\n    cancelled = true;\n  }\n};","import {sleep} from \"./Sleep.js\";\n\n/**\n * Pauses execution for `timeoutMs` after which the asynchronous `callback` is executed and awaited.\n * \n * @example Pause and wait for function\n * ```js\n * const result = await delay(async () => Math.random(), 1000);\n * console.log(result); // Prints out result after one second\n * ```\n * \n * If `await` is omitted, the function will run after the provided timeout, and code will continue to run.\n * \n * @example Schedule a function without waiting\n * ```js\n * delay(async () => {\n *  console.log(Math.random())\n * }, 1000);\n * // Prints out a random number after 1 second.\n * ```\n * \n * {@link delay} and {@link sleep} are similar. `delay()` takes a parameter of what code to execute after the timeout, while `sleep()` just resolves after the timeout.\n * \n * \n * If you want to be able to cancel or re-run a delayed function, consider using\n * {@link timeout} instead.\n * \n * @template V\n * @param callback What to run after `timeoutMs`\n * @param timeoutMs How long to delay\n * @return Returns result of `callback`.\n */\nexport const delay = async <V>(callback:() => Promise<V>, timeoutMs: number): Promise<V> =>  {\n  await sleep(timeoutMs);\n  return Promise.resolve(await callback());\n};\n\n/**\n * Async generator that loops via `requestAnimationFrame`.\n * \n * ```\n * // Loop forever \n * (async () => {\n *  const loop = delayAnimationLoop();\n *  while (true) {\n *    await loop.next();\n * \n *    // Do something...\n *    // Warning: loops forever\n *  }\n * })();\n * ```\n * \n * ```\n * const loop = delayAnimationLoop();\n * for await (const o of loop) {\n *  // Do something...\n *  // Warning: loops forever\n * }\n * ```\n */\n//eslint-disable-next-line func-style\nasync function* delayAnimationLoop() {\n  //eslint-disable-next-line functional/no-let,@typescript-eslint/no-explicit-any\n  let resolve:any;\n  //eslint-disable-next-line functional/no-let\n  let p = new Promise<undefined>(r => resolve = r);\n  //eslint-disable-next-line functional/no-let\n  let timer = 0;\n  const callback = () => {\n    resolve();\n    p = new Promise<undefined>(r => resolve = r);\n  };\n\n  try {\n    while (true) {\n      timer = window.requestAnimationFrame(callback);\n      yield await p;\n    }\n  } finally {\n    resolve();\n    window.cancelAnimationFrame(timer);\n  }\n}\n\n/**\n * Async generator that loops at a given `timeoutMs`.\n * \n * @example Loop runs every second\n * ```\n * // Loop forever \n * (async () => {\n *  const loop = delayLoop(1000);\n *  while (true) {\n *    await loop.next();\n * \n *    // Do something...\n *    // Warning: loops forever\n *  }\n * })();\n * ```\n * \n * @example For Await loop every second\n * ```\n * const loop = delayLoop(1000);\n * for await (const o of loop) {\n *  // Do something...\n *  // Warning: loops forever\n * }\n * ```\n * @param timeoutMs Delay. If 0 is given, `requestAnimationFrame` is used over `setTimeout`.\n */\n//eslint-disable-next-line func-style\nexport async function* delayLoop(timeoutMs:number) {\n  if (timeoutMs === 0) return yield* delayAnimationLoop();\n\n  //eslint-disable-next-line functional/no-let,@typescript-eslint/no-explicit-any\n  let resolve:any;\n  //eslint-disable-next-line functional/no-let\n  let p = new Promise<undefined>(r => resolve = r);\n  //eslint-disable-next-line functional/no-let\n  let timer = 0;\n  const callback = () => {\n    resolve();\n    p = new Promise<undefined>(r => resolve = r);\n  };\n\n  try {\n    while (true) {\n      timer = window.setTimeout(callback, timeoutMs);\n      yield await p;\n    }\n  } finally {\n    resolve();\n    window.clearTimeout(timer);\n  }\n}\n\n"],"mappings":";;;;;AAyBO,IAAM,QAAQ,CAAI,WAAmB,UAAmC;AAC7E,UAAa,WAAW,YAAY,WAAW;AAC/C,MAAI,cAAc,GAAG;AACnB,WAAO,IAAI,QAAqB,aAAW,sBAAsB,OAAK;AACpE,cAAQ,KAAK;AAAA,IACf,CAAC,CAAC;AAAA,EACJ,OAAO;AACL,WAAO,IAAI,QAAqB,aAAW,WAAW,MAAM,QAAQ,KAAK,GAAG,SAAS,CAAC;AAAA,EACxF;AACF;;;ACFO,IAAM,WAAW,iBAAmB,SAA2B,YAAoB;AAExF,MAAI,YAAY;AAChB,MAAI;AACF,WAAO,CAAC,WAAW;AACjB,YAAM,MAAM,UAAU;AACtB,UAAI;AAAW;AACf,UAAI,OAAO,YAAY,YAAY;AAEjC,cAAM,SAAS,MAAM,QAAQ;AAC7B,cAAM;AAAA,MACR,WAAW,OAAO,YAAY,UAAU;AAEtC,YAAI,UAAU,WAAW,YAAY,WAAW,WAAW,SAAS;AAClE,gBAAM,SAAS,MAAM,QAAQ,KAAK;AAClC,cAAI,OAAO;AAAM;AACjB,gBAAM,OAAO;AAAA,QACf,OAAO;AACL,gBAAM,IAAI,MAAM,0DAA0D;AAAA,QAC5E;AAAA,MACF,OAAO;AACL,cAAM,IAAI,MAAM,+EAA+E;AAAA,MACjG;AAAA,IACF;AAAA,EACF,UAAE;AACA,gBAAY;AAAA,EACd;AACF;;;AC3BO,IAAM,QAAQ,OAAU,UAA2B,cAAmC;AAC3F,QAAM,MAAM,SAAS;AACrB,SAAO,QAAQ,QAAQ,MAAM,SAAS,CAAC;AACzC;AA2BA,qCAAqC;AAEnC,MAAI;AAEJ,MAAI,IAAI,IAAI,QAAmB,OAAK,UAAU,CAAC;AAE/C,MAAI,QAAQ;AACZ,QAAM,WAAW,MAAM;AACrB,YAAQ;AACR,QAAI,IAAI,QAAmB,OAAK,UAAU,CAAC;AAAA,EAC7C;AAEA,MAAI;AACF,WAAO,MAAM;AACX,cAAQ,OAAO,sBAAsB,QAAQ;AAC7C,YAAM,MAAM;AAAA,IACd;AAAA,EACF,UAAE;AACA,YAAQ;AACR,WAAO,qBAAqB,KAAK;AAAA,EACnC;AACF;AA8BA,0BAAiC,WAAkB;AACjD,MAAI,cAAc;AAAG,WAAO,OAAO,mBAAmB;AAGtD,MAAI;AAEJ,MAAI,IAAI,IAAI,QAAmB,OAAK,UAAU,CAAC;AAE/C,MAAI,QAAQ;AACZ,QAAM,WAAW,MAAM;AACrB,YAAQ;AACR,QAAI,IAAI,QAAmB,OAAK,UAAU,CAAC;AAAA,EAC7C;AAEA,MAAI;AACF,WAAO,MAAM;AACX,cAAQ,OAAO,WAAW,UAAU,SAAS;AAC7C,YAAM,MAAM;AAAA,IACd;AAAA,EACF,UAAE;AACA,YAAQ;AACR,WAAO,aAAa,KAAK;AAAA,EAC3B;AACF;","names":[]}