{"version":3,"sources":["../src/MutableFrequency.ts"],"sourcesContent":["/// âœ” Unit tested!\r\n\r\nimport { ToString } from \"./util.js\";\r\nimport {SimpleEventEmitter} from \"./Events.js\";\r\nimport * as KeyValueUtil from './KeyValue.js';\r\nimport {KeyValues} from \"./index.js\";\r\n\r\ntype FrequencyEventMap = {\r\n  readonly change:void;\r\n}\r\n\r\nexport const frequencyMutable = <V>(keyString?:ToString<V>|undefined) => new FrequencyMutable<V>(keyString);\r\n\r\n/**\r\n * Mutable Frequency\r\n *\r\n * @example\r\n * ```\r\n * .add(value)  - adds a value\r\n * .clear()     - clears all data\r\n * .keys() / .values()  - returns an iterator for keys and values\r\n * .toArray()   - returns an array of data in the shape [[key,freq],[key,freq]...]\r\n * ```\r\n * \r\n * @example\r\n * ```\r\n * const fh = new MutableFrequency();\r\n * fh.add(`apples`); // Count an occurence of `apples`\r\n * fh.add(`oranges)`;\r\n * fh.add(`apples`);\r\n * \r\n * const fhData = fh.toArray(); // Expect result [[`apples`, 2], [`oranges`, 1]]\r\n * fhData.forEach((d) => {\r\n *  const [key,freq] = d;\r\n *  console.log(`Key '${key}' occurred ${freq} time(s).`);\r\n * })\r\n * ```\r\n * \r\n * @export\r\n * @class MutableFrequency\r\n * @extends {SimpleEventEmitter<FrequencyEventMap>}\r\n * @template V\r\n */\r\nexport class FrequencyMutable<V> extends SimpleEventEmitter<FrequencyEventMap> {\r\n  readonly #store:Map<string, number>;\r\n  readonly #keyString: ToString<V>;\r\n\r\n  constructor(keyString: ToString<V> | undefined = undefined) {\r\n    super();\r\n    this.#store = new Map();\r\n\r\n    if (keyString === undefined) {\r\n      keyString = (a) => {\r\n        if (a === undefined) throw new Error(`Cannot create key for undefined`);\r\n        if (typeof a === `string`) { \r\n          return a;\r\n        } else { \r\n          return JSON.stringify(a);\r\n        }\r\n      };\r\n    }\r\n    this.#keyString = keyString;\r\n  }\r\n\r\n  clear() {\r\n    this.#store.clear();\r\n    this.fireEvent(`change`, undefined);\r\n  }\r\n  \r\n  keys():IterableIterator<string> {\r\n    return this.#store.keys();\r\n  }\r\n\r\n  values():IterableIterator<number> {\r\n    return this.#store.values();\r\n  }\r\n\r\n  toArray():[key:string, count:number][] {\r\n    return Array.from(this.#store.entries());\r\n  }\r\n\r\n  frequencyOf(value:V|string):number|undefined {\r\n    if (typeof value === `string`) return this.#store.get(value);\r\n\r\n    const key = this.#keyString(value);\r\n    return this.#store.get(key);\r\n  }\r\n\r\n  relativeFrequencyOf(value:V|string):number|undefined {\r\n    if (typeof value === `string`) return this.#store.get(value);\r\n\r\n    const key = this.#keyString(value);\r\n    const freq = this.#store.get(key);\r\n    if (freq === undefined) return;\r\n\r\n    const mma = this.minMaxAvg();\r\n    return freq / mma.total;\r\n  }\r\n\r\n  entries():Array<KeyValueUtil.KeyValue> {\r\n    return Array.from(this.#store.entries());\r\n  }\r\n  \r\n  minMaxAvg() {\r\n    return KeyValues.minMaxAvg(this.entries());\r\n  }\r\n\r\n  entriesSorted(sortStyle:`value` | `valueReverse` | `key` | `keyReverse`):ReadonlyArray<KeyValues.KeyValue> {\r\n    const s = KeyValueUtil.getSorter(sortStyle);\r\n    return s(this.entries());\r\n  }\r\n\r\n  add(...values:V[]) {\r\n    if (values === undefined) throw new Error(`value parameter is undefined`);\r\n    \r\n    const keys = values.map(this.#keyString);\r\n    \r\n    //const key = this.#keyString(value);\r\n    keys.forEach(key => {\r\n      const score = this.#store.get(key) ?? 0;\r\n      this.#store.set(key, score+1);  \r\n    });\r\n    this.fireEvent(`change`, undefined);\r\n  }\r\n}\r\n\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWO,IAAM,mBAAmB,CAAI,cAAqC,IAAI,iBAAoB;AAXjG;AA2CO,qCAAkC,mBAAsC;AAAA,EAI7E,YAAY,YAAqC,QAAW;AAC1D;AAJO;AACA;AAIP,uBAAK,QAAS,oBAAI;AAElB,QAAI,cAAc,QAAW;AAC3B,kBAAY,CAAC,MAAM;AACjB,YAAI,MAAM;AAAW,gBAAM,IAAI,MAAM;AACrC,YAAI,OAAO,MAAM,UAAU;AACzB,iBAAO;AAAA,eACF;AACL,iBAAO,KAAK,UAAU;AAAA;AAAA;AAAA;AAI5B,uBAAK,YAAa;AAAA;AAAA,EAGpB,QAAQ;AACN,uBAAK,QAAO;AACZ,SAAK,UAAU,UAAU;AAAA;AAAA,EAG3B,OAAgC;AAC9B,WAAO,mBAAK,QAAO;AAAA;AAAA,EAGrB,SAAkC;AAChC,WAAO,mBAAK,QAAO;AAAA;AAAA,EAGrB,UAAuC;AACrC,WAAO,MAAM,KAAK,mBAAK,QAAO;AAAA;AAAA,EAGhC,YAAY,OAAiC;AAC3C,QAAI,OAAO,UAAU;AAAU,aAAO,mBAAK,QAAO,IAAI;AAEtD,UAAM,MAAM,mBAAK,YAAL,WAAgB;AAC5B,WAAO,mBAAK,QAAO,IAAI;AAAA;AAAA,EAGzB,oBAAoB,OAAiC;AACnD,QAAI,OAAO,UAAU;AAAU,aAAO,mBAAK,QAAO,IAAI;AAEtD,UAAM,MAAM,mBAAK,YAAL,WAAgB;AAC5B,UAAM,OAAO,mBAAK,QAAO,IAAI;AAC7B,QAAI,SAAS;AAAW;AAExB,UAAM,MAAM,KAAK;AACjB,WAAO,OAAO,IAAI;AAAA;AAAA,EAGpB,UAAuC;AACrC,WAAO,MAAM,KAAK,mBAAK,QAAO;AAAA;AAAA,EAGhC,YAAY;AACV,WAAO,iBAAU,UAAU,KAAK;AAAA;AAAA,EAGlC,cAAc,WAA6F;AACzG,UAAM,IAAI,AAAa,UAAU;AACjC,WAAO,EAAE,KAAK;AAAA;AAAA,EAGhB,OAAO,QAAY;AACjB,QAAI,WAAW;AAAW,YAAM,IAAI,MAAM;AAE1C,UAAM,OAAO,OAAO,IAAI,mBAAK;AAG7B,SAAK,QAAQ,SAAO;AAClB,YAAM,QAAQ,mBAAK,QAAO,IAAI,QAAQ;AACtC,yBAAK,QAAO,IAAI,KAAK,QAAM;AAAA;AAE7B,SAAK,UAAU,UAAU;AAAA;AAAA;AA9ElB;AACA;","names":[]}