{"version":3,"sources":["../src/temporal/TrackedValue.ts"],"sourcesContent":["import {repeat} from \"../flow/index.js\";\r\nimport {GetOrGenerate, getOrGenerate} from \"../collections/Map.js\";\r\n\r\nexport type Timestamped<V> = V & {\r\n  readonly at:number\r\n};\r\n\r\nexport type Opts = {\r\n  readonly storeIntermediate?:boolean\r\n  readonly resetAfterSamples?:number\r\n}\r\n\r\nexport abstract class TrackedBase<V> {\r\n  seenCount:number;\r\n\r\n  protected storeIntermediate:boolean;\r\n  protected resetAfterSamples:number;\r\n\r\n  constructor(readonly id:string, opts:Opts = {}) {\r\n    this.storeIntermediate = opts.storeIntermediate ?? false;\r\n    this.resetAfterSamples = opts.resetAfterSamples ?? -1;\r\n    this.seenCount = 0;\r\n    //const s = {...initial, at:Date.now()} as Timestamped<V>;\r\n  }\r\n\r\n  reset() {\r\n    this.seenCount = 0;\r\n    this.onReset();\r\n  }\r\n\r\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  seen(...p:V[]):any {    \r\n    if (this.resetAfterSamples > 0 && this.seenCount > this.resetAfterSamples) {\r\n      this.reset();\r\n    }\r\n\r\n    this.seenCount += p.length;\r\n    const t = this.seenImpl(p);\r\n    this.onSeen(t);\r\n  }\r\n\r\n  abstract seenImpl(p:V[]):V[];\r\n\r\n  abstract get last():V|undefined;\r\n  abstract get initial():V|undefined;\r\n\r\n  abstract get elapsed():number;\r\n\r\n  //eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onSeen(_p:V[]) {\r\n\r\n  }\r\n  abstract onReset():void;\r\n} \r\n\r\nexport class TrackedPrimitiveValue<V extends number|string> extends TrackedBase<V> {\r\n  values:V[];\r\n  timestamps:number[];\r\n\r\n  constructor(id:string, opts:Opts) {\r\n    super(id, opts);\r\n    this.values = [];\r\n    this.timestamps = [];\r\n  }\r\n\r\n  get last():V|undefined {\r\n    return this.values.at(-1);\r\n  }\r\n\r\n  get initial():V|undefined {\r\n    return this.values.at(0);\r\n  }\r\n\r\n  /**\r\n * Returns number of recorded values (this can include the initial value)\r\n */\r\n  get size() {\r\n    return this.values.length;\r\n  }\r\n  \r\n  /**\r\n   * Returns the elapsed time, in milliseconds since the instance was created\r\n   */\r\n  get elapsed():number {\r\n    if (this.values.length < 0) throw new Error(`No values seen yet`);\r\n    return Date.now() - this.timestamps[0];\r\n  }\r\n\r\n  onReset() {\r\n    this.values = [];\r\n    this.timestamps = [];\r\n  }\r\n\r\n  /**\r\n   * Tracks a value\r\n   */\r\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  seenImpl(p:V[]):V[] {\r\n    const last = p.at(-1) as Timestamped<V>;\r\n    const now = Date.now();\r\n    if (this.storeIntermediate) {\r\n      this.values.push(...p);\r\n      this.timestamps.push(...repeat(p.length, () => now));\r\n    } else if (this.values.length === 0) {\r\n      // Add as initial value\r\n      this.values.push(last);\r\n      this.timestamps.push(now);\r\n    }\r\n    else if (this.values.length === 2) {\r\n      // Replace last value\r\n      this.values[1] = last;\r\n      this.timestamps[1] = now;\r\n    } else if (this.values.length === 1) {\r\n      // Add last value\r\n      this.values.push(last);\r\n      this.timestamps.push(now);\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * A tracked value of type `V`.\r\n */\r\nexport class TrackedObject<V> extends TrackedBase<V> {\r\n  values:Timestamped<V>[];\r\n\r\n  constructor(id:string, opts:Opts) {\r\n    super(id, opts);\r\n    this.values = [];\r\n  }\r\n\r\n  /**\r\n   * Allows sub-classes to be notified when a reset happens\r\n   */\r\n  onReset() {\r\n    this.values = []; //this.values.slice(1);\r\n  }\r\n\r\n  /**\r\n   * Tracks a value\r\n   */\r\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  seenImpl(p:V[]|Timestamped<V>[]):Timestamped<V>[] {\r\n    // Make sure values have a timestamp\r\n    const ts = p.map(v => ((`at` in v) ? v : {\r\n      ...v,\r\n      at: Date.now()\r\n    }));\r\n\r\n    const last = ts.at(-1) as Timestamped<V>;\r\n  \r\n    if (this.storeIntermediate) this.values.push(...ts);\r\n    else if (this.values.length === 0) {\r\n      // Add as initial value\r\n      this.values.push(last);\r\n    }\r\n    else if (this.values.length === 2) {\r\n      // Replace last value\r\n      this.values[1] = last;\r\n    } else if (this.values.length === 1) {\r\n      // Add last value\r\n      this.values.push(last);\r\n    }\r\n\r\n    return ts;\r\n  }\r\n\r\n  /**\r\n   * Last seen value. If no values have been added, it will return the initial value\r\n   */\r\n  get last() {\r\n    if (this.values.length === 1) return this.values[0];\r\n    //eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    return this.values.at(-1)!;\r\n  }\r\n\r\n  get initial() {\r\n    return this.values.at(0);\r\n  }\r\n  \r\n  /**\r\n   * Returns number of recorded values (this can include the initial value)\r\n   */\r\n  get size() {\r\n    return this.values.length;\r\n  }\r\n\r\n  /**\r\n   * Returns the elapsed time, in milliseconds since the instance was created\r\n   */\r\n  get elapsed():number {\r\n    return Date.now() - this.values[0].at;\r\n  }\r\n}\r\n\r\nexport class TrackedValueMap<V>  {\r\n  store:Map<string, TrackedBase<V>>;\r\n  gog:GetOrGenerate<string, TrackedBase<V>, V>;\r\n\r\n  constructor(creator:(key:string, start:V|undefined) => TrackedBase<V>) {\r\n    this.store = new Map();\r\n    this.gog = getOrGenerate<string, TrackedBase<V>, V>(this.store, creator);\r\n  }\r\n\r\n  /**\r\n   * Return number of named points being tracked\r\n   */\r\n  get size() {\r\n    return this.store.size;\r\n  }\r\n\r\n  /**\r\n   * Returns true if `id` is stored\r\n   * @param id \r\n   * @returns \r\n   */\r\n  has(id:string) {\r\n    return this.store.has(id);\r\n  }\r\n\r\n  /**\r\n   * For a given id, note that we have seen one or more values.\r\n   * @param id Id\r\n   * @param values Values(s)\r\n   * @returns Information about start to last value\r\n   */\r\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public async seen(id:string, ...values:V[]):Promise<any> {\r\n    const trackedValue = await this.getTrackedValue(id, ...values);\r\n    \r\n    // Pass it over to the TrackedValue\r\n    return trackedValue.seen(...values);\r\n  }\r\n\r\n  /**\r\n   * Creates or returns a TrackedValue instance for `id`.\r\n   * @param id \r\n   * @param values \r\n   * @returns \r\n   */\r\n  protected async getTrackedValue(id:string, ...values:V[]) {\r\n    if (id === null) throw new Error(`id parameter cannot be null`);\r\n    if (id === undefined) throw new Error(`id parameter cannot be undefined`);\r\n\r\n    // Create or recall TrackedValue by id\r\n    const trackedValue = await this.gog(id, values[0]);\r\n    return trackedValue;\r\n  }\r\n\r\n  /**\r\n   * Remove a tracked value by id.\r\n   * Use {@link reset} to clear them all.\r\n   * @param id\r\n   */\r\n  delete(id:string) {\r\n    this.store.delete(id);\r\n  }\r\n\r\n  /**\r\n   * Remove all tracked values.\r\n   * Use {@link delete} to remove a single value by id.\r\n   */\r\n  reset() {\r\n    this.store = new Map();\r\n  }\r\n\r\n  /**\r\n   * Enumerate ids\r\n   */\r\n  *ids() {\r\n    yield* this.store.keys();\r\n  }\r\n\r\n  /**\r\n   * Enumerate tracked values\r\n   */\r\n  *values() {\r\n    yield* this.store.values();\r\n  }\r\n\r\n  /**\r\n   * Returns TrackedValues ordered with oldest first\r\n   * @returns \r\n   */\r\n  trackedByAge():readonly TrackedBase<V>[] {\r\n    const tp = Array.from(this.store.values());\r\n    tp.sort((a, b) => {\r\n      const aa = a.elapsed;\r\n      const bb = b.elapsed;\r\n      if (aa === bb) return 0;\r\n      if (aa > bb) return -1;\r\n      return 1;\r\n    });\r\n    return tp;\r\n  }\r\n\r\n  valuesByAge():readonly V[] {\r\n    const tb = this.trackedByAge();\r\n    // @ts-ignore\r\n    return tb.map(t => t.last);\r\n  }\r\n\r\n  /**\r\n   * Enumerate last received values\r\n   * \r\n   * @example Calculate centroid of latest-received values\r\n   * ```js\r\n   * const pointers = pointTracker();\r\n   * const c = Points.centroid(...Array.from(pointers.lastPoints()));\r\n   * ```\r\n   */\r\n  *last() {\r\n    //eslint-disable-next-line functional/no-loop-statement\r\n    for (const p of this.store.values()) {\r\n      yield p.last;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enumerate starting values\r\n   */\r\n  *initialValues() {\r\n    //eslint-disable-next-line functional/no-loop-statement\r\n    for (const p of this.store.values()) {\r\n      yield p.initial;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a tracked value by id, or undefined if not found\r\n   * @param id \r\n   * @returns \r\n   */\r\n  get(id:string):TrackedBase<V>|undefined {\r\n    return this.store.get(id);\r\n  }\r\n}\r\n\r\n\r\n"],"mappings":"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","names":[]}