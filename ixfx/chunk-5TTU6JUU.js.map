{"version":3,"sources":["../src/Util.ts"],"sourcesContent":["import { number as guardNumber } from \"./Guards.js\";\nimport {untilMatch} from \"./Text.js\";\n\nexport * as IterableAsync from './IterableAsync.js';\n//export { KeyValue } from './KeyValue.js';\n\n/**\n * Returns `fallback` if `v` is NaN, otherwise returns `v`\n * @param v\n * @param fallback \n * @returns \n */\nexport const ifNaN = (v:number, fallback:number):number => {\n  if (Number.isNaN(v)) return fallback;\n  return v;\n};\n\n\n/**\n * Returns true if `x` is a power of two\n * @param x \n * @returns True if `x` is a power of two\n */\nexport const isPowerOfTwo = (x:number) => Math.log2(x) % 1 === 0;\n\n/**\n * Returns the relative difference from the `initial` value\n * ```js\n * const rel = relativeDifference(100);\n * rel(100); // 1\n * rel(150); // 1.5\n * rel(50);  // 0.5\n * ```\n * \n * The code for this is simple:\n * ```js\n * const relativeDifference = (initial) => (v) => v/initial\n * ```\n * @param {number} initial \n * @returns \n */\nexport const relativeDifference = (initial:number) => (v:number) => v/initial;\n\n// try {\n//   if (typeof window !== `undefined`) {\n//     //eslint-disable-next-line functional/immutable-data,@typescript-eslint/no-explicit-any\n//     (window as any).ixfx = {...(window as any).ixfx, clamp, clampIndex, flip, interpolate, interpolateAngle, proportion, relativeDifference, scale, scalePercent, wrap, wrapInteger, wrapRange};\n//   }\n// } catch { /* no-op */ }\n\n/**\n * Returns a field on object `o` by a dotted path.\n * ```\n * const d = {\n *  accel: {x: 1, y: 2, z: 3},\n *  gyro:  {x: 4, y: 5, z: 6}\n * };\n * getFieldByPath(d, `accel.x`); // 1\n * getFieldByPath(d, `gyro.z`);  // 6\n * getFieldByPath(d, `gyro`);    // {x:4, y:5, z:6}\n * getFieldByPath(d, ``);        // Returns original object\n * ```\n * \n * If a field does not exist, `undefined` is returned.\n * Use {@link getFieldPaths} to get a list of paths.\n * @param o \n * @param path \n * @returns \n */\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const getFieldByPath = (o:any, path:string = ``):any|undefined => {\n  if (path.length === 0) return o;\n  if (path in o) {\n    return o[path];\n  } else {\n    const start = untilMatch(path, `.`);\n    if (start in o) {\n      return getFieldByPath(o[start], path.substring(start.length+1));\n    } else {\n      return undefined;\n    }\n  }\n};\n\n/**\n * Returns a list of paths for all the fields on `o`\n * ```\n * const d = {\n *  accel: {x: 1, y: 2, z: 3},\n *  gyro:  {x: 4, y: 5, z: 6}\n * };\n * const paths = getFieldPaths(d); \n * // Yields [ `accel.x`, `accel.y`,`accel.z`,`gyro.x`,`gyro.y`,`gyro.z` ]\n * ```\n * \n * Use {@link getFieldByPath} to fetch data by this 'path' string.\n * @param o \n * @returns \n */\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const getFieldPaths = (o:any):readonly string[] => {\n  const paths:string[] = [];\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const probe = (o:any, prefix = ``) => {\n    if (typeof o === `object`) {\n      const keys = Object.keys(o);\n      if (prefix.length > 0) prefix += `.`;\n      keys.forEach(k => probe(o[k], prefix + k));\n    } else {\n      //eslint-disable-next-line functional/immutable-data\n      paths.push(prefix);\n    }\n  };\n  probe(o);\n  return paths;\n};\n\n/**\n * Rounds `v` up to the nearest multiple of `multiple`\n * ```\n * roundMultiple(19, 20); // 20\n * roundMultiple(21, 20); // 40\n * ```\n * @param v \n * @param multiple \n * @returns \n */\nexport const roundUpToMultiple = (v:number, multiple:number):number => {\n  guardNumber(v, `nonZero`, `v`);\n  guardNumber(multiple, `nonZero`, `muliple`);\n  return Math.ceil(v/multiple)*multiple;\n};\n\nexport type ToString<V> = (itemToMakeStringFor: V) => string;\n\n/**\n * Function that returns true if `a` and `b` are considered equal\n */\nexport type IsEqual<V> = (a:V, b:V) => boolean;\n\n/**\n * Default comparer function is equiv to checking `a === b`\n */\nexport const isEqualDefault = <V>(a:V, b:V):boolean => a === b;\n\n/**\n * Comparer returns true if string representation of `a` and `b` are equal.\n * Uses `toStringDefault` to generate a string representation (`JSON.stringify`)\n * @returns True if the contents of `a` and `b` are equal\n */\nexport const isEqualValueDefault = <V>(a:V, b:V):boolean => {\n  // âœ” UNIT TESTED\n  if (a === b) return true; // Object references are the same, or string values are the same\n  return toStringDefault(a) === toStringDefault(b); // String representations are the same\n};\n\n/**\n * A default converter to string that uses JSON.stringify if its an object, or the thing itself if it's a string\n */\nexport const toStringDefault = <V>(itemToMakeStringFor:V):string => ((typeof itemToMakeStringFor === `string`) ? itemToMakeStringFor : JSON.stringify(itemToMakeStringFor));\n\nexport const runningiOS = () => [\n  `iPad Simulator`,\n  `iPhone Simulator`,\n  `iPod Simulator`,\n  `iPad`,\n  `iPhone`,\n  `iPod`\n].includes(navigator.platform)\n  // iPad on iOS 13 detection\n  || (navigator.userAgent.includes(`Mac`) && `ontouchend` in document);\n\n\ntry {\n  if (typeof window !== `undefined`) {\n    //eslint-disable-next-line functional/immutable-data,@typescript-eslint/no-explicit-any\n    (window as any).ixfx = {...(window as any).ixfx,  getFieldByPath, getFieldPaths };\n  }\n} catch { /* no-op */ }"],"mappings":";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYO,IAAM,QAAQ,CAAC,GAAU,aAA2B;AACzD,MAAI,OAAO,MAAM,CAAC;AAAG,WAAO;AAC5B,SAAO;AACT;AAQO,IAAM,eAAe,CAAC,MAAa,KAAK,KAAK,CAAC,IAAI,MAAM;AAkBxD,IAAM,qBAAqB,CAAC,YAAmB,CAAC,MAAa,IAAE;AA6B/D,IAAM,iBAAiB,CAAC,GAAO,OAAc,OAAqB;AACvE,MAAI,KAAK,WAAW;AAAG,WAAO;AAC9B,MAAI,QAAQ,GAAG;AACb,WAAO,EAAE;AAAA,EACX,OAAO;AACL,UAAM,QAAQ,WAAW,MAAM,GAAG;AAClC,QAAI,SAAS,GAAG;AACd,aAAO,eAAe,EAAE,QAAQ,KAAK,UAAU,MAAM,SAAO,CAAC,CAAC;AAAA,IAChE,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAkBO,IAAM,gBAAgB,CAAC,MAA4B;AACxD,QAAM,QAAiB,CAAC;AAExB,QAAM,QAAQ,CAACA,IAAO,SAAS,OAAO;AACpC,QAAI,OAAOA,OAAM,UAAU;AACzB,YAAM,OAAO,OAAO,KAAKA,EAAC;AAC1B,UAAI,OAAO,SAAS;AAAG,kBAAU;AACjC,WAAK,QAAQ,OAAK,MAAMA,GAAE,IAAI,SAAS,CAAC,CAAC;AAAA,IAC3C,OAAO;AAEL,YAAM,KAAK,MAAM;AAAA,IACnB;AAAA,EACF;AACA,QAAM,CAAC;AACP,SAAO;AACT;AAYO,IAAM,oBAAoB,CAAC,GAAU,aAA2B;AACrE,SAAY,GAAG,WAAW,GAAG;AAC7B,SAAY,UAAU,WAAW,SAAS;AAC1C,SAAO,KAAK,KAAK,IAAE,QAAQ,IAAE;AAC/B;AAYO,IAAM,iBAAiB,CAAI,GAAK,MAAgB,MAAM;AAOtD,IAAM,sBAAsB,CAAI,GAAK,MAAgB;AAE1D,MAAI,MAAM;AAAG,WAAO;AACpB,SAAO,gBAAgB,CAAC,MAAM,gBAAgB,CAAC;AACjD;AAKO,IAAM,kBAAkB,CAAI,wBAAmC,OAAO,wBAAwB,WAAY,sBAAsB,KAAK,UAAU,mBAAmB;AAElK,IAAM,aAAa,MAAM;AAAA,EAC9B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,EAAE,SAAS,UAAU,QAAQ,KAEvB,UAAU,UAAU,SAAS,KAAK,KAAK,gBAAgB;AAG7D,IAAI;AACF,MAAI,OAAO,WAAW,aAAa;AAEjC,IAAC,OAAe,OAAO,EAAC,GAAI,OAAe,MAAO,gBAAgB,cAAc;AAAA,EAClF;AACF,QAAE;AAAoB;","names":["o"]}