{"version":3,"sources":["../src/Random.ts","../src/collections/Arrays.ts","../src/collections/NumericArrays.ts","../src/modulation/Easing.ts"],"sourcesContent":["import { randomIndex, randomElement } from \"./collections/Arrays.js\";\r\nimport {number as guardNumber} from './Guards.js';\r\nimport * as Easings from \"./modulation/Easing.js\";\r\nimport {clamp} from \"./Util.js\";\r\nexport {randomIndex as arrayIndex};\r\nexport {randomElement as arrayElement};\r\n\r\nexport const defaultRandom = Math.random;\r\nexport type RandomSource = () => number;\r\n\r\n/**\r\n * Returns a random number between `min-max` weighted such that values closer to `min`\r\n * occur more frequently\r\n * @param min \r\n * @param max \r\n * @returns \r\n */\r\n// export const weighted2 = (min: number, max: number) => {\r\n//   const r = Math.random() * max;// + min;\r\n//   const x = Math.round(max/r);\r\n//   if (x > max) {\r\n//     console.log(`r: ${r} x: ${x} min: ${min} max: ${max}`);\r\n//   }\r\n//   return x;\r\n// };\r\n\r\n/***\r\n * Returns a random named, weighted by a given easing function, or `quadIn` by default.\r\n * @param rand Source random generator. `Math.random` by default.\r\n * @returns Random number (0-1)\r\n */\r\nexport const weighted = (easingName:Easings.EasingName = `quadIn`, rand:RandomSource = defaultRandom):number => {\r\n  const r = rand();\r\n  const easingFn = Easings.get(easingName as Easings.EasingName);\r\n  if (easingFn === undefined) throw new Error(`Easing function '${easingName}' not found.`);\r\n  return easingFn(r);\r\n};\r\n\r\n/**\r\n * Random integer, weighted according to an easing function.\r\n * Number will be inclusive of `min` and below `max`.\r\n * \r\n * ```js\r\n * // If only one parameter is provided, it's assumed to be the max:\r\n * // Random number that might be 0 through to 99\r\n * const r = weightedInteger(100);\r\n * \r\n * // If two numbers are given, it's assumed to be min, max\r\n * // Random number that might be 20 through to 29\r\n * const r = weightedInteger(20,30);\r\n * \r\n * // One number and string. First param is assumed to be\r\n * // the max, second parameter the easing function\r\n * const r = weightedInteger(100, `quadIn`)\r\n * ```\r\n * \r\n * Note: result from easing function will be clamped to\r\n * the min/max (by default 0-1);\r\n * \r\n * @param max Maximum (exclusive)\r\n * @param min Minimum number (inclusive), 0 by default\r\n * @param rand Source random generator. `Math.random` by default.\r\n * @param easing Easing to use, uses `quadIn` by default\r\n * @returns \r\n */\r\nexport const weightedInteger = (minOrMax:number, maxOrEasing?:number|Easings.EasingName, easing?:Easings.EasingName, rand:RandomSource = defaultRandom) => {\r\n  // Unit tested - for ranges and params types. Haven't tested easing distribution\r\n\r\n  guardNumber(minOrMax);\r\n  //eslint-disable-next-line functional/no-let\r\n  let min, max, easingName;\r\n  easingName = `quadIn`;\r\n  min = 0;\r\n\r\n  if (maxOrEasing === undefined) {\r\n    // No second parameter\r\n    max = minOrMax;\r\n  } else {\r\n    // There is a second parameter\r\n    if (typeof maxOrEasing === `number`) {\r\n      min = minOrMax;\r\n      max = maxOrEasing;\r\n      if (easing !== undefined) easingName = easing;\r\n    } else if (typeof maxOrEasing === `string`) {\r\n      max = minOrMax;\r\n      easingName = maxOrEasing;\r\n    } else {\r\n      throw new Error(`Unexpected value type for maxOrEasing: ${maxOrEasing}`);\r\n    }\r\n  }\r\n  \r\n  if (easing !== undefined) easingName = easing;\r\n\r\n  const easingFn = Easings.get(easingName as Easings.EasingName);\r\n  if (easingFn === undefined) throw new Error(`Easing '${easingName}' not found`);\r\n\r\n  guardNumber(min);\r\n  if (max <= min) throw new Error(`Max should be greater than min`);\r\n  const r = clamp(easingFn(rand()));\r\n  return Math.floor(r * (max-min)) + min;\r\n};\r\n","/**\r\n * Functions for working with primitive arrays, regardless of type\r\n * See Also: NumericArrays.ts\r\n */\r\n\r\nimport {defaultRandom, RandomSource} from '~/Random.js';\r\nimport {IsEqual, isEqualDefault} from '../Util.js';\r\n\r\nexport * from './NumericArrays.js';\r\n\r\n/**\r\n * Throws an error if `array` parameter is not a valid array\r\n * @private\r\n * @param array \r\n * @param paramName \r\n */\r\nexport const guardArray = <V>(array:ArrayLike<V>, paramName:string = `?`) => {\r\n  if (array === undefined) throw new Error(`Param '${paramName}' is undefined. Expected array.`);\r\n  if (array === null) throw new Error(`Param '${paramName}' is null. Expected array.`);\r\n  if (!Array.isArray(array)) throw new Error(`Param '${paramName}' not an array as expected`);\r\n};\r\n\r\n/**\r\n * Returns a random array index\r\n * @param array\r\n * @param rand Random generator. `Math.random` by default.\r\n * @returns \r\n */\r\nexport const randomIndex = <V>(array: ArrayLike<V>, rand:RandomSource = defaultRandom): number => Math.floor(rand() * array.length);\r\n\r\n/**\r\n * Returns random element\r\n * @param array\r\n * @params rand Random generator. `Math.random` by default.\r\n * @returns \r\n */\r\nexport const randomElement = <V>(array: ArrayLike<V>, rand:RandomSource = defaultRandom): V => {\r\n  guardArray(array, `array`);\r\n  return array[Math.floor(rand() * array.length)];\r\n};\r\n\r\n/**\r\n * Removes a random item from an array, returning both the item and the new array as a result.\r\n * Does not modify the original array unless `mutate` parameter is true.\r\n * \r\n * @example Without changing source\r\n * ```js\r\n * const data = [100, 20, 40];\r\n * const {value, array} = randomPluck(data);\r\n * // value: 20, array: [100, 40], data: [100, 20, 40];\r\n * ```\r\n *\r\n * @example Mutating source\r\n * ```js\r\n * const data = [100, 20, 40];\r\n * const {value} = randomPluck(data, true);\r\n * // value: 20, data: [100, 40];\r\n * ```\r\n * \r\n * @template V Type of array\r\n * @param array Array to pluck item from\r\n * @param mutate If _true_, changes input array. _False_ by default.\r\n * @param random Random generatr. `Math.random` by default.\r\n * @return Returns an object `{value:V|undefined, array:V[]}`\r\n * \r\n */\r\n//eslint-disable-next-line functional/prefer-readonly-type\r\nexport const randomPluck = <V>(array:readonly V[], mutate = false, rand:RandomSource = defaultRandom):{readonly value:V|undefined, readonly array:Array<V> } => {\r\n  if (array === undefined) throw new Error(`array is undefined`);\r\n  if (!Array.isArray(array)) throw new Error(`'array' param is not an array`);\r\n  if (array.length === 0) return {value: undefined, array: []};\r\n  const index = randomIndex(array, rand);\r\n  if (mutate) {\r\n    return {\r\n      value: array[index],\r\n      //eslint-disable-next-line functional/immutable-data\r\n      array: array.splice(index, 1)\r\n    };\r\n  } else {\r\n    // Copy array, remove item from that\r\n    const t = [...array];\r\n    //eslint-disable-next-line functional/immutable-data\r\n    t.splice(index, 1);\r\n    return {\r\n      value: array[index],\r\n      array: t\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Returns a shuffled copy of the input array.\r\n * @example\r\n * ```js\r\n * const d = [1, 2, 3, 4];\r\n * const s = shuffle(d);\r\n * // d: [1, 2, 3, 4], s: [3, 1, 2, 4]\r\n * ```\r\n * @param dataToShuffle \r\n * @param rand Random generator. `Math.random` by default.\r\n * @returns Copy with items moved around randomly\r\n * @template V Type of array items\r\n */\r\nexport const shuffle = <V>(dataToShuffle:ReadonlyArray<V>, rand:RandomSource = defaultRandom): ReadonlyArray<V> => {\r\n  const array = [...dataToShuffle];\r\n  // eslint-disable-next-line functional/no-loop-statement, functional/no-let\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(rand() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n};\r\n\r\n/**\r\n * Returns an array with a value omitted. If value is not found, result will be a copy of input.\r\n * Value checking is completed via the provided `comparer` function, or by default checking whether `a === b`.\r\n *\r\n * @example\r\n * ```js\r\n * const data = [100, 20, 40];\r\n * const filtered = without(data, 20); // [100, 40]\r\n * ```\r\n * @template V Type of array items\r\n * @param data Source array\r\n * @param value Value to remove\r\n * @param comparer Comparison function. If not provided {@link isEqualDefault} is used, which compares using `===`\r\n * @return Copy of array without value.\r\n */\r\nexport const without = <V>(data:ReadonlyArray<V>, value:V, comparer:IsEqual<V> = isEqualDefault):ReadonlyArray<V> => data.filter(v => !comparer(v, value));\r\n\r\n/**\r\n * Groups data by a grouper function, returning data as a map with string\r\n * keys and array values.\r\n * \r\n * @example\r\n * ```js\r\n * const data = [\r\n *  { age: 39, city: `London` }\r\n *  { age: 14, city: `Copenhagen` }\r\n *  { age: 23, city: `Stockholm` }\r\n *  { age: 56, city: `London` }\r\n * ];\r\n * const map = groupBy(data, item => data.city); \r\n * ```\r\n * \r\n * Returns a map: \r\n * \r\n * London: [{ age: 39, city: `London` }, { age: 56, city: `London` }]\r\n * Stockhom: [{ age: 23, city: `Stockholm` }]\r\n * Copenhagen: [{ age: 14, city: `Copenhagen` }]\r\n * \r\n * @param array Array to group\r\n * @param grouper Function that returns a key for a given item\r\n * @template K Type of key to group by. Typically string.\r\n * @template V Type of values\r\n * @returns Map \r\n */\r\nexport const groupBy = <K, V>(array: ReadonlyArray<V>, grouper: (item: V) => K) => array.reduce((store, item) => {\r\n  const key = grouper(item);\r\n  const val = store.get(key);\r\n  if (val === undefined) {\r\n    store.set(key, [item]);\r\n  } else {\r\n    // eslint-disable-next-line functional/immutable-data\r\n    val.push(item);\r\n  }\r\n  return store;\r\n  /* eslint-disable-next-line functional/prefer-readonly-type */\r\n}, new Map<K, V[]>());","/**\r\n * Calculates the average of all numbers in an array.\r\n * Array items which aren't a valid number are ignored and do not factor into averaging.\r\n *\r\n * Use {@link minMaxAvg} if you want min, max and total as well.\r\n * \r\n * @example\r\n * ```\r\n * // Average of a list\r\n * const avg = average(1, 1.4, 0.9, 0.1);\r\n * \r\n * // Average of a variable\r\n * let data = [100,200];\r\n * average(...data);\r\n * ```\r\n * @param data Data to average.\r\n * @returns Average of array\r\n */\r\nexport const average = (...data: readonly number[]): number => {\r\n  // ✔ UNIT TESTED\r\n  if (data === undefined) throw new Error(`data parameter is undefined`);\r\n\r\n  //const total = data.reduce((acc, v) => acc+v, 0);\r\n  const validNumbers = data.filter(d => typeof d === `number` && !Number.isNaN(d));\r\n  const total = validNumbers.reduce((acc, v) => acc + v, 0);\r\n  return total / validNumbers.length;\r\n};\r\n\r\n/**\r\n * Returns the minimum number out of `data`.\r\n * Undefined and non-numbers are silently ignored.\r\n * @param data\r\n * @returns Minimum number\r\n */\r\nexport const min = (...data:readonly number[]):number => {\r\n  const validNumbers = data.filter(d => typeof d === `number` && !Number.isNaN(d));\r\n  return Math.min(...validNumbers);\r\n};\r\n\r\n/**\r\n * Returns the minimum number out of `data`.\r\n * Undefined and non-numbers are silently ignored.\r\n * @param data\r\n * @returns Minimum number\r\n */\r\nexport const max = (...data:readonly number[]):number => {\r\n  const validNumbers = data.filter(d => typeof d === `number` && !Number.isNaN(d));\r\n  return Math.max(...validNumbers);\r\n};\r\n\r\n/**\r\n * Returns the min, max, avg and total of the array.\r\n * Any values that are invalid are silently skipped over.\r\n * \r\n * Use {@link average} if you only need average\r\n * \r\n * @param data \r\n * @returns `{min, max, avg, total}`\r\n */\r\nexport const minMaxAvg = (data: readonly number[]): {\r\n  /**\r\n   * Smallest value in array\r\n   */\r\n  readonly min: number; \r\n  /**\r\n   * Total of all items\r\n   */\r\n  readonly total: number; \r\n  /**\r\n   * Largest value in array\r\n   */\r\n  readonly max: number; \r\n  /**\r\n   * Average value in array\r\n   */\r\n  readonly avg: number;} => {\r\n  const validNumbers = data.filter(d => typeof d === `number` && !Number.isNaN(d));\r\n  const total = validNumbers.reduce((acc, v) => acc + v, 0);\r\n  return {\r\n    total: total,\r\n    max: Math.max(...validNumbers),\r\n    min: Math.min(...validNumbers),\r\n    avg: total / validNumbers.length\r\n  };\r\n};","// Easings from https://easings.net/\r\nimport {msElapsedTimer, HasCompletion, relativeTimer, ticksElapsedTimer, TimerSource} from '../flow/Timer.js';\r\n\r\nconst sqrt = Math.sqrt;\r\nconst pow = Math.pow;\r\nconst cos = Math.cos;\r\n//eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst pi = Math.PI;\r\nconst sin = Math.sin;\r\n/*\r\ntype RelativeTimer = {\r\n  reset(): void\r\n  elapsed(): number\r\n  isDone(): boolean\r\n}\r\n\r\ntype TimerSource = (upperBound: number) => RelativeTimer;\r\n\r\nconst msRelativeTimer = function (upperBound: number): RelativeTimer {\r\n  let start = performance.now();\r\n  return {\r\n    reset: () => {\r\n      start = performance.now();\r\n    },\r\n    elapsed: () => clamp((performance.now() - start) / upperBound),\r\n    isDone: () => (performance.now() - start) >= upperBound,\r\n  };\r\n};\r\n\r\nconst tickRelativeTimer = function (upperBound: number): RelativeTimer {\r\n  let start = 0;\r\n  return {\r\n    reset: () => {\r\n      start = 0;\r\n    },\r\n    elapsed: () => clamp(start++ / upperBound),\r\n    isDone: () => start >= upperBound,\r\n  };\r\n};\r\n*/\r\n\r\ntype EasingFn = (x: number) => number;\r\n\r\n/**\r\n * Creates an easing based on clock time\r\n * @inheritdoc Easing\r\n * @example Time based easing\r\n * ```\r\n * const t = time(`quintIn`, 5*1000); // Will take 5 seconds to complete\r\n * ...\r\n * t.compute(); // Get current value of easing\r\n * t.reset();   // Reset to 0\r\n * t.isDone;    // _True_ if finished\r\n * ```\r\n * @param name Name of easing\r\n * @param durationMs Duration in milliseconds\r\n * @returns Easing\r\n */\r\nexport const time = function (name: EasingName, durationMs: number):Easing {\r\n  return create(name, durationMs, msElapsedTimer);\r\n};\r\n\r\n/**\r\n * Creates an easing based on ticks\r\n * \r\n * @inheritdoc Easing\r\n * @example Tick-based easing\r\n * ```\r\n * const t = tick(`sineIn`, 1000);   // Will take 1000 ticks to complete\r\n * t.compute(); // Each call to `compute` progresses the tick count\r\n * t.reset();   // Reset to 0\r\n * t.isDone;    // _True_ if finished\r\n * ```\r\n * @param name Name of easing\r\n * @param durationTicks Duration in ticks\r\n * @returns Easing\r\n */\r\nexport const tick = function (name: EasingName, durationTicks: number):Easing {\r\n  return create(name, durationTicks, ticksElapsedTimer);\r\n};\r\n\r\n/**\r\n * 'Ease' from `0` to `1` over a delicious curve. Commonly used for animation\r\n * and basic modelling of phyical motion. \r\n * \r\n * Create via {@link tick} or {@link time}, call `compute` to calculate the next\r\n * value in the progression, until you reach `1` or `isDone` returns true.\r\n * \r\n */\r\nexport type Easing = HasCompletion & {\r\n/**\r\n * Computes the current value of the easing\r\n *\r\n * @returns {number}\r\n */\r\n  compute(): number\r\n\r\n/**\r\n * Reset the easing\r\n */\r\n  reset(): void\r\n/**\r\n * Returns true if the easing is complete\r\n *\r\n * @returns {boolean}\r\n */\r\n  get isDone(): boolean\r\n};\r\n\r\n/**\r\n * Creates a new easing by name\r\n *\r\n * @param name Name of easing\r\n * @param duration Duration (meaning depends on timer source)\r\n * @param timerSource Timer source. Eg {@link tickRelativeTimer}, {@link msRelativeTimer}\r\n * @returns\r\n */\r\nconst create = function (name: EasingName, duration: number, timerSource: TimerSource): Easing {\r\n  const fn = get(name);\r\n  if (fn === undefined) throw new Error(`Easing function not found: ${name}`);\r\n  // Get a relative version of timer\r\n  const timer = relativeTimer(duration, timerSource(), true);\r\n\r\n  return {\r\n    get isDone() {\r\n      return timer.isDone;\r\n    },\r\n    compute: () => {\r\n      const relative = timer.elapsed;\r\n      return fn(relative);\r\n    },\r\n    reset: () => {\r\n      timer.reset();\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nexport type EasingName = keyof typeof functions;\r\n\r\n/**\r\n * Returns an easing function by name, or _undefined_ if not found.\r\n * This is a manual way of working with easing functions. If you want to\r\n * ease over time or ticks, use {@link time} or {@link ticks}.\r\n * \r\n * ```js\r\n * const fn = Easings.get(`sineIn`);\r\n * // Returns 'eased' transformation of 0.5\r\n * fn(0.5); \r\n * ```\r\n * @param easingName eg `sineIn`\r\n * @returns Easing function\r\n */\r\nexport const get = function (easingName: EasingName): EasingFn|undefined {\r\n  if (easingName === null) throw new Error(`easingName is null`);\r\n  if (easingName === undefined) throw new Error(`easingName is undefined`);\r\n  const name = easingName.toLocaleLowerCase();\r\n  const found = Object\r\n    .entries(functions)\r\n    .find(([k, _v]) => k.toLocaleLowerCase() === name);\r\n\r\n  if (found === undefined) return found;\r\n  return found[1];\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns Returns list of available easing names\r\n */\r\nexport const getEasings = function ():readonly string[] {\r\n  return Array.from(Object.keys(functions));\r\n};\r\n\r\nconst bounceOut = function (x:number): number {\r\n  const n1 = 7.5625;\r\n  const d1 = 2.75;\r\n\r\n  if (x < 1 / d1) {\r\n    return n1 * x * x;\r\n  } else if (x < 2 / d1) {\r\n    return n1 * (x -= 1.5 / d1) * x + 0.75;\r\n  } else if (x < 2.5 / d1) {\r\n    return n1 * (x -= 2.25 / d1) * x + 0.9375;\r\n  } else {\r\n    return n1 * (x -= 2.625 / d1) * x + 0.984375;\r\n  }\r\n};\r\n\r\nexport const functions = {\r\n  sineIn: (x: number): number => 1 - cos((x * pi) / 2),\r\n  sineOut: (x: number): number => sin((x * pi) / 2),\r\n  quadIn: (x: number): number => x * x,\r\n  quadOut: (x: number): number => 1 - (1 - x) * (1 - x),\r\n  sineInOut: (x: number): number => -(cos(pi * x) - 1) / 2,\r\n  quadInOut: (x: number): number => (x < 0.5 ? 2 * x * x : 1 - pow(-2 * x + 2, 2) / 2),\r\n  cubicIn: (x: number): number => x * x * x,\r\n  cubicOut: (x: number): number => 1 - pow(1 - x, 3),\r\n  quartIn: (x: number): number => x * x * x * x,\r\n  quartOut: (x: number): number => 1 - pow(1 - x, 4),\r\n  quintIn: (x: number): number => x * x * x * x * x,\r\n  quintOut: (x: number): number => 1 - pow(1 - x, 5),\r\n  expoIn: (x: number): number => (x === 0 ? 0 : pow(2, 10 * x - 10)),\r\n  expoOut: (x: number): number => (x === 1 ? 1 : 1 - pow(2, -10 * x)),\r\n  quintInOut: (x: number): number => (x < 0.5 ? 16 * x * x * x * x * x : 1 - pow(-2 * x + 2, 5) / 2),\r\n  expoInOut: (x: number): number => (x === 0\r\n    ? 0\r\n    : x === 1\r\n      ? 1\r\n      : x < 0.5 ? pow(2, 20 * x - 10) / 2\r\n        : (2 - pow(2, -20 * x + 10)) / 2),\r\n  circIn: (x: number): number => 1 - sqrt(1 - pow(x, 2)),\r\n  circOut: (x: number): number => sqrt(1 - pow(x - 1, 2)),\r\n  backIn: (x: number): number => {\r\n    const c1 = 1.70158;\r\n    const c3 = c1 + 1;\r\n\r\n    return c3 * x * x * x - c1 * x * x;\r\n  },\r\n  backOut: (x: number): number => {\r\n    const c1 = 1.70158;\r\n    const c3 = c1 + 1;\r\n\r\n    return 1 + c3 * pow(x - 1, 3) + c1 * pow(x - 1, 2);\r\n  },\r\n  circInOut: (x: number): number => (x < 0.5\r\n    ? (1 - sqrt(1 - pow(2 * x, 2))) / 2\r\n    : (sqrt(1 - pow(-2 * x + 2, 2)) + 1) / 2),\r\n  backInOut: (x: number): number => {\r\n    const c1 = 1.70158;\r\n    const c2 = c1 * 1.525;\r\n\r\n    return x < 0.5\r\n      ? (pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2)) / 2\r\n      : (pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2;\r\n  },\r\n  elasticIn: (x: number): number => {\r\n    const c4 = (2 * pi) / 3;\r\n\r\n    return x === 0\r\n      ? 0\r\n      : x === 1\r\n        ? 1\r\n        : -pow(2, 10 * x - 10) * sin((x * 10 - 10.75) * c4);\r\n  },\r\n  elasticOut: (x: number): number => {\r\n    const c4 = (2 * pi) / 3;\r\n\r\n    return x === 0\r\n      ? 0\r\n      : x === 1\r\n        ? 1\r\n        : pow(2, -10 * x) * sin((x * 10 - 0.75) * c4) + 1;\r\n  },\r\n  bounceIn: (x: number): number => 1 - bounceOut(1 - x),\r\n  bounceOut: bounceOut,\r\n  elasticInOut: (x: number): number => {\r\n    const c5 = (2 * pi) / 4.5;\r\n\r\n    return x === 0\r\n      ? 0\r\n      : x === 1\r\n        ? 1\r\n        : x < 0.5\r\n          ? -(pow(2, 20 * x - 10) * sin((20 * x - 11.125) * c5)) / 2\r\n          : (pow(2, -20 * x + 10) * sin((20 * x - 11.125) * c5)) / 2 + 1;\r\n  },\r\n  bounceInOut: (x: number): number => (x < 0.5\r\n    ? (1 - bounceOut(1 - 2 * x)) / 2\r\n    : (1 + bounceOut(2 * x - 1)) / 2)\r\n};"],"mappings":"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","names":[]}