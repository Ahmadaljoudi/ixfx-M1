{"version":3,"sources":["../src/Random.ts"],"sourcesContent":["import { randomIndex, randomElement } from \"./collections/Arrays.js\";\r\nimport {number as guardNumber} from './Guards.js';\r\nimport * as Easings from \"./modulation/Easing.js\";\r\nimport {clamp} from \"./Util.js\";\r\nexport {randomIndex as arrayIndex};\r\nexport {randomElement as arrayElement};\r\n\r\n/**\r\n * Returns a random number between `min-max` weighted such that values closer to `min`\r\n * occur more frequently\r\n * @param min \r\n * @param max \r\n * @returns \r\n */\r\n// export const weighted2 = (min: number, max: number) => {\r\n//   const r = Math.random() * max;// + min;\r\n//   const x = Math.round(max/r);\r\n//   if (x > max) {\r\n//     console.log(`r: ${r} x: ${x} min: ${min} max: ${max}`);\r\n//   }\r\n//   return x;\r\n// };\r\n\r\n/**\r\n * Random integer, weighted according to an easing function.\r\n * Number will be inclusive of `min` and below `max`.\r\n * \r\n * ```js\r\n * // If only one parameter is provided, it's assumed to be the max:\r\n * // Random number that might be 0 through to 99\r\n * const r = weightedInteger(100);\r\n * \r\n * // If two numbers are given, it's assumed to be min, max\r\n * // Random number that might be 20 through to 29\r\n * const r = weightedInteger(20,30);\r\n * \r\n * // One number and string. First param is assumed to be\r\n * // the max, second parameter the easing function\r\n * const r = weightedInteger(100, `minOrMax`)\r\n * ```\r\n * \r\n * Note: result from easing function will be clamped to\r\n * the min/max (by default 0-1);\r\n * \r\n * @param max Maximum (exclusive)\r\n * @param min Minimum number (inclusive), 0 by default\r\n * @param easing Easing to use, uses `quadIn` by default\r\n * @returns \r\n */\r\nexport const weightedInteger = (minOrMax:number, maxOrEasing?:number|Easings.EasingName, easing?:Easings.EasingName) => {\r\n  // Unit tested - for ranges and params types. Haven't tested easing distribution\r\n\r\n  guardNumber(minOrMax);\r\n  //eslint-disable-next-line functional/no-let\r\n  let min, max, easingName;\r\n  easingName = `quadIn`;\r\n  min = 0;\r\n\r\n  if (maxOrEasing === undefined) {\r\n    // No second parameter\r\n    max = minOrMax;\r\n  } else {\r\n    // There is a second parameter\r\n    if (typeof maxOrEasing === `number`) {\r\n      min = minOrMax;\r\n      max = maxOrEasing;\r\n      if (easing !== undefined) easingName = easing;\r\n    } else if (typeof maxOrEasing === `string`) {\r\n      max = minOrMax;\r\n      easingName = maxOrEasing;\r\n    } else {\r\n      throw new Error(`Unexpected value type for maxOrEasing: ${maxOrEasing}`);\r\n    }\r\n  }\r\n  \r\n  if (easing !== undefined) easingName = easing;\r\n\r\n  const easingFn = Easings.get(easingName as Easings.EasingName);\r\n  if (easingFn === undefined) throw new Error(`Easing '${easingName}' not found`);\r\n\r\n  guardNumber(min);\r\n  if (max <= min) throw new Error(`Max should be greater than min`);\r\n  const r = clamp(easingFn(Math.random()));\r\n  return Math.floor(r * (max-min)) + min;\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiDO,IAAM,kBAAkB,CAAC,UAAiB,aAAwC,WAA+B;AAGtH,SAAY,QAAQ;AAEpB,MAAI,KAAK,KAAK;AACd,eAAa;AACb,QAAM;AAEN,MAAI,gBAAgB,QAAW;AAE7B,UAAM;AAAA,EACR,OAAO;AAEL,QAAI,OAAO,gBAAgB,UAAU;AACnC,YAAM;AACN,YAAM;AACN,UAAI,WAAW;AAAW,qBAAa;AAAA,IACzC,WAAW,OAAO,gBAAgB,UAAU;AAC1C,YAAM;AACN,mBAAa;AAAA,IACf,OAAO;AACL,YAAM,IAAI,MAAM,0CAA0C,aAAa;AAAA,IACzE;AAAA,EACF;AAEA,MAAI,WAAW;AAAW,iBAAa;AAEvC,QAAM,WAAW,AAAQ,IAAI,UAAgC;AAC7D,MAAI,aAAa;AAAW,UAAM,IAAI,MAAM,WAAW,uBAAuB;AAE9E,SAAY,GAAG;AACf,MAAI,OAAO;AAAK,UAAM,IAAI,MAAM,gCAAgC;AAChE,QAAM,IAAI,MAAM,SAAS,KAAK,OAAO,CAAC,CAAC;AACvC,SAAO,KAAK,MAAM,IAAK,OAAI,IAAI,IAAI;AACrC;","names":[]}