{"version":3,"sources":["../src/collections/Arrays.ts","../src/collections/NumericArrays.ts"],"sourcesContent":["/**\r\n * Functions for working with primitive arrays, regardless of type\r\n * See Also: NumericArrays.ts\r\n */\r\n\r\nimport {IsEqual, isEqualDefault} from '../Util.js';\r\n\r\nexport * from './NumericArrays.js';\r\n\r\n/**\r\n * Throws an error if `array` parameter is not a valid array\r\n * @private\r\n * @param array \r\n * @param paramName \r\n */\r\nexport const guardArray = <V>(array:ArrayLike<V>, paramName:string = `?`) => {\r\n  if (array === undefined) throw new Error(`Param '${paramName}' is undefined. Expected array.`);\r\n  if (array === null) throw new Error(`Param '${paramName}' is null. Expected array.`);\r\n  if (!Array.isArray(array)) throw new Error(`Param '${paramName}' not an array as expected`);\r\n};\r\n\r\n/**\r\n * Returns a random array index\r\n * @param array\r\n * @returns \r\n */\r\nexport const randomIndex = <V>(array: ArrayLike<V>): number => Math.floor(Math.random() * array.length);\r\n\r\n/**\r\n * Returns random element\r\n * @param array\r\n * @returns \r\n */\r\nexport const randomElement = <V>(array: ArrayLike<V>): V => {\r\n  guardArray(array, `array`);\r\n  return array[Math.floor(Math.random() * array.length)];\r\n};\r\n\r\n/**\r\n * Removes a random item from an array, returning both the item and the new array as a result.\r\n * Does not modify the original array unless `mutate` parameter is true.\r\n * \r\n * @example Without changing source\r\n * ```js\r\n * const data = [100, 20, 40];\r\n * const {value, array} = randomPluck(data);\r\n * // value: 20, array: [100, 40], data: [100, 20, 40];\r\n * ```\r\n *\r\n * @example Mutating source\r\n * ```js\r\n * const data = [100, 20, 40];\r\n * const {value} = randomPluck(data, true);\r\n * // value: 20, data: [100, 40];\r\n * ```\r\n * \r\n * @template V Type of array\r\n * @param array Array to pluck item from\r\n * @param mutate If _true_, changes input array. _False_ by default.\r\n * @return Returns an object `{value:V|undefined, array:V[]}`\r\n */\r\n//eslint-disable-next-line functional/prefer-readonly-type\r\nexport const randomPluck = <V>(array:readonly V[], mutate = false):{readonly value:V|undefined, readonly array:Array<V> } => {\r\n  if (array === undefined) throw new Error(`array is undefined`);\r\n  if (!Array.isArray(array)) throw new Error(`'array' param is not an array`);\r\n  if (array.length === 0) return {value: undefined, array: []};\r\n  const index = randomIndex(array);\r\n  if (mutate) {\r\n    return {\r\n      value: array[index],\r\n      //eslint-disable-next-line functional/immutable-data\r\n      array: array.splice(index, 1)\r\n    };\r\n  } else {\r\n    // Copy array, remove item from that\r\n    const t = [...array];\r\n    //eslint-disable-next-line functional/immutable-data\r\n    t.splice(index, 1);\r\n    return {\r\n      value: array[index],\r\n      array: t\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Returns a shuffled copy of the input array.\r\n * @example\r\n * ```js\r\n * const d = [1, 2, 3, 4];\r\n * const s = shuffle(d);\r\n * // d: [1, 2, 3, 4], s: [3, 1, 2, 4]\r\n * ```\r\n * @param dataToShuffle \r\n * @returns Copy with items moved around randomly\r\n * @template V Type of array items\r\n */\r\nexport const shuffle = <V>(dataToShuffle:ReadonlyArray<V>): ReadonlyArray<V> => {\r\n  const array = [...dataToShuffle];\r\n  // eslint-disable-next-line functional/no-loop-statement, functional/no-let\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n};\r\n\r\n/**\r\n * Returns an array with a value omitted. If value is not found, result will be a copy of input.\r\n * Value checking is completed via the provided `comparer` function, or by default checking whether `a === b`.\r\n *\r\n * @example\r\n * ```js\r\n * const data = [100, 20, 40];\r\n * const filtered = without(data, 20); // [100, 40]\r\n * ```\r\n * @template V Type of array items\r\n * @param data Source array\r\n * @param value Value to remove\r\n * @param comparer Comparison function. If not provided {@link isEqualDefault} is used, which compares using `===`\r\n * @return Copy of array without value.\r\n */\r\nexport const without = <V>(data:ReadonlyArray<V>, value:V, comparer:IsEqual<V> = isEqualDefault):ReadonlyArray<V> => data.filter(v => !comparer(v, value));\r\n\r\n/**\r\n * Groups data by a grouper function, returning data as a map with string\r\n * keys and array values.\r\n * \r\n * @example\r\n * ```js\r\n * const data = [\r\n *  { age: 39, city: `London` }\r\n *  { age: 14, city: `Copenhagen` }\r\n *  { age: 23, city: `Stockholm` }\r\n *  { age: 56, city: `London` }\r\n * ];\r\n * const map = groupBy(data, item => data.city); \r\n * ```\r\n * \r\n * Returns a map: \r\n * \r\n * London: [{ age: 39, city: `London` }, { age: 56, city: `London` }]\r\n * Stockhom: [{ age: 23, city: `Stockholm` }]\r\n * Copenhagen: [{ age: 14, city: `Copenhagen` }]\r\n * \r\n * @param array Array to group\r\n * @param grouper Function that returns a key for a given item\r\n * @template K Type of key to group by. Typically string.\r\n * @template V Type of values\r\n * @returns Map \r\n */\r\nexport const groupBy = <K, V>(array: ReadonlyArray<V>, grouper: (item: V) => K) => array.reduce((store, item) => {\r\n  const key = grouper(item);\r\n  const val = store.get(key);\r\n  if (val === undefined) {\r\n    store.set(key, [item]);\r\n  } else {\r\n    // eslint-disable-next-line functional/immutable-data\r\n    val.push(item);\r\n  }\r\n  return store;\r\n  /* eslint-disable-next-line functional/prefer-readonly-type */\r\n}, new Map<K, V[]>());","/**\r\n * Calculates the average of all numbers in an array.\r\n * Array items which aren't a valid number are ignored and do not factor into averaging.\r\n *\r\n * Use {@link minMaxAvg} if you want min, max and total as well.\r\n * \r\n * @example\r\n * ```\r\n * // Average of a list\r\n * const avg = average(1, 1.4, 0.9, 0.1);\r\n * \r\n * // Average of a variable\r\n * let data = [100,200];\r\n * average(...data);\r\n * ```\r\n * @param data Data to average.\r\n * @returns Average of array\r\n */\r\nexport const average = (...data: readonly number[]): number => {\r\n  // âœ” UNIT TESTED\r\n  if (data === undefined) throw new Error(`data parameter is undefined`);\r\n\r\n  //const total = data.reduce((acc, v) => acc+v, 0);\r\n  const validNumbers = data.filter(d => typeof d === `number` && !Number.isNaN(d));\r\n  const total = validNumbers.reduce((acc, v) => acc + v, 0);\r\n  return total / validNumbers.length;\r\n};\r\n\r\n/**\r\n * Returns the minimum number out of `data`.\r\n * Undefined and non-numbers are silently ignored.\r\n * @param data\r\n * @returns Minimum number\r\n */\r\nexport const min = (...data:readonly number[]):number => {\r\n  const validNumbers = data.filter(d => typeof d === `number` && !Number.isNaN(d));\r\n  return Math.min(...validNumbers);\r\n};\r\n\r\n/**\r\n * Returns the minimum number out of `data`.\r\n * Undefined and non-numbers are silently ignored.\r\n * @param data\r\n * @returns Minimum number\r\n */\r\nexport const max = (...data:readonly number[]):number => {\r\n  const validNumbers = data.filter(d => typeof d === `number` && !Number.isNaN(d));\r\n  return Math.max(...validNumbers);\r\n};\r\n\r\n/**\r\n * Returns the min, max, avg and total of the array.\r\n * Any values that are invalid are silently skipped over.\r\n * \r\n * Use {@link average} if you only need average\r\n * \r\n * @param data \r\n * @returns `{min, max, avg, total}`\r\n */\r\nexport const minMaxAvg = (data: readonly number[]): {\r\n  /**\r\n   * Smallest value in array\r\n   */\r\n  readonly min: number; \r\n  /**\r\n   * Total of all items\r\n   */\r\n  readonly total: number; \r\n  /**\r\n   * Largest value in array\r\n   */\r\n  readonly max: number; \r\n  /**\r\n   * Average value in array\r\n   */\r\n  readonly avg: number;} => {\r\n  const validNumbers = data.filter(d => typeof d === `number` && !Number.isNaN(d));\r\n  const total = validNumbers.reduce((acc, v) => acc + v, 0);\r\n  return {\r\n    total: total,\r\n    max: Math.max(...validNumbers),\r\n    min: Math.min(...validNumbers),\r\n    avg: total / validNumbers.length\r\n  };\r\n};"],"mappings":"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","names":[]}