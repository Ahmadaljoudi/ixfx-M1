{"version":3,"sources":["../src/flow/Timer.ts"],"sourcesContent":["import {integer as guardInteger} from '../Guards.js';\r\nimport {clamp} from '../Util.js';\r\n\r\n/**\r\n * Creates a timer\r\n * @private\r\n */\r\nexport type TimerSource = () => Timer;\r\n \r\n/**\r\n * A timer instance\r\n * @private\r\n */\r\nexport type Timer = {\r\n  reset(): void\r\n  get elapsed(): number\r\n}\r\n\r\nexport type ModTimer = Timer & {\r\n  mod(amt:number):void\r\n}\r\n/**\r\n * @private\r\n */\r\nexport type HasCompletion = {\r\n  get isDone(): boolean;\r\n}\r\n\r\n/**\r\n * A resettable timeout, returned by {@link timeout}\r\n */\r\nexport type Timeout = HasCompletion & {\r\n  start(altTimeoutMs?: number, args?:readonly unknown[]): void;\r\n  cancel(): void;\r\n  get isDone(): boolean;\r\n}\r\n\r\n/**\r\n * Creates a debounce function\r\n * ```js\r\n * // Create\r\n * const d = debounce(fn, 1000);\r\n * \r\n * // Use\r\n * d(); // Only calls fn after 1000s\r\n * ```\r\n * \r\n * @example Handle most recent pointermove event after 1000ms\r\n * ```js\r\n * // Set up debounced handler\r\n * const moveDebounced = debounce((evt) => {\r\n *    // Handle event\r\n * }, 500);\r\n * \r\n * // Wire up event\r\n * el.addEventListener(`pointermove`, moveDebounced);\r\n * ```\r\n * @param callback \r\n * @param timeoutMs \r\n * @returns \r\n */\r\nexport const debounce = (callback:()=> void, timeoutMs:number) => {\r\n  const t = timeout(callback, timeoutMs);\r\n  return (...args:unknown[]) => t.start(undefined, args);\r\n};\r\n\r\n/***\r\n * Throttles an function. Callback only triggered after minimum of `intervalMinMs`.\r\n * \r\n * @example Only handle move event every 500ms\r\n * ```js\r\n * const moveThrottled = throttle( (elapsedMs, args) => {\r\n *  // Handle ar\r\n * }, 500);\r\n * el.addEventListener(`pointermove`, moveThrottled)\r\n * ```\r\n */\r\nexport const throttle = (callback:(elapsedMs:number, ...args:readonly unknown[]) => void, intervalMinMs:number) => {\r\n  //eslint-disable-next-line functional/no-let\r\n  let trigger = 0;\r\n\r\n  return (...args:unknown[]) => {\r\n    const elapsed = performance.now()-trigger; \r\n    if (elapsed >= intervalMinMs) {\r\n      callback(elapsed, ...args);\r\n      trigger = performance.now();\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Generates values from `produce` with `intervalMs` time delay\r\n * \r\n * @example Produce a random number every 500ms:\r\n * ```\r\n * const randomGenerator = interval(() => Math.random(), 1000);\r\n * for await (const r of randomGenerator) {\r\n *  // Random value every 1 second\r\n * }\r\n * ```\r\n *\r\n * @template V\r\n * @param intervalMs Interval between execution\r\n * @param produce Function to call\r\n * @template V Data type\r\n * @returns\r\n */\r\nexport const interval = async function*<V>(produce: () => Promise<V>, intervalMs: number) {\r\n  //eslint-disable-next-line functional/no-let\r\n  let cancelled = false;\r\n  //eslint-disable-next-line functional/no-try-statement\r\n  try {\r\n    //eslint-disable-next-line functional/no-loop-statement\r\n    while (!cancelled) {\r\n      await sleep(intervalMs);\r\n      if (cancelled) return;\r\n      yield await produce();\r\n    }\r\n  } finally {\r\n    cancelled = true;\r\n  }\r\n};\r\n\r\n/**\r\n * Returns a {@link Timeout} that can be triggered, cancelled and reset\r\n *  \r\n * Once `start()` is called, `callback` will be scheduled to execute after `timeoutMs`.\r\n * If `start()` is called again, the waiting period will be reset to `timeoutMs`.\r\n * \r\n * @example Essential functionality\r\n * ```js\r\n * const fn = () => {\r\n *  console.log(`Executed`);\r\n * };\r\n * const t = timeout(fn, 60*1000); \r\n * t.start();   // After 1 minute `fn` will run, printing to the console\r\n * ```\r\n * \r\n * @example Control execution functionality\r\n * ```\r\n * t.cancel();  // Cancel it from running\r\n * t.start();   // Schedule again after 1 minute\r\n * t.start(30*1000); // Cancel that, and now scheduled after 30s\r\n * t.isDone;    // True if a scheduled event is pending\r\n * ```\r\n * \r\n * Callback function receives any additional parameters passed in from start.\r\n * This can be useful for passing through event data:\r\n * \r\n * @example\r\n * ```js\r\n * const t = timeout( (elapsedMs, ...args) => {\r\n *  // args contains event data\r\n * }, 1000);\r\n * el.addEventListener(`click`, t.start);\r\n * ```\r\n * \r\n * @param callback \r\n * @param timeoutMs \r\n * @returns {@link Timeout}\r\n */\r\nexport const timeout = (callback:(elapsedMs?:number, ...args:readonly unknown[])=>void, timeoutMs:number):Timeout => {\r\n  if (callback === undefined) throw new Error(`callback parameter is undefined`);\r\n  guardInteger(timeoutMs, `aboveZero`, `timeoutMs`);\r\n\r\n  //eslint-disable-next-line functional/no-let\r\n  let timer = 0;\r\n  //eslint-disable-next-line functional/no-let\r\n  let startedAt = 0;\r\n\r\n  const start = (altTimeoutMs:number = timeoutMs, ...args:unknown[]) => {\r\n    startedAt = performance.now();\r\n    guardInteger(altTimeoutMs, `aboveZero`, `altTimeoutMs`);\r\n    if (timer !== 0) cancel();\r\n    timer = window.setTimeout(() => {\r\n      callback(performance.now() - startedAt, ...args);\r\n      timer = 0;\r\n    }, altTimeoutMs);\r\n  };\r\n\r\n  const cancel = () => {\r\n    if (timer === 0) return;\r\n    startedAt = 0;\r\n    window.clearTimeout(timer);\r\n  };\r\n\r\n  return {\r\n    start,\r\n    cancel,\r\n    get isDone() {\r\n      return timer !== 0;\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Runs a function continuously, returned by {@link Continuously}\r\n */\r\nexport type Continuously = HasCompletion & {\r\n  /**\r\n   * Starts loop. If already running, it is reset\r\n   */\r\n  start(): void\r\n  /**\r\n   * How many milliseconds since start() was last called\r\n   */\r\n  get elapsedMs(): number\r\n  /**\r\n   * How many iterations of the loop since start() was last called\r\n   */\r\n  get ticks(): number\r\n  /**\r\n   * Whether loop has finished\r\n   */\r\n  get isDone(): boolean\r\n  /**\r\n   * Stops loop\r\n   */\r\n  cancel(): void\r\n}\r\n\r\n\r\n/**\r\n * Returns a {@link Continuously} that continuously executes `callback`. If callback returns _false_, loop exits.\r\n * \r\n * Call `start` to begin/reset loop. `cancel` stops loop.\r\n * \r\n * @example Animation loop\r\n * ```js\r\n * const draw = () => {\r\n *  // Draw on canvas\r\n * }\r\n * continuously(draw).start(); // Run draw as fast as possible using `window.requestAnimationFrame` \r\n * ```\r\n * \r\n * @example With delay\r\n * ```js\r\n * const fn = () => {\r\n *  console.log(`1 minute`);\r\n * }\r\n * const c = continuously(fn, 60*1000);\r\n * c.start(); // Runs `fn` every minute\r\n * ```\r\n * \r\n * ```js\r\n * c.cancel();\r\n * c.elapsedMs;  // How many milliseconds have elapsed since start\r\n * c.ticks;      // How many iterations of loop since start\r\n * ```\r\n * @param callback Function to run. If it returns false, loop exits.\r\n * @param resetCallback Callback when/if loop is reset. If it returns false, loop exits\r\n * @param intervalMs \r\n * @returns \r\n */\r\nexport const continuously = (callback:(ticks?:number, elapsedMs?:number)=>boolean|void, intervalMs?:number, resetCallback?:((ticks?:number, elapsedMs?:number) => boolean|void)):Continuously => {\r\n  if (intervalMs !== undefined) guardInteger(intervalMs, `positive`, `intervalMs`);\r\n\r\n  //eslint-disable-next-line functional/no-let\r\n  let running = false;\r\n  //eslint-disable-next-line functional/no-let\r\n  let ticks = 0;\r\n  //eslint-disable-next-line functional/no-let\r\n  let startedAt = performance.now();\r\n  const schedule = (intervalMs === undefined || intervalMs === 0) ? (cb:()=>void) => window.requestAnimationFrame(cb) : (cb:()=>void) => window.setTimeout(cb, intervalMs);\r\n  const cancel = () => {\r\n    if (!running) return;\r\n    running = false;\r\n    ticks = 0;\r\n  };\r\n\r\n  const loop = () => {\r\n    //console.log(`loop`);\r\n    if (!running) return;\r\n    const r = callback(ticks++, performance.now() - startedAt);\r\n    if (r !== undefined && !r) {\r\n      cancel();\r\n      return;\r\n    }\r\n\r\n    schedule(loop);\r\n  };\r\n\r\n  const start = () => {\r\n    // Already running, but theres a resetCallback to check if we should keep going\r\n    if (running && resetCallback !== undefined) {\r\n      const r = resetCallback(ticks, performance.now() - startedAt);\r\n      startedAt = performance.now();\r\n      if (r !== undefined && !r) {\r\n        // Reset callback tells us to stop\r\n        cancel();\r\n        return; // Skip starting again\r\n      } \r\n    } else if (running) {\r\n      return; // already running\r\n    }\r\n\r\n    // Start running\r\n    running = true;\r\n    schedule(loop);\r\n  };\r\n\r\n  return {\r\n    start,\r\n    get isDone() {\r\n      return running;\r\n    },\r\n    get ticks() {\r\n      return ticks;\r\n    },\r\n    get elapsedMs() {\r\n      return performance.now() - startedAt;\r\n    },\r\n    cancel\r\n  };\r\n};\r\n\r\n/**\r\n * Pauses execution for `timeoutMs`.\r\n * \r\n * @example\r\n * ```js\r\n * console.log(`Hello`);\r\n * await sleep(1000);\r\n * console.log(`There`); // Prints one second after\r\n * ```\r\n * @param timeoutMs\r\n * @return\r\n */\r\nexport const sleep = <V>(timeoutMs: number): Promise<V> => new Promise<V>(resolve => setTimeout(resolve, timeoutMs));\r\n\r\n/**\r\n * Pauses execution for `timeoutMs` after which the asynchronous `callback` is executed and awaited.\r\n * \r\n * @example\r\n * ```js\r\n * const result = await delay(async () => Math.random(), 1000);\r\n * console.log(result); // Prints out result after one second\r\n * ```\r\n * @template V\r\n * @param callback\r\n * @param timeoutMs\r\n * @return\r\n */\r\nexport const delay = async <V>(callback:() => Promise<V>, timeoutMs: number): Promise<V> =>  {\r\n  guardInteger(timeoutMs, `aboveZero`, `timeoutMs`);\r\n  await sleep(timeoutMs);\r\n  return Promise.resolve(await callback());\r\n};\r\n\r\n\r\n/**\r\n * Wraps a timer, returning a relative elapsed value.\r\n * \r\n * ```js\r\n * let t = relativeTimer(1000, msElapsedTimer());\r\n * ```\r\n * \r\n * @private\r\n * @param total \r\n * @param timer \r\n * @param clampValue If true, returned value never exceeds 1.0 \r\n * @returns \r\n */\r\nexport const relativeTimer = (total:number, timer: Timer, clampValue = true):ModTimer & HasCompletion => {\r\n  //eslint-disable-next-line functional/no-let\r\n  let done = false;\r\n  //eslint-disable-next-line functional/no-let\r\n  let modAmt = 1;\r\n\r\n  return {\r\n    mod(amt:number) {\r\n      modAmt = amt;\r\n    },\r\n    get isDone() {\r\n      return done;\r\n    },\r\n    reset:() => {\r\n      done = false;\r\n      timer.reset();\r\n    },\r\n    get elapsed() {\r\n      //eslint-disable-next-line functional/no-let\r\n      let v = timer.elapsed / (total * modAmt);\r\n      if (clampValue) v = clamp(v);\r\n      if (v >= 1) done = true;\r\n      return v;\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const frequencyTimerSource = (frequency:number):TimerSource => () => frequencyTimer(frequency, msElapsedTimer());\r\n  \r\nexport const frequencyTimer = (frequency:number, timer:Timer = msElapsedTimer()):ModTimer => {\r\n  const cyclesPerSecond = frequency/1000;\r\n  //eslint-disable-next-line functional/no-let\r\n  let modAmt = 1;\r\n  return {\r\n    mod:(amt:number) => {\r\n      modAmt = amt;\r\n    },\r\n    reset:() => {\r\n      timer.reset();\r\n    },\r\n    get elapsed() {\r\n      // Get position in a cycle\r\n      const v = timer.elapsed * (cyclesPerSecond * modAmt);\r\n\r\n      // Get fractional part\r\n      const f = v - Math.floor(v);\r\n      if (f < 0) throw new Error(`Unexpected cycle fraction less than 0. Elapsed: ${v} f: ${f}`);\r\n      if (f > 1) throw new Error(`Unexpected cycle fraction more than 1. Elapsed: ${v} f: ${f}`);\r\n      return f;\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * A timer that uses clock time\r\n * @private\r\n * @returns {Timer}\r\n */\r\nexport const msElapsedTimer = (): Timer => {\r\n  // eslint-disable-next-line functional/no-let\r\n  let start = performance.now();\r\n  return {\r\n    reset: () => {\r\n      start = performance.now();\r\n    },\r\n    get elapsed() {\r\n      return performance.now() - start;\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * A timer that progresses with each call\r\n * @private\r\n * @returns {Timer}\r\n */\r\nexport const ticksElapsedTimer = (): Timer => {\r\n  // eslint-disable-next-line functional/no-let\r\n  let start = 0;\r\n  return {\r\n    reset: () => {\r\n      start = 0;\r\n    },\r\n    get elapsed() { return start++; }\r\n  };\r\n};"],"mappings":"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","names":[]}