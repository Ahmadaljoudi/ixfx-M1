{"version":3,"sources":["../src/collections/Map.ts"],"sourcesContent":["import {IsEqual, ToString} from \"../Util.js\";\r\n\r\n// âœ” UNIT TESTED!\r\n\r\n/**\r\n * Returns true if map contains `value` under `key`, using `comparer` function. Use {@link hasAnyValue} if you don't care\r\n * what key value might be under.\r\n * \r\n * Having a comparer function is useful to check by value rather than object reference.\r\n * \r\n * @example Find key value based on string equality\r\n * ```js\r\n * hasKeyValue(map,`hello`, `samantha`, (a, b) => a === b);\r\n * ```\r\n * @param map Map to search\r\n * @param key Key to search\r\n * @param value Value to search\r\n * @param comparer Function to determine match\r\n * @returns True if key is found\r\n */\r\nexport const hasKeyValue = <K, V>(map:ReadonlyMap<K, V>, key:K, value:V, comparer:IsEqual<V>):boolean => {\r\n  if (!map.has(key)) return false;\r\n  const values = Array.from(map.values());\r\n  return values.some(v => comparer(v, value));\r\n};\r\n\r\n/**\r\n * Adds items to a map only if their key doesn't already exist \r\n * \r\n * Uses provided {@link ToString} function to create keys for items. Item is only added if it doesn't already exist.\r\n * Thus the older item wins out, versus normal `Map.set` where the newest wins.\r\n * \r\n * \r\n * @example\r\n * ```js\r\n * const map = new Map();\r\n * const peopleArray = [ _some people objects..._];\r\n * addUniqueByHash(map, p => p.name, ...peopleArray);\r\n * ```\r\n * @param set \r\n * @param hashFunc \r\n * @param values \r\n * @returns \r\n */\r\nexport const addUniqueByHash = <V>(set:ReadonlyMap<string, V>|undefined, hashFunc: ToString<V>, ...values:readonly V[]) => {\r\n  const s = set === undefined ? new Map() : new Map(set);\r\n  values.forEach(v => {\r\n    const vStr = hashFunc(v);\r\n    if (s.has(vStr)) return;\r\n    s.set(vStr, v);\r\n  });\r\n  return s;\r\n};\r\n\r\n\r\n/**\r\n * Returns true if _any_ key contains `value`, based on the provided `comparer` function. Use {@link hasKeyValue}\r\n * if you only want to find a value under a certain key.\r\n * \r\n * Having a comparer function is useful to check by value rather than object reference.\r\n * @example Finds value `samantha`, using string equality to match\r\n * ```js\r\n * hasAnyValue(map, `samantha`, (a, b) => a === b);\r\n * ```\r\n * @param map Map to search\r\n * @param value Value to find\r\n * @param comparer Function that determines matching\r\n * @returns True if value is found\r\n */\r\nexport const hasAnyValue = <K, V>(map:ReadonlyMap<K, V>, value:V, comparer:IsEqual<V>):boolean => {\r\n  const entries = Array.from(map.entries());\r\n  return entries.some(kv => comparer(kv[1], value));\r\n};\r\n\r\n/**\r\n * Returns items where `predicate` returns true.\r\n * \r\n * If you just want the first match, use `find`\r\n * \r\n * @example All people over thirty\r\n * ```js\r\n * const overThirty = filter(people, person => person.age > 30);\r\n * ```\r\n * @param map Map\r\n * @param predicate Filtering predicate \r\n * @returns Values that match predicate\r\n */\r\nexport const filter = <V>(map:ReadonlyMap<string, V>, predicate:(v:V) => boolean):ReadonlyArray<V> => Array.from(map.values()).filter(predicate);\r\n\r\n/**\r\n * Copies data to an array\r\n * @param map \r\n * @returns \r\n */\r\nexport const toArray = <V>(map:ReadonlyMap<string, V>):ReadonlyArray<V> => Array.from(map.values());\r\n\r\n/**\r\n * Returns the first found item that matches `predicate` or undefined.\r\n * \r\n * If you want all matches, use `filter`.\r\n * \r\n * @example First person over thirty\r\n * ```js\r\n * const overThirty = find(people, person => person.age > 30);\r\n * ```\r\n * @param map \r\n * @param predicate \r\n * @returns Found item or undefined\r\n */\r\nexport const find = <V>(map:ReadonlyMap<string, V>, predicate:(v:V) => boolean):V|undefined =>  Array.from(map.values()).find(vv => predicate(vv));\r\n\r\n// export const without = <V>(map:ReadonlyMap<string, V>, value:V): ReadonlyMap<string,V> => {\r\n//   source.toArray().filter(v => hash(v) !== hash(value))\r\n// }\r\n\r\n//#region Functions by Kees C. Bakker\r\n// Functions by Kees C. Bakker\r\n// https://keestalkstech.com/2021/10/having-fun-grouping-arrays-into-maps-with-typescript/\r\n\r\n/**\r\n * Like `Array.map`, but for a Map. Transforms from Map<K,V> to Map<K,R>\r\n * \r\n * @example\r\n * ```js\r\n * // Convert a map of string->string to string->number\r\n * transformMap<string, string, number>(mapOfStrings, (value, key) => parseInt(value));\r\n * ```\r\n * @param source \r\n * @param transformer \r\n * @returns \r\n */\r\nexport const transformMap = <K, V, R>(\r\n  source: ReadonlyMap<K, V>,\r\n  transformer: (value: V, key: K) => R\r\n) => new Map(\r\n    Array.from(source, v => [v[0], transformer(v[1], v[0])])\r\n  );\r\n\r\n/**\r\n * Zips together an array of keys and values into an object. Requires that \r\n * `keys` and `values` are the same length.\r\n * \r\n * @example\r\n * ```js\r\n * const o = zipKeyValue([`a`, `b`, `c`], [0, 1, 2])\r\n * Yields: { a: 0, b: 1, c: 2}\r\n *```\r\n  * @template V\r\n  * @param keys\r\n  * @param values\r\n  * @return \r\n  */\r\nexport const zipKeyValue = <V>(keys:ReadonlyArray<string>, values:ArrayLike<V|undefined>) => {\r\n  if (keys.length !== values.length) throw new Error(`Keys and values arrays should be same length`);\r\n  return Object.fromEntries(keys.map((k, i) => [k, values[i]]));\r\n};\r\n\r\n/**\r\n * Converts a `Map` to a plain object, useful for serializing to JSON\r\n * \r\n * @example\r\n * ```js\r\n * const str = JSON.stringify(mapToObj(map));\r\n * ```\r\n * @param m \r\n * @returns \r\n */\r\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\r\nexport const mapToObj = <T>(m: ReadonlyMap<string, T>): { readonly [key: string]: T} => Array.from(m).reduce((obj: any, [key, value]) => {\r\n  /* eslint-disable-next-line functional/immutable-data */\r\n  obj[key] = value;\r\n  return obj;\r\n}, {});\r\n\r\n/**\r\n * Converts Map<K,V> to Array<R> with a provided `transformer`\r\n * \r\n * @example Get a list of ages from a map of Person objects\r\n * ```js\r\n * let person = { age: 29, name: `John`};\r\n * map.add(person.name, person);\r\n * const ages = mapToArray<string, People, number>(map, (key, person) => person.age);\r\n * // [29, ...]\r\n * ```\r\n * @param m \r\n * @param transformer \r\n * @returns \r\n */\r\nexport const mapToArray = <K, V, R>(\r\n  m: ReadonlyMap<K, V>,\r\n  transformer: (key: K, item: V) => R\r\n):readonly R[] => Array.from(m.entries()).map(x => transformer(x[0], x[1]));\r\n// End Functions by Kees C. Bakker\r\n//#endregion\r\n"],"mappings":";;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBO,IAAM,cAAc,CAAO,KAAuB,KAAO,OAAS,aAAgC;AACvG,MAAI,CAAC,IAAI,IAAI;AAAM,WAAO;AAC1B,QAAM,SAAS,MAAM,KAAK,IAAI;AAC9B,SAAO,OAAO,KAAK,OAAK,SAAS,GAAG;AAAA;AAqB/B,IAAM,kBAAkB,CAAI,KAAsC,aAA0B,WAAwB;AACzH,QAAM,IAAI,QAAQ,SAAY,oBAAI,QAAQ,IAAI,IAAI;AAClD,SAAO,QAAQ,OAAK;AAClB,UAAM,OAAO,SAAS;AACtB,QAAI,EAAE,IAAI;AAAO;AACjB,MAAE,IAAI,MAAM;AAAA;AAEd,SAAO;AAAA;AAkBF,IAAM,cAAc,CAAO,KAAuB,OAAS,aAAgC;AAChG,QAAM,UAAU,MAAM,KAAK,IAAI;AAC/B,SAAO,QAAQ,KAAK,QAAM,SAAS,GAAG,IAAI;AAAA;AAgBrC,IAAM,SAAS,CAAI,KAA4B,cAAgD,MAAM,KAAK,IAAI,UAAU,OAAO;AAO/H,IAAM,UAAU,CAAI,QAAgD,MAAM,KAAK,IAAI;AAenF,IAAM,OAAO,CAAI,KAA4B,cAA4C,MAAM,KAAK,IAAI,UAAU,KAAK,QAAM,UAAU;AAsBvI,IAAM,eAAe,CAC1B,QACA,gBACG,IAAI,IACL,MAAM,KAAK,QAAQ,OAAK,CAAC,EAAE,IAAI,YAAY,EAAE,IAAI,EAAE;AAiBhD,IAAM,cAAc,CAAI,MAA4B,WAAkC;AAC3F,MAAI,KAAK,WAAW,OAAO;AAAQ,UAAM,IAAI,MAAM;AACnD,SAAO,OAAO,YAAY,KAAK,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO;AAAA;AAcnD,IAAM,WAAW,CAAI,MAA4D,MAAM,KAAK,GAAG,OAAO,CAAC,KAAU,CAAC,KAAK,WAAW;AAEvI,MAAI,OAAO;AACX,SAAO;AAAA,GACN;AAgBI,IAAM,aAAa,CACxB,GACA,gBACgB,MAAM,KAAK,EAAE,WAAW,IAAI,OAAK,YAAY,EAAE,IAAI,EAAE;","names":[]}