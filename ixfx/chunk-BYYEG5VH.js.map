{"version":3,"sources":["../src/visual/Svg.ts","../src/visual/SvgMarkers.ts","../src/visual/SvgElements.ts"],"sourcesContent":["import {CirclePositioned} from \"../geometry/Circle.js\";\r\nimport {markerPrebuilt} from \"./SvgMarkers.js\";\r\nimport * as Lines from \"../geometry/Line.js\";\r\nimport * as Points from \"../geometry/Point.js\";\r\nimport * as Elements from \"./SvgElements.js\";\r\nimport * as Rects from \"~/geometry/Rect.js\";\r\n\r\nexport {Elements};\r\n\r\nexport type MarkerOpts = StrokeOpts & DrawingOpts & {\r\n  readonly id: string,\r\n  readonly markerWidth?: number,\r\n  readonly markerHeight?: number,\r\n  readonly orient?: string,\r\n  readonly viewBox?: string,\r\n  readonly refX?: number,\r\n  readonly refY?: number\r\n}\r\n\r\n/**\r\n * Drawing options\r\n */\r\nexport type DrawingOpts = {\r\n\r\n  /**\r\n   * Style for fill. Eg `black`.\r\n   * @see [fill](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill)\r\n   */\r\n  readonly fillStyle?:string\r\n  /**\r\n   * If true, debug helpers are drawn\r\n   */\r\n  readonly debug?:boolean\r\n\r\n};\r\n\r\nexport type StrokeOpts = {\r\n  /**\r\n   * Line cap\r\n   * @see [stroke-linecap](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap)\r\n   */\r\n  readonly strokeLineCap?: `butt` | `round` | `square`\r\n  /**\r\n   * Width of stroke, eg `2`\r\n   * @see [stroke-width](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-width)\r\n   */\r\n  readonly strokeWidth?:number\r\n  /**\r\n  * Stroke dash pattern, eg `5`\r\n  * @see [stroke-dasharray](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)\r\n  */\r\n  readonly strokeDash?:string\r\n  /**\r\n   * Style for lines. Eg `white`.\r\n   * @see [stroke](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke)\r\n   */\r\n  readonly strokeStyle?:string\r\n}\r\n\r\n/**\r\n * Line drawing options\r\n */\r\nexport type LineDrawingOpts = DrawingOpts & MarkerDrawingOpts & StrokeOpts;\r\n\r\nexport type CircleDrawingOpts = DrawingOpts & StrokeOpts & MarkerDrawingOpts;\r\n\r\nexport type PathDrawingOpts = DrawingOpts & StrokeOpts & MarkerDrawingOpts;\r\n\r\nexport type MarkerDrawingOpts = {\r\n  readonly markerEnd?:MarkerOpts\r\n  readonly markerStart?:MarkerOpts\r\n  readonly markerMid?:MarkerOpts\r\n}\r\n\r\n\r\n/**\r\n * Text drawing options\r\n */\r\nexport type TextDrawingOpts = StrokeOpts & DrawingOpts & {\r\n  readonly anchor?: `start` | `middle` | `end`\r\n  readonly align?: `text-bottom` | `text-top` | `baseline` | `top` | `hanging` | `middle`\r\n}\r\n\r\n/**\r\n * Text path drawing options\r\n */\r\nexport type TextPathDrawingOpts = TextDrawingOpts & {\r\n  readonly method?: `align` |`stretch`\r\n  readonly side?: `left` | `right`\r\n  readonly spacing?: `auto` | `exact`\r\n  readonly startOffset?: number\r\n  readonly textLength?:number\r\n}\r\n\r\n/**\r\n * Creates and appends a SVG element. \r\n * \r\n * ```js\r\n * // Create a circle\r\n * const circleEl = createOrResolve(parentEl, `SVGCircleElement`);\r\n * ```\r\n * \r\n * If `queryOrExisting` is specified, it is used as a query to find an existing element. If\r\n * query starts with `#`, this will be set as the element id, if created.\r\n * \r\n * ```js\r\n * // Creates an element with id 'myCircle' if it doesn't exist\r\n * const circleEl = createOrResolve(parentEl, `SVGCircleElement`, `#myCircle`);\r\n * ```\r\n * @param parent Parent element\r\n * @param type Type of SVG element\r\n * @param queryOrExisting Query, eg `#id`\r\n * @returns \r\n */\r\nexport const createOrResolve = <V extends SVGElement>(parent:SVGElement, type:string, queryOrExisting?:string|V):V => {\r\n  //eslint-disable-next-line functional/no-let\r\n  let existing = null;\r\n  if (queryOrExisting !== undefined) {\r\n    if (typeof queryOrExisting === `string`) existing = parent.querySelector(queryOrExisting);\r\n    else existing = queryOrExisting;\r\n  }\r\n  if (existing === null) {\r\n    const p = document.createElementNS(`http://www.w3.org/2000/svg`, type) as V;\r\n    parent.appendChild(p);\r\n    if (queryOrExisting && typeof queryOrExisting === `string`) {\r\n      //eslint-disable-next-line functional/immutable-data\r\n      if (queryOrExisting.startsWith(`#`)) p.id = queryOrExisting.substring(1);\r\n    }\r\n    return p;\r\n  }\r\n  return existing as V;\r\n};\r\n\r\nexport const remove = <V extends SVGElement>(parent:SVGElement, queryOrExisting:string|V) => {\r\n  if (typeof queryOrExisting === `string`) {\r\n    const e = parent.querySelector(queryOrExisting);\r\n    if (e === null) return;\r\n    e.remove();\r\n  } else {\r\n    queryOrExisting.remove();\r\n  }\r\n};\r\n\r\n/**\r\n * Creates an element of `type` and with `id` (if specified)\r\n * @param type Element type, eg `circle` \r\n * @param id Optional id to assign to element\r\n * @returns Element\r\n */\r\nexport const createEl = <V extends SVGElement>(type:string, id?:string):V => {\r\n  const m = document.createElementNS(`http://www.w3.org/2000/svg`, type) as V;\r\n  if (id) {\r\n    //eslint-disable-next-line functional/immutable-data\r\n    m.id = id;\r\n  }\r\n  return m;\r\n};\r\n\r\n/**\r\n * Applies path drawing options to given element\r\n * Applies: markerEnd, markerStart, markerMid\r\n * @param elem Element (presumed path)\r\n * @param opts Options\r\n */\r\nexport const applyPathOpts = (elem:SVGElement, opts:PathDrawingOpts) => {\r\n  if (opts.markerEnd) elem.setAttribute(`marker-end`, markerPrebuilt(elem, opts.markerEnd, opts as DrawingOpts));\r\n  if (opts.markerStart) elem.setAttribute(`marker-end`, markerPrebuilt(elem, opts.markerStart, opts as DrawingOpts));\r\n  if (opts.markerMid) elem.setAttribute(`marker-end`, markerPrebuilt(elem, opts.markerMid, opts as DrawingOpts));\r\n};\r\n\r\n/**\r\n * Applies drawing options to given SVG element.\r\n * Applies: fillStyle, strokeStyle, strokeWidth, strokeDash\r\n * @param elem Element\r\n * @param opts Drawing options\r\n */\r\nexport const applyOpts = (elem:SVGElement, opts:DrawingOpts) => {\r\n  if (opts.fillStyle) elem.setAttributeNS(null, `fill`, opts.fillStyle);\r\n};\r\n\r\nexport const applyStrokeOpts = (elem:SVGElement, opts:StrokeOpts) => {\r\n  if (opts.strokeStyle) elem.setAttributeNS(null, `stroke`, opts.strokeStyle);\r\n  if (opts.strokeWidth) elem.setAttributeNS(null, `stroke-width`, opts.strokeWidth.toString());\r\n  if (opts.strokeDash) elem.setAttribute(`stroke-dasharray`, opts.strokeDash);\r\n  if (opts.strokeLineCap) elem.setAttribute(`stroke-linecap`, opts.strokeLineCap);\r\n};\r\n\r\n/**\r\n * Helper to make SVG elements with a common parent.\r\n *\r\n * Create with {@link makeHelper}.\r\n */\r\nexport type SvgHelper = {\r\n  remove(queryOrExisting:string|SVGElement):void\r\n  /**\r\n   * Creates a text element\r\n   * @param text Text\r\n   * @param pos Position\r\n   * @param opts Drawing options\r\n   * @param queryOrExisting DOM query to look up existing element, or the element instance \r\n   */\r\n  text(text:string, pos:Points.Point, opts?:TextDrawingOpts, queryOrExisting?:string|SVGTextElement):SVGTextElement\r\n  /**\r\n   * Creates text on a path\r\n   * @param pathRef Reference to path element\r\n   * @param text Text\r\n   * @param opts Drawing options\r\n   * @param queryOrExisting DOM query to look up existing element, or the element instance \r\n   */\r\n  textPath(pathRef:string, text:string, opts?:TextDrawingOpts, queryOrExisting?:string|SVGTextPathElement):SVGTextPathElement\r\n  /**\r\n   * Creates a line\r\n   * @param line Line\r\n   * @param opts Drawing options\r\n   * @param queryOrExisting DOM query to look up existing element, or the element instance \r\n   */\r\n  line(line:Lines.Line, opts?:LineDrawingOpts, queryOrExisting?:string|SVGLineElement):SVGLineElement\r\n  /**\r\n   * Creates a circle\r\n   * @param circle Circle\r\n   * @param opts Drawing options\r\n   * @param queryOrExisting DOM query to look up existing element, or the element instance \r\n   */\r\n  circle(circle:CirclePositioned, opts?:CircleDrawingOpts, queryOrExisting?:string|SVGCircleElement):SVGCircleElement\r\n  /**\r\n   * Creates a path\r\n   * @param svgStr Path description, or empty string\r\n   * @param opts Drawing options\r\n   * @param queryOrExisting DOM query to look up existing element, or the element instance \r\n   */\r\n  path(svgStr:string|readonly string[], opts?:PathDrawingOpts, queryOrExisting?:string|SVGPathElement) :SVGPathElement\r\n  /**\r\n   * Creates a grid of horizontal and vertical lines inside of a group\r\n   * @param center Grid origin\r\n   * @param spacing Cell size\r\n   * @param width Width of grid\r\n   * @param height Height of grid\r\n   * @param opts Drawing options\r\n   */\r\n  grid(center:Points.Point, spacing:number, width:number, height:number, opts?:LineDrawingOpts):SVGGElement\r\n  /**\r\n   * Returns an element if it exists in parent\r\n   * @param selectors Eg `#path`\r\n   */\r\n  query<V extends SVGElement>(selectors:string):V|null\r\n  /**\r\n   * Gets the width of the parent\r\n   */\r\n  get width():number \r\n  /**\r\n   * Sets the width of the parent\r\n   */\r\n  set width(width:number) \r\n  /**\r\n   * Gets the parent\r\n   */\r\n  get parent():SVGElement\r\n  /**\r\n   * Gets the height of the parent\r\n   */ \r\n  get height():number \r\n  /**\r\n   * Sets the height of the parent\r\n   */\r\n  set height(height:number) \r\n  /**\r\n   * Deletes all child elements\r\n   */\r\n  clear():void \r\n};\r\n\r\n/**\r\n * Get the bounds of an SVG element (determined by its width/height attribs)\r\n * @param svg\r\n * @returns \r\n */\r\nexport const getBounds = (svg:SVGElement):Rects.Rect => {\r\n  const w = svg.getAttributeNS(null, `width`);\r\n  const width = w === null ? 0 : parseFloat(w);\r\n  const h = svg.getAttributeNS(null, `height`);\r\n  const height = h === null ? 0 : parseFloat(h);\r\n  return { width, height};\r\n};\r\n\r\n/**\r\n * Set the bounds of an element, using its width/height attribs.\r\n * @param svg\r\n * @param bounds \r\n */\r\nexport const setBounds = (svg:SVGElement, bounds:Rects.Rect):void => {\r\n  svg.setAttributeNS(null, `width`, bounds.width.toString());\r\n  svg.setAttributeNS(null, `height`, bounds.height.toString());\r\n};\r\n\r\n/**\r\n * @inheritdoc SvgHelper\r\n * @param parent \r\n * @param parentOpts \r\n * @returns \r\n */\r\nexport const makeHelper = (parent:SVGElement, parentOpts?:DrawingOpts & StrokeOpts):SvgHelper => {\r\n  if (parentOpts) {\r\n    applyOpts(parent, parentOpts);\r\n    applyStrokeOpts(parent, parentOpts);\r\n  }\r\n  \r\n  const o = {\r\n    remove:(queryOrExisting:string|SVGElement) => remove(parent, queryOrExisting),\r\n    text:(text:string, pos:Points.Point, opts?:TextDrawingOpts, queryOrExisting?:string|SVGTextElement) => Elements.text(text, parent, pos, opts, queryOrExisting),\r\n    textPath:(pathRef:string, text:string, opts?:TextDrawingOpts, queryOrExisting?:string|SVGTextPathElement) => Elements.textPath(pathRef, text, parent, opts, queryOrExisting),\r\n    line:(line:Lines.Line, opts?:LineDrawingOpts, queryOrExisting?:string|SVGLineElement) => Elements.line(line, parent, opts, queryOrExisting),\r\n    circle:(circle:CirclePositioned, opts?:CircleDrawingOpts, queryOrExisting?:string|SVGCircleElement) => Elements.circle(circle, parent, opts,  queryOrExisting),\r\n    path:(svgStr:string|readonly string[], opts?:PathDrawingOpts, queryOrExisting?:string|SVGPathElement) => Elements.path(svgStr, parent, opts, queryOrExisting),\r\n    grid:(center:Points.Point, spacing:number, width:number, height:number, opts?:LineDrawingOpts) => Elements.grid(parent, center, spacing, width, height, opts),\r\n    query:<V extends SVGElement>(selectors:string):V|null => parent.querySelector(selectors),\r\n    get width():number {\r\n      const w = parent.getAttributeNS(null, `width`);\r\n      if (w === null) return 0;\r\n      return parseFloat(w);\r\n    },\r\n    set width(width:number) {\r\n      parent.setAttributeNS(null, `width`, width.toString());\r\n    },\r\n    get parent():SVGElement {\r\n      return parent;\r\n    },\r\n    get height():number {\r\n      const w = parent.getAttributeNS(null, `height`);\r\n      if (w === null) return 0;\r\n      return parseFloat(w);\r\n    },\r\n    set height(height:number) {\r\n      parent.setAttributeNS(null, `height`, height.toString());\r\n    },\r\n    clear: () => {\r\n      //eslint-disable-next-line functional/no-loop-statement\r\n      while (parent.firstChild) {\r\n        parent.removeChild(parent.lastChild as HTMLElement);\r\n      }\r\n    }\r\n  };\r\n  return o;\r\n};\r\n\r\n","\r\nimport {createOrResolve, MarkerOpts, createEl, DrawingOpts, applyOpts} from './Svg.js';\r\n\r\nexport const createMarker = (id:string, opts:MarkerOpts, childCreator?:()=>SVGElement):SVGMarkerElement => {\r\n  const m = createEl<SVGMarkerElement>(`marker`, id);\r\n  \r\n  if (opts.markerWidth) m.setAttribute(`markerWidth`, opts.markerWidth?.toString());\r\n  if (opts.markerHeight) m.setAttribute(`markerHeight`, opts.markerHeight?.toString());\r\n  if (opts.orient) m.setAttribute(`orient`, opts.orient.toString());\r\n  else m.setAttribute(`orient`, `auto-start-reverse`);\r\n\r\n  if (opts.viewBox) m.setAttribute(`viewBox`, opts.viewBox.toString());\r\n  if (opts.refX) m.setAttribute(`refX`, opts.refX.toString());\r\n  if (opts.refY) m.setAttribute(`refY`, opts.refY.toString());\r\n\r\n  if (childCreator) {\r\n    const c = childCreator();\r\n    m.appendChild(c);\r\n  }\r\n  return m;\r\n};\r\n\r\nexport const markerPrebuilt = (elem: SVGElement | null, opts: MarkerOpts, _context: DrawingOpts): string => {\r\n  if (elem === null) return `(elem null)`;\r\n\r\n  const parent = elem.ownerSVGElement;\r\n  if (parent === null) throw new Error(`parent for elem is null`);\r\n  const defsEl = createOrResolve<SVGDefsElement>(parent, `defs`, `defs`);\r\n\r\n  //eslint-disable-next-line functional/no-let\r\n  let defEl = defsEl.querySelector(`#${opts.id}`) as SVGElement | null;\r\n\r\n  if (defEl !== null) {\r\n    return `url(#${opts.id})`;\r\n  }\r\n\r\n  if (opts.id === `triangle`) {\r\n    opts = {...opts, strokeStyle: `transparent`};\r\n    if (!opts.markerHeight) opts = {...opts, markerHeight: 6};\r\n    if (!opts.markerWidth) opts = {...opts, markerWidth: 6};\r\n    if (!opts.refX) opts = {...opts, refX: opts.markerWidth};\r\n    if (!opts.refY) opts = {...opts, refY: opts.markerHeight};\r\n    if (!opts.fillStyle || opts.fillStyle === `none`) opts = {...opts, fillStyle: `black`};\r\n    if (!opts.viewBox) opts = {...opts, viewBox: `0 0 10 10`};\r\n\r\n    defEl = createMarker(opts.id, opts, () => {\r\n      const tri = createEl<SVGPathElement>(`path`);\r\n      tri.setAttribute(`d`, `M 0 0 L 10 5 L 0 10 z`);\r\n      if (opts) applyOpts(tri, opts);\r\n      return tri;\r\n    });\r\n  } else throw new Error(`Do not know how to make ${opts.id}`);\r\n\r\n  //eslint-disable-next-line functional/immutable-data\r\n  defEl.id = opts.id;\r\n  defsEl.appendChild(defEl);\r\n\r\n  return `url(#${opts.id})`;\r\n};\r\n","\r\nimport {CirclePositioned} from \"../geometry/Circle.js\";\r\nimport * as Lines from \"../geometry/Line.js\";\r\nimport * as Points from \"../geometry/Point.js\";\r\nimport * as Svg from \"./Svg.js\";\r\nimport { getCssVariable } from \"./Colour.js\";\r\n//import {Palette} from \".\";\r\n\r\n\r\nconst numOrPercentage = (v:number):string => {\r\n  if (v >= 0 && v <= 1) return (v*100) + `%`;\r\n  return v.toString();\r\n};\r\n\r\n/**\r\n * Creates and adds an SVG path element\r\n * @example\r\n * ```js\r\n * const paths = [\r\n *  `M300,200`,\r\n *  `a25,25 -30 0,1 50, -25 l 50,-25`\r\n * ]\r\n * const pathEl = path(paths, parentEl);\r\n * ```\r\n * @param svgOrArray Path syntax, or array of paths. Can be empty if path data will be added later\r\n * @param parent SVG parent element\r\n * @param opts Options Drawing options\r\n * @returns \r\n */\r\nexport const path = (svgOrArray: string | readonly string[], parent: SVGElement, opts?: Svg.PathDrawingOpts, queryOrExisting?: string | SVGPathElement): SVGPathElement => {\r\n  const elem = Svg.createOrResolve<SVGPathElement>(parent, `path`, queryOrExisting);\r\n  const svg = typeof svgOrArray === `string` ? svgOrArray : svgOrArray.join(`\\n`);\r\n\r\n  elem.setAttributeNS(null, `d`, svg);\r\n  parent.appendChild(elem);\r\n  return pathUpdate(elem, opts);\r\n};\r\n\r\nexport const pathUpdate = (elem:SVGPathElement, opts?:Svg.PathDrawingOpts) => {\r\n  if (opts) Svg.applyOpts(elem, opts);\r\n  if (opts) Svg.applyStrokeOpts(elem, opts);\r\n  return elem;\r\n};\r\n\r\n/**\r\n * Updates an existing `SVGCircleElement` with potentially updated circle data and drawing options\r\n * @param elem Element\r\n * @param circle Circle\r\n * @param opts Drawing options\r\n * @returns SVGCircleElement\r\n */\r\nexport const circleUpdate = (elem: SVGCircleElement, circle: CirclePositioned, opts?: Svg.CircleDrawingOpts) => {\r\n  elem.setAttributeNS(null, `cx`, circle.x.toString());\r\n  elem.setAttributeNS(null, `cy`, circle.y.toString());\r\n  elem.setAttributeNS(null, `r`, circle.radius.toString());\r\n  if (opts) Svg.applyOpts(elem, opts);\r\n  if (opts) Svg.applyStrokeOpts(elem, opts);\r\n\r\n  return elem;\r\n};\r\n\r\n/**\r\n * Creates or reuses a `SVGCircleElement`.\r\n * \r\n * To update an existing element, use `circleUpdate`\r\n * @param circle \r\n * @param parent \r\n * @param opts \r\n * @param queryOrExisting \r\n * @returns \r\n */\r\nexport const circle = (circle: CirclePositioned, parent: SVGElement, opts?: Svg.DrawingOpts, queryOrExisting?: string | SVGCircleElement): SVGCircleElement => {\r\n  const p = Svg.createOrResolve<SVGCircleElement>(parent, `circle`, queryOrExisting);\r\n  return circleUpdate(p, circle, opts);\r\n};\r\n\r\n/**\r\n * Creates or reuses a SVGLineElement.\r\n * \r\n * @param line \r\n * @param parent \r\n * @param opts \r\n * @param queryOrExisting \r\n * @returns \r\n */\r\nexport const line = (line: Lines.Line, parent: SVGElement, opts?: Svg.LineDrawingOpts, queryOrExisting?: string | SVGLineElement): SVGLineElement => {\r\n  const lineEl = Svg.createOrResolve<SVGLineElement>(parent, `line`, queryOrExisting);\r\n  return lineUpdate(lineEl, line, opts);\r\n};\r\n\r\n/**\r\n * Updates a SVGLineElement instance with potentially changed line and drawing data\r\n * @param lineEl\r\n * @param line \r\n * @param opts \r\n * @returns \r\n */\r\nexport const lineUpdate = (lineEl:SVGLineElement, line:Lines.Line, opts?:Svg.LineDrawingOpts) => {\r\n  lineEl.setAttributeNS(null, `x1`, line.a.x.toString());\r\n  lineEl.setAttributeNS(null, `y1`, line.a.y.toString());\r\n  lineEl.setAttributeNS(null, `x2`, line.b.x.toString());\r\n  lineEl.setAttributeNS(null, `y2`, line.b.y.toString());\r\n  if (opts) Svg.applyOpts(lineEl, opts);\r\n  if (opts) Svg.applyPathOpts(lineEl, opts);\r\n  if (opts) Svg.applyStrokeOpts(lineEl, opts);\r\n  return lineEl;\r\n};\r\n\r\n/**\r\n * Updates an existing SVGTextPathElement instance with text and drawing options\r\n * @param el \r\n * @param text \r\n * @param opts \r\n * @returns \r\n */\r\nexport const textPathUpdate = (el:SVGTextPathElement, text?:string, opts?:Svg.TextPathDrawingOpts) => {\r\n  if (opts?.method) el.setAttributeNS(null, `method`, opts.method);\r\n  if (opts?.side) el.setAttributeNS(null, `side`, opts.side);\r\n  if (opts?.spacing) el.setAttributeNS(null, `spacing`, opts.spacing);\r\n  if (opts?.startOffset) {\r\n    el.setAttributeNS(null, `startOffset`, numOrPercentage(opts.startOffset));\r\n  }\r\n  if (opts?.textLength) el.setAttributeNS(null, `textLength`, numOrPercentage(opts.textLength));\r\n  \r\n  if (text) {\r\n    //eslint-disable-next-line functional/immutable-data\r\n    el.textContent = text;\r\n  }\r\n  if (opts) Svg.applyOpts(el, opts);\r\n  if (opts) Svg.applyStrokeOpts(el, opts);\r\n  return el;\r\n};\r\n\r\n/**\r\n * Creates or reuses a SVGTextPathElement.\r\n * @param pathRef \r\n * @param text \r\n * @param parent \r\n * @param opts \r\n * @param queryOrExisting \r\n * @returns \r\n */\r\nexport const textPath = (pathRef:string, text:string, parent:SVGElement, opts?:Svg.TextPathDrawingOpts, queryOrExisting?:string|SVGTextPathElement):SVGTextPathElement => {\r\n  const textEl = Svg.createOrResolve<SVGTextElement>(parent, `text`, queryOrExisting+`-text`);\r\n  // Update text properties, but don't pass in position or text\r\n  textUpdate(textEl, undefined, undefined, opts);\r\n  \r\n  const p = Svg.createOrResolve<SVGTextPathElement>(textEl, `textPath`, queryOrExisting);\r\n  p.setAttributeNS(null, `href`, pathRef);\r\n  return textPathUpdate(p, text, opts);\r\n};\r\n\r\n/**\r\n * Updates an existing SVGTextElement instance with position, text and drawing options\r\n * @param el \r\n * @param pos \r\n * @param text \r\n * @param opts \r\n * @returns \r\n */\r\nexport const textUpdate = (el:SVGTextElement, pos?:Points.Point, text?:string, opts?:Svg.TextDrawingOpts) => {\r\n  if (pos) {\r\n    el.setAttributeNS(null, `x`, pos.x.toString());\r\n    el.setAttributeNS(null, `y`, pos.y.toString());  \r\n  }\r\n  if (text) {\r\n    //eslint-disable-next-line functional/immutable-data\r\n    el.textContent = text;\r\n  }\r\n\r\n  if (opts) {\r\n    Svg.applyOpts(el, opts);\r\n    if (opts) Svg.applyStrokeOpts(el, opts);\r\n\r\n    if (opts.anchor) el.setAttributeNS(null, `text-anchor`, opts.anchor);\r\n    if (opts.align) el.setAttributeNS(null, `alignment-baseline`, opts.align);\r\n  }\r\n  return el;\r\n};\r\n\r\n/**\r\n * Creates or reuses a SVGTextElement\r\n * @param pos Position of text\r\n * @param text Text\r\n * @param parent \r\n * @param opts \r\n * @param queryOrExisting \r\n * @returns \r\n */\r\nexport const text = (text:string, parent:SVGElement, pos?:Points.Point, opts?:Svg.TextDrawingOpts, queryOrExisting?:string|SVGTextElement): SVGTextElement => {\r\n  const p = Svg.createOrResolve<SVGTextElement>(parent, `text`, queryOrExisting);\r\n  return textUpdate(p, pos, text, opts);  \r\n};\r\n\r\n/**\r\n * Creates a square grid based at a center point, with cells having `spacing` height and width.\r\n * \r\n * It fits in as many cells as it can within `width` and `height`.\r\n * \r\n * Returns a SVG group, consisting of horizontal and vertical lines\r\n * @param parent Parent element\r\n * @param center Center point of grid\r\n * @param spacing Width/height of cells\r\n * @param width How wide grid should be\r\n * @param height How high grid should be\r\n * @param opts \r\n */\r\nexport const grid = (parent:SVGElement, center: Points.Point, spacing: number, width: number, height: number, opts:Svg.LineDrawingOpts = {}) => {\r\n  if (!opts.strokeStyle) opts = {...opts, strokeStyle: getCssVariable(`bg-dim`, `silver`) };\r\n  if (!opts.strokeWidth) opts = {...opts, strokeWidth: 1};\r\n\r\n  const g = Svg.createEl<SVGGElement>(`g`);\r\n  Svg.applyOpts(g, opts);\r\n  Svg.applyPathOpts(g, opts);\r\n  Svg.applyStrokeOpts(g, opts);\r\n\r\n  // Horizontals\r\n  //eslint-disable-next-line functional/no-let\r\n  let y = 0;\r\n  //eslint-disable-next-line functional/no-loop-statement\r\n  while (y < height) {\r\n    const horiz = Lines.fromNumbers(0, y, width, y);\r\n    line(horiz, g);\r\n    y += spacing;\r\n  }\r\n\r\n  // Verticals\r\n  //eslint-disable-next-line functional/no-let\r\n  let x = 0;\r\n  //eslint-disable-next-line functional/no-loop-statement\r\n  while (x < width) {\r\n    const vert = Lines.fromNumbers(x, 0, x, height);\r\n    line(vert, g);\r\n    x += spacing;\r\n  }\r\n  parent.appendChild(g);\r\n  return g;\r\n};\r\n"],"mappings":"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","names":[]}