{"version":3,"sources":["../src/util.ts"],"sourcesContent":["\r\n/**\r\n * Clamps a value between min and max (both inclusive)\r\n * Defaults to a 0-1 range, useful for percentages.\r\n * \r\n * Usage:\r\n *  clamp(0.5);         // 0.5 - just fine, within default of 0 to 1\r\n *  clamp(1.5);         // 1 - above default max of 1\r\n *  clamp(-50, 0, 100); // 0 - below range\r\n *  clamp(50, 0, 50);   // 50 - within range\r\n * \r\n * For clamping integer ranges, consider `clampZeroBounds`\r\n * @param {number} v Value to clamp\r\n * @param {number} [min=0] Minimum value (inclusive)\r\n * @param {number} [max=1] Maximum value (inclusive)\r\n * @returns Clamped value\r\n */\r\nexport const clamp = (v: number, min = 0, max = 1) => {\r\n  // ✔ UNIT TESTED\r\n  if (Number.isNaN(v)) throw new Error(`v parameter is NaN`);\r\n  if (Number.isNaN(min)) throw new Error(`min parameter is NaN`);\r\n  if (Number.isNaN(max)) throw new Error(`max parameter is NaN`);\r\n\r\n  if (v < min) return min;\r\n  if (v > max) return max;\r\n  return v;\r\n};\r\n\r\n/**\r\n * Clamps integer `v` between 0 (inclusive) and length (exclusive)\r\n * This is useful for clamping an array range, because the largest allowed number will\r\n * be one less than length\r\n * \r\n * ```js\r\n * const myArray = [`a`, `b`, `c`, `d`];\r\n * clampZeroBounds(0, myArray.length); // 0\r\n * clampZeroBounds(1.2, myArray.length); // 1\r\n * clampZeroBounds(4, myArray.length); // 4\r\n * clampZeroBounds(5, myArray.length); // 4\r\n * clampZeroBounds(-1, myArray.length); // 0 \r\n * ```\r\n * @param {number} v Integer value to clamp\r\n * @param {number} length Length of bounds\r\n * @returns Clamped value, minimum will be 0, maximum will be one less than `length`.\r\n */\r\nexport const clampZeroBounds = (v: number, length: number) => {\r\n  // ✔ UNIT TESTED\r\n  if (!Number.isInteger(v)) throw new Error(`v parameter must be an integer (${v})`);\r\n  if (!Number.isInteger(length)) throw new Error(`length parameter must be an integer (${length}, ${typeof length})`);\r\n  v = Math.round(v);\r\n  if (v < 0) return 0;\r\n  if (v >= length) return length - 1;\r\n  return v;\r\n};\r\n\r\nexport const lerp =(amt:number, a:number, b:number) => (1-amt) * a + amt * b;\r\n/**\r\n * Pauses execution\r\n * ```js\r\n * console.log(`Hello`);\r\n * await sleep(1000);\r\n * console.log(`There`); // Prints one second after\r\n * ```\r\n *\r\n * @param {number} milliseconds\r\n * @return {*}  {Promise<any>}\r\n */\r\nexport const sleep = (milliseconds: number): Promise<any> => new Promise(resolve => setTimeout(resolve, milliseconds));\r\n\r\n/**\r\n * Calls provided function after a delay\r\n *\r\n * ```js\r\n * const result = await delay(async () => Math.random(), 1000);\r\n * console.log(result); // Prints out result after one second\r\n * ```\r\n * @template V\r\n * @param {() => Promise<V>} call\r\n * @param {number} milliseconds\r\n * @return {*}  {Promise<any>}\r\n */\r\nexport const delay = async <V>(call:() => Promise<V>, milliseconds: number): Promise<any> =>  {\r\n  await sleep(milliseconds);\r\n  return Promise.resolve(await call());\r\n};\r\n\r\nexport type ToString<V> = (itemToMakeStringFor: V) => string;\r\nexport type IsEqual<V> = (a:V, b:V) => boolean;\r\n\r\n/**\r\n * Default comparer function is equiv to checking `a === b`\r\n * ✔ UNIT TESTED\r\n * @template V\r\n * @param {V} a\r\n * @param {V} b\r\n * @return {*}  {boolean}\r\n */\r\nexport const isEqualDefault = <V>(a:V, b:V):boolean => a === b;\r\n\r\n/**\r\n * Comparer returns true if string representation of `a` and `b` are equal.\r\n * Uses `toStringDefault` to generate a string representation (`JSON.stringify`)\r\n *\r\n * @template V\r\n * @param {V} a\r\n * @param {V} b\r\n * @return {*}  {boolean} True if the contents of `a` and `b` are equal\r\n */\r\nexport const isEqualValueDefault = <V>(a:V, b:V):boolean => {\r\n  // ✔ UNIT TESTED\r\n  if (a === b) return true; // Object references are the same, or string values are the same\r\n  return toStringDefault(a) === toStringDefault(b); // String representations are the same\r\n};\r\n\r\n/**\r\n * A default converter to string that uses JSON.stringify if its an object, or the thing itself if it's a string\r\n * ✔ UNIT TESTED\r\n * @template V\r\n * @param {V} itemToMakeStringFor\r\n * @returns {string}\r\n */\r\nexport const toStringDefault = <V>(itemToMakeStringFor:V):string => ((typeof itemToMakeStringFor === `string`) ? itemToMakeStringFor : JSON.stringify(itemToMakeStringFor));\r\n\r\n"],"mappings":";AAiBO,IAAM,QAAQ,CAAC,GAAW,MAAM,GAAG,MAAM,MAAM;AAEpD,MAAI,OAAO,MAAM;AAAI,UAAM,IAAI,MAAM;AACrC,MAAI,OAAO,MAAM;AAAM,UAAM,IAAI,MAAM;AACvC,MAAI,OAAO,MAAM;AAAM,UAAM,IAAI,MAAM;AAEvC,MAAI,IAAI;AAAK,WAAO;AACpB,MAAI,IAAI;AAAK,WAAO;AACpB,SAAO;AAAA;AAoBF,IAAM,kBAAkB,CAAC,GAAW,WAAmB;AAE5D,MAAI,CAAC,OAAO,UAAU;AAAI,UAAM,IAAI,MAAM,mCAAmC;AAC7E,MAAI,CAAC,OAAO,UAAU;AAAS,UAAM,IAAI,MAAM,wCAAwC,WAAW,OAAO;AACzG,MAAI,KAAK,MAAM;AACf,MAAI,IAAI;AAAG,WAAO;AAClB,MAAI,KAAK;AAAQ,WAAO,SAAS;AACjC,SAAO;AAAA;AAGF,IAAM,OAAM,CAAC,KAAY,GAAU,MAAc,KAAE,OAAO,IAAI,MAAM;AAYpE,IAAM,QAAQ,CAAC,iBAAuC,IAAI,QAAQ,aAAW,WAAW,SAAS;AAcjG,IAAM,QAAQ,OAAU,MAAuB,iBAAwC;AAC5F,QAAM,MAAM;AACZ,SAAO,QAAQ,QAAQ,MAAM;AAAA;AAcxB,IAAM,iBAAiB,CAAI,GAAK,MAAgB,MAAM;AAWtD,IAAM,sBAAsB,CAAI,GAAK,MAAgB;AAE1D,MAAI,MAAM;AAAG,WAAO;AACpB,SAAO,gBAAgB,OAAO,gBAAgB;AAAA;AAUzC,IAAM,kBAAkB,CAAI,wBAAmC,OAAO,wBAAwB,WAAY,sBAAsB,KAAK,UAAU;","names":[]}