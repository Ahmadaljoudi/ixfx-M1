{"version":3,"sources":["../src/Guards.ts"],"sourcesContent":["\nexport type NumberGuardRange = \n/**\n * No range checking\n */\n  `` | \n  /**\n   * Can be any number, except zero\n   */\n  `nonZero` | \n  `positive` | \n  `negative` | \n  /**\n   * Must be above zero\n   */\n  `aboveZero` | \n  `belowZero` | \n  `percentage` | \n  `bipolar`;\n\n/**\n * Throws an error if `t` is not a number or within specified range. \n * Alternatives: {@link integer} for additional integer check, {@link percent} for percentage-range.\n * \n * * positive: must be at least zero\n * * negative: must be zero or lower\n * * aboveZero: must be above zero\n * * belowZero: must be below zero\n * * percentage: must be within 0-1, inclusive\n * * nonZero: can be anything except zero\n * * bipolar: can be -1 to 1, inclusive\n * @param value Value to check\n * @param paramName Name of parameter (for more helpful exception messages)\n * @param range Range to enforce\n * @returns \n */\nexport const number = (value:number, range:NumberGuardRange = ``, paramName = `?`):boolean => {\n  if (Number.isNaN(value)) throw new Error(`Parameter '${paramName}' is NaN`);\n  if (typeof value !== `number`) throw new Error(`Parameter '${paramName}' is not a number (${value})`);\n  switch (range) {\n  case `positive`:\n    if (value < 0) throw new Error(`Parameter '${paramName}' must be at least zero (${value})`);\n    break;\n  case `negative`:\n    if (value > 0) throw new Error(`Parameter '${paramName}' must be zero or lower (${value})`);\n    break;\n  case `aboveZero`:\n    if (value <= 0) throw new Error(`Parameter '${paramName}' must be above zero (${value})`);\n    break;\n  case `belowZero`:\n    if (value >= 0) throw new Error(`Parameter '${paramName}' must be below zero (${value})`);\n    break;\n  case `percentage`:\n    if (value > 1 || value < 0) throw new Error(`Parameter '${paramName}' must be in percentage range (0 to 1). (${value})`);\n    break;\n  case `nonZero`:\n    if (value === 0) throw new Error(`Parameter '${paramName}' must non-zero. (${value})`);\n    break;\n  case `bipolar`:\n    if (value > 1 || value < -1) throw new Error(`Parameter '${paramName}' must be in bipolar percentage range (-1 to 1). (${value})`);\n    break;\n  }\n  return true;\n};\n\n/**\n * Throws an error if `value` is not in the range of 0-1.\n * Equiv to `number(value, `percentage`);`\n * \n * This is the same as calling ```number(t, `percentage`)```\n * @param value Value to check\n * @param paramName Param name for customising exception message\n * @returns \n */\nexport const percent = (value: number, paramName = `?`) => number(value, `percentage`, paramName);\n\n/**\n * Throws an error if `value` is not an integer, or does not meet guard criteria.\n * See {@link number} for guard details, or use that if integer checking is not required.\n * @param value Value to check\n * @param paramName Param name for customising exception message\n * @param range Guard specifier.\n */\nexport const integer = (value:number, range:NumberGuardRange = ``, paramName = `?`) => {\n  // Unit tested\n  number(value, range, paramName);\n  if (!Number.isInteger(value)) throw new Error(`Paramter ${paramName} is not an integer`);\n};\n\n/**\n * Returns true if parameter is an array of strings\n * @param value \n * @returns \n */\nexport const isStringArray = (value:unknown):boolean => {\n  if (!Array.isArray(value)) return false;\n  return value.find(v => typeof v !== `string`) === undefined;\n};\n\n/**\n * Throws an error if parameter is not an array\n * @param value\n * @param paramName \n */\nexport const array = (value: unknown, paramName = `?`): void => {\n  if (!Array.isArray(value)) throw new Error(`Parameter '${paramName}' is expected to be an array'`);\n};\n\n/** Throws an error if parameter is not defined */\nexport const defined = <T>(argument: T | undefined): argument is T => argument !== undefined;\n"],"mappings":";AAoCO,IAAM,SAAS,CAAC,OAAc,QAAyB,IAAI,YAAY,QAAgB;AAC5F,MAAI,OAAO,MAAM,KAAK;AAAG,UAAM,IAAI,MAAM,cAAc,mBAAmB;AAC1E,MAAI,OAAO,UAAU;AAAU,UAAM,IAAI,MAAM,cAAc,+BAA+B,QAAQ;AACpG,UAAQ;AAAA,SACH;AACH,UAAI,QAAQ;AAAG,cAAM,IAAI,MAAM,cAAc,qCAAqC,QAAQ;AAC1F;AAAA,SACG;AACH,UAAI,QAAQ;AAAG,cAAM,IAAI,MAAM,cAAc,qCAAqC,QAAQ;AAC1F;AAAA,SACG;AACH,UAAI,SAAS;AAAG,cAAM,IAAI,MAAM,cAAc,kCAAkC,QAAQ;AACxF;AAAA,SACG;AACH,UAAI,SAAS;AAAG,cAAM,IAAI,MAAM,cAAc,kCAAkC,QAAQ;AACxF;AAAA,SACG;AACH,UAAI,QAAQ,KAAK,QAAQ;AAAG,cAAM,IAAI,MAAM,cAAc,qDAAqD,QAAQ;AACvH;AAAA,SACG;AACH,UAAI,UAAU;AAAG,cAAM,IAAI,MAAM,cAAc,8BAA8B,QAAQ;AACrF;AAAA,SACG;AACH,UAAI,QAAQ,KAAK,QAAQ;AAAI,cAAM,IAAI,MAAM,cAAc,8DAA8D,QAAQ;AACjI;AAAA;AAEF,SAAO;AACT;AAWO,IAAM,UAAU,CAAC,OAAe,YAAY,QAAQ,OAAO,OAAO,cAAc,SAAS;AASzF,IAAM,UAAU,CAAC,OAAc,QAAyB,IAAI,YAAY,QAAQ;AAErF,SAAO,OAAO,OAAO,SAAS;AAC9B,MAAI,CAAC,OAAO,UAAU,KAAK;AAAG,UAAM,IAAI,MAAM,YAAY,6BAA6B;AACzF;AAOO,IAAM,gBAAgB,CAAC,UAA0B;AACtD,MAAI,CAAC,MAAM,QAAQ,KAAK;AAAG,WAAO;AAClC,SAAO,MAAM,KAAK,OAAK,OAAO,MAAM,QAAQ,MAAM;AACpD;AAOO,IAAM,QAAQ,CAAC,OAAgB,YAAY,QAAc;AAC9D,MAAI,CAAC,MAAM,QAAQ,KAAK;AAAG,UAAM,IAAI,MAAM,cAAc,wCAAwC;AACnG;","names":[]}