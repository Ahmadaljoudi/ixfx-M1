{"version":3,"sources":["../src/components/HistogramVis.ts","../src/components/FrequencyHistogramPlot.ts"],"sourcesContent":["import {LitElement, css, html} from 'lit';\nimport {customElement} from 'lit/decorators/custom-element.js';\nimport {property} from 'lit/decorators/property.js';\nimport {repeat} from 'lit/directives/repeat.js';\nimport {KeyValue} from '../KeyValue.js';\n\ntype Bar = {\n  readonly percentage: number\n  readonly data: KeyValue\n};\n\nconst jsonData = (obj: unknown) => {\n  if (obj === null || obj === undefined || obj === `undefined`) return;\n  try {\n    if (typeof obj === `string`) {\n      if (obj.length === 0) return;\n      const o = JSON.parse(obj);\n      if (!Array.isArray(o)) {\n        console.error(`Histogram innerText should be JSON array`);\n        return;\n      }\n\n      // eslint-disable-next-line functional/no-let\n      for (let i = 0; i < o.length; i++) {\n        if (!Array.isArray(o[i])) {\n          console.error(`Histogram array should consist of inner arrays`);\n          return;\n        }\n        if (o[i].length !== 2) {\n          console.error(`Histogram inner arrays should consist of two elements`);\n          return;\n        }\n        if (typeof o[i][0] !== `string`) {\n          console.error(`First element of inner array should be a string (index ${i})`);\n          return;\n        }\n        if (typeof o[i][1] !== `number`) {\n          console.error(`Second element of inner array should be a number (index ${i})`);\n          return;\n        }\n      }\n      return o;\n    }\n  } catch (ex) {\n    console.log(obj);\n    console.error(ex);\n  }\n  return undefined;\n};\n\n/**\n * Usage in HTML:\n * ```html\n * <style>\n * histogram-vis {\n *  display: block;\n *  height: 7em;\n *  --histogram-bar-color: pink;\n * }\n * </style>\n * <histogram-vis>\n * [\n *  [\"apples\", 5],\n *  [\"oranges\", 3],\n *  [\"pineapple\", 0],\n *  [\"limes\", 9]\n * ]\n * </histogram-vis>\n * ```\n * \n * CSS colour theming:\n * --histogram-bar-color\n * --histogram-label-color\n * \n * HTML tag attributes\n * showXAxis (boolean)\n * showDataLabels (boolean)\n *\n * @export\n * @class HistogramVis\n * @extends {LitElement}\n **/\n@customElement(`histogram-vis`)\nexport class HistogramVis extends LitElement {\n  static readonly styles = css`\n    :host {\n    }\n    div.container {\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n    }\n    div.chart {\n      display: grid;\n      flex: 1;\n      grid-template-rows: 1fr 1px min-content;\n      justify-items: center;\n    }\n    div.bar {\n      display: flex;\n      flex-direction: column-reverse;\n      align-items: center;\n      justify-self: normal;\n      padding-left: 0.3vw;\n      padding-right: 0.3vw;\n    }\n    div.bar>div.barTrack {\n      background-color: var(--histogram-bar-color, gray);\n      align-self: stretch;\n    }\n    div.xAxisLabels, div.data {\n      font-size: min(1vw, 1em);\n      color: var(--histogram-label-color, currentColor);\n    }\n    div.xAxisLabels {\n      width: 100%;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      text-align: center;\n    }\n    div.xAxis {\n      background-color: var(--histogram-axis-color, silver);\n      width: 100%;\n      height: 100%;\n    }\n  `;\n\n  // static properties = {\n  //   showXAxis: { attribute: false}\n  // };\n\n\n  // eslint-disable-next-line functional/prefer-readonly-type\n  @property()\n  declare data: readonly KeyValue[];\n\n  // eslint-disable-next-line functional/prefer-readonly-type\n  @property()\n  declare showDataLabels: boolean;\n\n  // eslint-disable-next-line functional/prefer-readonly-type\n  @property()\n  declare height: string;\n\n  // eslint-disable-next-line functional/prefer-readonly-type\n  @property()\n  declare showXAxis: boolean;\n\n  // eslint-disable-next-line functional/prefer-readonly-type\n  @property({converter: jsonData, type: Object})\n  declare json: readonly KeyValue[] | undefined;\n\n  constructor() {\n    super();\n    this.data = [];\n    this.showDataLabels = true;\n    this.height = `100%`;\n    this.showXAxis = true;\n    this.json = undefined;\n  }\n\n  connectedCallback() {\n    if (!this.hasAttribute(`json`)) {\n      this.setAttribute(`json`, this.innerText);\n    }\n    super.connectedCallback();\n  }\n\n  barTemplate(bar: Bar, index: number, _totalBars: number) {\n    const {percentage} = bar;\n    const [key, freq] = bar.data;\n\n    // grid-area: rowStart / gridColStart / gridRowEnd / gridColEnd\n    const rowStart = 1;\n    const rowEnd = 2;\n    const colStart = index + 1;\n    const colEnd = colStart + 1;\n\n    const dataLabel = html`<div class=\"data\">${freq}</div>`;\n    const xAxis = html`${key}`;\n    return html`\n    <div class=\"bar\" style=\"grid-area: ${rowStart} / ${colStart} / ${rowEnd} / ${colEnd}\">\n      <div class=\"barTrack\" style=\"height: ${(percentage ?? 0) * 100}%\"></div>\n      ${this.showDataLabels ? dataLabel : ``}\n    </div>\n    <div class=\"xAxisLabels\" style=\"grid-area: ${rowStart + 2} / ${colStart} / ${rowEnd + 2} / ${colEnd}\">\n      ${this.showXAxis ? xAxis : ``}\n    </div>`;\n  }\n\n  render() {\n    if ((this.data === undefined || this.data.length === 0) && this.json === undefined) return html``;\n\n    const d = this.data ?? this.json;\n    const length = d.length;\n    const highestCount = Math.max(...d.map(d => d[1] as number));\n    const bars = d.map(kv => ({data: kv, percentage: kv[1] as number / highestCount}));\n\n    const xAxis = html`<div class=\"xAxis\" style=\"grid-area: 2 / 1 / 3 / ${d.length + 1}\"></div>`;\n    const height = this.height ? `height: ${this.height};` : ``;\n    const h = html`\n    <style>\n    div.chart {\n      grid-template-columns: repeat(${d.length}, minmax(2px, 1fr));\n    }\n    </style>\n    <div class=\"container\" style=\"${height}\">\n      <div class=\"chart\">\n      ${repeat(bars, (bar) => bar.data[0], (b, index) => this.barTemplate(b, index, length))}\n        ${this.showXAxis ? xAxis : ``}\n      </div>\n    </div>`;\n    return h;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    // eslint-disable-next-line quotes\n    readonly \"histogram-vis\": HistogramVis\n  }\n}","import { HistogramVis } from './HistogramVis.js';\nimport * as KeyValueUtil from '../KeyValue.js';\n\n/**\n * Creates and drives a HistogramVis instance.\n * Data should be an outer array containing two-element arrays for each\n * data point. The first element of the inner array is expected to be the key, the second the frequency.\n * For example,  `[`apples`, 2]` means the key `apples` was counted twice.\n * \n * Usage:\n * .sortBy() automatically sorts prior to visualisation. By default off.\n * .update(data) full set of data to plot\n * .clear() empties plot - same as calling `update([])`\n * .el - The `HistogramVis` instance, or undefined if not created/disposed\n * \n * ```\n * const plot = new FrequencyHistogramPlot(document.getElementById('histogram'));\n * plot.sortBy('key'); // Automatically sort by key\n * ...\n * plot.update([[`apples`, 2], [`oranges', 0], [`bananas`, 5]])\n * ```\n *\n * @export\n * @class FrequencyHistogramPlot\n */\nexport class FrequencyHistogramPlot {\n  //readonly parentEl:HTMLElement;\n  // eslint-disable-next-line functional/prefer-readonly-type\n  \n  readonly el:HistogramVis|undefined;\n  // eslint-disable-next-line functional/prefer-readonly-type\n  #sorter:KeyValueUtil.SortingFn|undefined;\n\n  constructor(el: HistogramVis) {\n    this.el = el;\n  }\n\n  setAutoSort(sortStyle:`value` | `valueReverse` | `key` | `keyReverse`):void {\n    // eslint-disable-next-line functional/immutable-data\n    this.#sorter = KeyValueUtil.getSorter(sortStyle);\n  }\n\n  clear() {\n    if (this.el === undefined) return;\n    // eslint-disable-next-line functional/immutable-data\n    this.el.data = [];\n  }\n\n  // init() {\n  //   if (this.el !== undefined) return; // already inited\n  //   // eslint-disable-next-line functional/immutable-data\n  //   this.el = document.createElement(`histogram-vis`);\n  //   this.parentEl.appendChild(this.el);\n  // }\n\n  dispose() {\n    const el = this.el;\n    if (el === undefined) return; // already disposed\n    el.remove();\n  }\n\n  update(data:ReadonlyArray<readonly [key:string, count:number]>) {\n    if (this.el === undefined) {\n      console.warn(`FrequencyHistogramPlot this.el undefined`);\n      return;\n    }\n\n    if (this.#sorter !== undefined) {\n      // eslint-disable-next-line functional/immutable-data, functional/prefer-readonly-type\n      this.el.data = this.#sorter(data as KeyValueUtil.KeyValue[]);\n    } else {\n      // eslint-disable-next-line functional/immutable-data\n      this.el.data  = [...data];\n    }\n  }\n}\n"],"mappings":"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","names":[]}