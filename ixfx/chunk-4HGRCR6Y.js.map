{"version":3,"sources":["../src/visual/Drawing.ts","../node_modules/color2k/src/guard.ts","../node_modules/color2k/src/ColorError.ts","../node_modules/color2k/src/parseToRgba.ts","../node_modules/color2k/src/parseToHsla.ts","../node_modules/color2k/src/hsla.ts","../node_modules/color2k/src/adjustHue.ts","../node_modules/color2k/src/darken.ts","../node_modules/color2k/src/desaturate.ts","../node_modules/color2k/src/getLuminance.ts","../node_modules/color2k/src/getContrast.ts","../node_modules/color2k/src/rgba.ts","../node_modules/color2k/src/mix.ts","../node_modules/color2k/src/getScale.ts","../node_modules/color2k/src/hasBadContrast.ts","../node_modules/color2k/src/lighten.ts","../node_modules/color2k/src/transparentize.ts","../node_modules/color2k/src/opacify.ts","../node_modules/color2k/src/readableColorIsBlack.ts","../node_modules/color2k/src/readableColor.ts","../node_modules/color2k/src/saturate.ts","../node_modules/color2k/src/toHex.ts","../node_modules/color2k/src/toRgba.ts","../node_modules/color2k/src/toHsla.ts"],"sourcesContent":["import * as Points from '../geometry/Point.js';\r\nimport * as Paths from '../geometry/Path.js';\r\nimport * as Lines from '../geometry/Line.js';\r\nimport {array as guardArray} from '../Guards.js';\r\nimport * as Circles from '../geometry/Circle.js';\r\nimport * as Arcs from '../geometry/Arc.js';\r\nimport * as Beziers from '../geometry/Bezier.js';\r\nimport * as Rects from '../geometry/Rect.js';\r\nimport * as color2k from 'color2k';\r\nimport {stack, Stack} from '../collections/index.js';\r\nimport {resolveEl} from '../dom/Util.js';\r\n\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst PIPI = Math.PI * 2;\r\n\r\ntype CanvasCtxQuery = null | string | CanvasRenderingContext2D | HTMLCanvasElement;\r\n\r\n/**\r\n * Gets a 2d drawing context from canvas element or query, or throws an error\r\n * @param canvasElCtxOrQuery Canvas element reference or DOM query\r\n * @returns Drawing context.\r\n */\r\nexport const getCtx = (canvasElCtxOrQuery:CanvasCtxQuery): CanvasRenderingContext2D => {\r\n  if (canvasElCtxOrQuery === null) throw Error(`canvasElCtxOrQuery null. Must be a 2d drawing context or Canvas element`);\r\n  if (canvasElCtxOrQuery === undefined) throw Error(`canvasElCtxOrQuery undefined. Must be a 2d drawing context or Canvas element`);\r\n  \r\n  const ctx = (canvasElCtxOrQuery instanceof CanvasRenderingContext2D) ?\r\n    canvasElCtxOrQuery : (canvasElCtxOrQuery instanceof HTMLCanvasElement) ?\r\n      canvasElCtxOrQuery.getContext(`2d`) : (typeof canvasElCtxOrQuery === `string`) ?\r\n        resolveEl<HTMLCanvasElement>(canvasElCtxOrQuery).getContext(`2d`): canvasElCtxOrQuery;\r\n  if (ctx === null) throw new Error(`Could not create 2d context for canvas`);\r\n  return ctx;\r\n};\r\n\r\n/**\r\n * Makes a helper object that wraps together a bunch of drawing functions that all use the same drawing context\r\n * @param ctxOrCanvasEl Drawing context or canvs element reference\r\n * @param canvasBounds Bounds of drawing (optional). Used for limiting `textBlock`\r\n * @returns \r\n */\r\nexport const makeHelper = (ctxOrCanvasEl:CanvasCtxQuery, canvasBounds?:Rects.Rect) => {\r\n  // TODO: Is there a way of automagically defining makeHelper to avoid repetition and keep typesafety and JSDoc?\r\n  const ctx = getCtx(ctxOrCanvasEl);\r\n  return {\r\n    paths(pathsToDraw: Paths.Path[], opts?: DrawingOpts): void {\r\n      paths(ctx, pathsToDraw, opts);\r\n    },\r\n    line(lineToDraw: Lines.Line|Lines.Line[], opts?: DrawingOpts): void {\r\n      line(ctx, lineToDraw, opts);\r\n    },\r\n    rect(rectsToDraw:Rects.RectPositioned|Rects.RectPositioned[], opts?:DrawingOpts & { filled?:boolean}): void {\r\n      rect(ctx, rectsToDraw, opts);\r\n    },\r\n    bezier(bezierToDraw: Beziers.QuadraticBezier|Beziers.CubicBezier, opts?:DrawingOpts): void {\r\n      bezier(ctx, bezierToDraw, opts);\r\n    },\r\n    connectedPoints(pointsToDraw: Points.Point[], opts?: DrawingOpts & {loop?: boolean}): void {\r\n      connectedPoints(ctx, pointsToDraw, opts);\r\n    },\r\n    pointLabels(pointsToDraw: Points.Point[], opts?:DrawingOpts): void {\r\n      pointLabels(ctx, pointsToDraw, opts);\r\n    },\r\n    dot(dotPosition: Points.Point|Points.Point[], opts?: DrawingOpts & {radius: number, outlined?: boolean, filled?: boolean}): void {\r\n      dot(ctx, dotPosition, opts);\r\n    },\r\n    circle(circlesToDraw:Circles.CirclePositioned|Circles.CirclePositioned[], opts:DrawingOpts):void {\r\n      circle(ctx, circlesToDraw, opts);\r\n    },\r\n    arc(arcsToDraw:Arcs.ArcPositioned|Arcs.ArcPositioned[], opts:DrawingOpts):void {\r\n      arc(ctx, arcsToDraw, opts);\r\n    },\r\n    textBlock(lines:string[], opts:DrawingOpts & { anchor:Points.Point, anchorPadding?:number, bounds?: Rects.RectPositioned}):void {\r\n      if (opts.bounds === undefined && canvasBounds !== undefined) opts = {...opts, bounds: {...canvasBounds, x:0, y:0 }};\r\n      textBlock(ctx, lines, opts);\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Drawing options\r\n */\r\ntype DrawingOpts = {\r\n  /**\r\n   * Stroke style\r\n   */\r\n  readonly strokeStyle?:string\r\n  /**\r\n   * Fill style\r\n   */\r\n  readonly fillStyle?:string\r\n  /**\r\n   * If true, diagnostic helpers will be drawn\r\n   */\r\n  readonly debug?:boolean\r\n};\r\n\r\n/**\r\n * Creates a drawing op to apply provided options\r\n * @param opts Drawing options that apply\r\n * @returns Stack\r\n */\r\nconst optsOp = (opts:DrawingOpts):StackOp => coloringOp(opts.strokeStyle, opts.fillStyle);\r\n\r\n/**\r\n * Applies drawing options to `ctx`, returning a {@link DrawingStack}\r\n * @param ctx Context\r\n * @param opts Options\r\n * @returns \r\n */\r\nconst applyOpts = (ctx:CanvasRenderingContext2D, opts:DrawingOpts = {}):DrawingStack => {\r\n  if (ctx === undefined) throw Error(`ctx undefined`);\r\n\r\n  // Create a drawing stack, pushing an op generated from drawing options\r\n  const stack = drawingStack(ctx).push(optsOp(opts));\r\n  \r\n  // Apply stack to context\r\n  stack.apply();\r\n  return stack;\r\n};\r\n\r\n/**\r\n * Draws one or more arcs.\r\n * @param ctx \r\n * @param arcs \r\n * @param opts \r\n */\r\nexport const arc = (ctx:CanvasRenderingContext2D, arcs:Arcs.ArcPositioned|ReadonlyArray<Arcs.ArcPositioned>, opts:DrawingOpts = {}) => {\r\n  applyOpts(ctx, opts);\r\n\r\n  const draw = (arc:Arcs.ArcPositioned) => {\r\n    ctx.beginPath();\r\n    ctx.arc(arc.x, arc.y, arc.radius, arc.startRadian, arc.endRadian);\r\n    ctx.stroke();\r\n  };\r\n\r\n  if (Array.isArray(arcs)) {\r\n    arcs.forEach(draw);\r\n  } else draw(arcs as Arcs.ArcPositioned);\r\n};\r\n\r\n/**\r\n * A drawing stack operation\r\n */\r\ntype StackOp = (ctx:CanvasRenderingContext2D) => void;\r\n\r\n/**\r\n * A drawing stack (immutable)\r\n */\r\ntype DrawingStack = Readonly<{\r\n  /**\r\n   * Push a new drawing op\r\n   * @param op Operation to add\r\n   * @returns stack with added op\r\n   */\r\n  push(op:StackOp):DrawingStack\r\n  /**\r\n   * Pops an operatiomn\r\n   * @returns Drawing stack with item popped\r\n   */\r\n  pop():DrawingStack\r\n  /**\r\n   * Applies drawing stack\r\n   */\r\n  apply():DrawingStack\r\n}>\r\n\r\n/**\r\n * Colouring drawing op. Applies `fillStyle` and `strokeStyle`\r\n * @param strokeStyle \r\n * @param fillStyle \r\n * @returns \r\n */\r\nconst coloringOp = (strokeStyle:string|CanvasGradient|CanvasPattern|undefined, fillStyle:string|CanvasGradient|CanvasPattern|undefined):StackOp => {\r\n\r\n  const apply = (ctx:CanvasRenderingContext2D) => {\r\n    // eslint-disable-next-line functional/immutable-data\r\n    if (fillStyle) ctx.fillStyle = fillStyle;\r\n    // eslint-disable-next-line functional/immutable-data\r\n    if (strokeStyle) ctx.strokeStyle = strokeStyle;\r\n  };\r\n  return apply;\r\n};\r\n\r\n/**\r\n * Creates and returns an immutable drawing stack for a context\r\n * @param ctx Context\r\n * @param stk Initial stack operations\r\n * @returns \r\n */\r\nexport const drawingStack = (ctx:CanvasRenderingContext2D, stk?:Stack<StackOp>):DrawingStack => {\r\n  if (stk === undefined) stk = stack<StackOp>();\r\n\r\n  const push = (op:StackOp):DrawingStack => {\r\n    if (stk === undefined) stk = stack<StackOp>();\r\n    const s = stk.push(op);\r\n    op(ctx);\r\n    return drawingStack(ctx, s);\r\n  };\r\n\r\n  const pop = ():DrawingStack => {\r\n    const s = stk?.pop();\r\n    return drawingStack(ctx, s);\r\n  };\r\n\r\n  const apply = ():DrawingStack => {\r\n    if (stk === undefined) return drawingStack(ctx);\r\n    stk.forEach(op => op(ctx));\r\n    return drawingStack(ctx, stk);\r\n  };\r\n\r\n  return {push, pop, apply};\r\n};\r\n\r\nexport const lineThroughPoints = (ctx:CanvasRenderingContext2D, points:readonly Points.Point[], opts?:DrawingOpts):void => {\r\n  applyOpts(ctx, opts);\r\n  \r\n  // https://stackoverflow.com/questions/7054272/how-to-draw-smooth-curve-through-n-points-using-javascript-html5-canvas\r\n  ctx.moveTo((points[0].x), points[0].y);\r\n\r\n  points.forEach((p, index) => {\r\n    if (index + 2 >= points.length) return;\r\n    const pNext = points[index+1];\r\n    const mid = {\r\n      x: (p.x + pNext.x) / 2,\r\n      y: (p.y + pNext.y) / 2\r\n    };\r\n    const cpX1 = (mid.x + p.x) / 2;\r\n    const cpX2 = (mid.x + pNext.x) / 2;\r\n    ctx.quadraticCurveTo(cpX1, pNext.y, mid.x, mid.y);\r\n    ctx.quadraticCurveTo(cpX2, pNext.y, pNext.x, pNext.y);\r\n  });\r\n};\r\n\r\n/**\r\n * Draws one or more circles\r\n * @param ctx \r\n * @param circlesToDraw \r\n * @param opts \r\n */\r\nexport const circle = (ctx:CanvasRenderingContext2D, circlesToDraw:Circles.CirclePositioned|readonly Circles.CirclePositioned[], opts:DrawingOpts = {}) => {\r\n  applyOpts(ctx, opts);\r\n\r\n  const draw = (c:Circles.CirclePositioned) => {\r\n    ctx.beginPath();\r\n    ctx.arc(c.x, c.y, c.radius, 0, PIPI);\r\n    ctx.stroke();\r\n  };\r\n  if (Array.isArray(circlesToDraw)) circlesToDraw.forEach(draw);\r\n  else draw(circlesToDraw as Circles.CirclePositioned);\r\n};\r\n\r\n/**\r\n * Draws one or more paths.\r\n * supported paths are quadratic beziers and lines.\r\n * @param ctx\r\n * @param pathsToDraw \r\n * @param opts \r\n */\r\nexport const paths = (ctx: CanvasRenderingContext2D, pathsToDraw: readonly Paths.Path[]|Paths.Path, opts: Readonly<{readonly strokeStyle?: string, readonly debug?: boolean}> = {}) =>  {\r\n  applyOpts(ctx, opts);\r\n\r\n  const draw = (path:Paths.Path) => {\r\n    // Call appropriate drawing function depending on the type of path\r\n    if (Beziers.isQuadraticBezier(path)) quadraticBezier(ctx, path, opts);\r\n    else if (Lines.isLine(path)) line(ctx, path, opts);\r\n    else throw new Error(`Unknown path type ${JSON.stringify(path)}`);\r\n  };\r\n\r\n  if (Array.isArray(pathsToDraw)) pathsToDraw.forEach(draw);\r\n  else draw(pathsToDraw as Paths.Path);\r\n};\r\n\r\n/**\r\n * Draws a line between all the given points.\r\n *\r\n * @param ctx\r\n * @param pts\r\n */\r\nexport const connectedPoints = (ctx: CanvasRenderingContext2D, pts: readonly Points.Point[], opts: {readonly loop?: boolean, readonly strokeStyle?: string} = {}) => {\r\n  const shouldLoop = opts.loop ?? false;\r\n\r\n  guardArray(pts);\r\n  if (pts.length === 0) return;\r\n\r\n  // Throw an error if any point is invalid\r\n  pts.forEach((pt, i) => Points.guard(pt, `Index ${i}`));\r\n\r\n  applyOpts(ctx, opts);\r\n\r\n  // Draw points\r\n  ctx.beginPath();\r\n  ctx.moveTo(pts[0].x, pts[0].y);\r\n  pts.forEach((pt) => ctx.lineTo(pt.x, pt.y));\r\n\r\n  if (shouldLoop) ctx.lineTo(pts[0].x, pts[0].y);\r\n  // if (opts.strokeStyle) ctx.strokeStyle = opts.strokeStyle;\r\n  ctx.stroke();\r\n};\r\n\r\n/**\r\n * Draws labels for a set of points\r\n * @param ctx \r\n * @param pts Points to draw\r\n * @param opts \r\n * @param labels Labels for points\r\n */\r\nexport const pointLabels = (ctx: CanvasRenderingContext2D, pts: readonly Points.Point[], opts: {readonly fillStyle?:string} = {}, labels?:readonly string[]) => {\r\n  if (pts.length === 0) return;\r\n\r\n  // Throw an error if any point is invalid\r\n  pts.forEach((pt, i) => Points.guard(pt, `Index ${i}`));\r\n\r\n  applyOpts(ctx, opts);\r\n\r\n  pts.forEach((pt, i) => {\r\n    const label = (labels !== undefined && i<labels.length) ? labels[i] : i.toString();\r\n    ctx.fillText(label.toString(), pt.x, pt.y);    \r\n  });\r\n};\r\n\r\n/**\r\n * Draws filled circle(s) at provided point(s)\r\n * @param ctx\r\n * @param pos \r\n * @param opts \r\n */\r\nconst dot = (ctx: CanvasRenderingContext2D, pos: Points.Point|readonly Points.Point[], opts?: DrawingOpts & {readonly radius?: number, readonly outlined?: boolean, readonly filled?: boolean})  => {\r\n  if (opts === undefined) opts = {};\r\n  const radius = opts.radius ?? 10;\r\n  \r\n  applyOpts(ctx, opts);\r\n\r\n  ctx.beginPath();\r\n\r\n  // x&y for arc is the center of circle\r\n  if (Array.isArray(pos)) {\r\n    pos.forEach(p => {\r\n      ctx.arc(p.x, p.y, radius, 0, 2 * Math.PI);\r\n    });\r\n  } else {\r\n    const p = pos as Points.Point;\r\n    ctx.arc(p.x, p.y, radius, 0, 2 * Math.PI);\r\n  }\r\n\r\n  if (opts.filled || !opts.outlined) ctx.fill();\r\n  if (opts.outlined) ctx.stroke();\r\n};\r\n\r\n\r\n/**\r\n * Draws a cubic or quadratic bezier\r\n * @param ctx \r\n * @param bezierToDraw \r\n * @param opts \r\n */\r\nexport const bezier = (ctx: CanvasRenderingContext2D, bezierToDraw: Beziers.QuadraticBezier|Beziers.CubicBezier, opts?: DrawingOpts) => {\r\n  if (Beziers.isQuadraticBezier(bezierToDraw)) {\r\n    quadraticBezier(ctx, bezierToDraw, opts);\r\n  } else if (Beziers.isCubicBezier(bezierToDraw)) {\r\n    cubicBezier(ctx, bezierToDraw, opts);\r\n  }\r\n};\r\n\r\nconst cubicBezier = (ctx: CanvasRenderingContext2D, bezierToDraw: Beziers.CubicBezier, opts: DrawingOpts = {}) => {\r\n  // eslint-disable-next-line functional/no-let\r\n  let stack = applyOpts(ctx, opts);\r\n\r\n  const {a, b, cubic1, cubic2} = bezierToDraw;\r\n  const isDebug = opts.debug ?? false;\r\n\r\n  if (isDebug) {\r\n    /*\r\n     * const ss = ctx.strokeStyle;\r\n     * ctx.strokeStyle = ss;\r\n     */\r\n  }\r\n  ctx.beginPath();\r\n  ctx.moveTo(a.x, a.y);\r\n  ctx.bezierCurveTo(cubic1.x, cubic1.y, cubic2.x, cubic2.y, b.x, b.y);\r\n  ctx.stroke();\r\n\r\n  if (isDebug) {\r\n    stack = stack.push(optsOp({...opts, \r\n      strokeStyle: color2k.transparentize(opts.strokeStyle ?? `silver`, 0.6),\r\n      fillStyle: color2k.transparentize(opts.fillStyle ?? `yellow`, 0.4)}));\r\n\r\n    stack.apply();\r\n    ctx.moveTo(a.x, a.y);\r\n    ctx.lineTo(cubic1.x, cubic1.y);\r\n    ctx.stroke();\r\n    ctx.moveTo(b.x, b.y);\r\n    ctx.lineTo(cubic2.x, cubic2.y);\r\n    ctx.stroke();\r\n\r\n    ctx.fillText(`a`, a.x + 5, a.y);\r\n    ctx.fillText(`b`, b.x + 5, b.y);\r\n    ctx.fillText(`c1`, cubic1.x + 5, cubic1.y);\r\n    ctx.fillText(`c2`, cubic2.x + 5, cubic2.y);\r\n\r\n    dot(ctx, cubic1, {radius: 3});\r\n    dot(ctx, cubic2, {radius: 3});\r\n    dot(ctx, a, {radius: 3});\r\n    dot(ctx, b, {radius: 3});\r\n    stack = stack.pop();\r\n    stack.apply();\r\n  }\r\n};\r\n\r\nconst quadraticBezier = (ctx: CanvasRenderingContext2D, bezierToDraw: Beziers.QuadraticBezier, opts: DrawingOpts = {}) => {\r\n  const {a, b, quadratic} = bezierToDraw;\r\n  const isDebug = opts.debug ?? false;\r\n  // eslint-disable-next-line functional/no-let\r\n  let stack = applyOpts(ctx, opts);\r\n\r\n  ctx.beginPath();\r\n  ctx.moveTo(a.x, a.y);\r\n  ctx.quadraticCurveTo(quadratic.x, quadratic.y, b.x, b.y);\r\n  ctx.stroke();\r\n\r\n  if (isDebug) {\r\n    /*\r\n     * const fs = ctx.fillStyle;\r\n     * const ss = ctx.strokeStyle;\r\n     * ctx.fillStyle = opts.strokeStyle ?? `gray`;\r\n     * ctx.strokeStyle = opts.strokeStyle ?? `gray`;\r\n     */\r\n    stack = stack.push(optsOp({...opts, \r\n      strokeStyle: color2k.transparentize(opts.strokeStyle ?? `silver`, 0.6),\r\n      fillStyle: color2k.transparentize(opts.fillStyle ?? `yellow`, 0.4)}));\r\n    connectedPoints(ctx, [a, quadratic, b]);\r\n\r\n    ctx.fillText(`a`, a.x + 5, a.y);\r\n    ctx.fillText(`b`, b.x + 5, b.y);\r\n    ctx.fillText(`h`, quadratic.x + 5, quadratic.y);\r\n    dot(ctx, quadratic, {radius: 3});\r\n    dot(ctx, a, {radius: 3});\r\n    dot(ctx, b, {radius: 3});\r\n    /*\r\n     * ctx.fillStyle = fs;\r\n     * ctx.strokeStyle = ss;\r\n     */\r\n    stack = stack.pop();\r\n    stack.apply();\r\n  }\r\n};\r\n\r\n/**\r\n * Draws one or more lines\r\n * @param ctx\r\n * @param toDraw \r\n * @param opts \r\n */\r\nexport const line = (ctx: CanvasRenderingContext2D, toDraw: Lines.Line|readonly Lines.Line[], opts: {readonly strokeStyle?: string, readonly debug?: boolean} = {}) => {\r\n  const isDebug = opts.debug ?? false;\r\n\r\n  applyOpts(ctx, opts);\r\n\r\n  const draw = (d:Lines.Line) => {\r\n    const {a, b} = d;\r\n    ctx.beginPath();\r\n    ctx.moveTo(a.x, a.y);\r\n    ctx.lineTo(b.x, b.y);\r\n    if (isDebug) { \r\n      ctx.fillText(`a`, a.x, a.y);\r\n      ctx.fillText(`b`, b.x, b.y);\r\n      dot(ctx, a, {radius: 5, strokeStyle: `black`});\r\n      dot(ctx, b, {radius: 5, strokeStyle: `black`});\r\n    }\r\n    ctx.stroke();\r\n  };\r\n\r\n  if (Array.isArray(toDraw)) toDraw.forEach(draw);\r\n  else draw(toDraw as Lines.Line);\r\n};\r\n\r\n/**\r\n * Draws one or more rectangles\r\n * @param ctx\r\n * @param toDraw \r\n * @param opts \r\n */\r\nexport const rect = (ctx: CanvasRenderingContext2D, toDraw: Rects.RectPositioned|readonly Rects.RectPositioned[], opts: DrawingOpts & {readonly filled?:boolean} = {}) => {\r\n  applyOpts(ctx, opts);\r\n\r\n  const draw = (d:Rects.RectPositioned) => {\r\n    if (opts.filled) ctx.fillRect(d.x, d.y, d.width, d.height);\r\n    ctx.strokeRect(d.x, d.y, d.width, d.height);\r\n\r\n    if (opts.debug) {\r\n      pointLabels(ctx, Rects.getCorners(d), undefined, [`NW`, `NE`, `SE`, `SW`]);\r\n    }\r\n  };\r\n\r\n  if (Array.isArray(toDraw)) toDraw.forEach(draw);\r\n  else draw(toDraw as Rects.RectPositioned);\r\n};\r\n\r\n/**\r\n * Draws a block of text. Each array item is considered a line.\r\n * @param ctx\r\n * @param lines \r\n * @param opts \r\n */\r\nexport const textBlock = (ctx:CanvasRenderingContext2D, lines:readonly string[], opts:DrawingOpts & {readonly anchor:Points.Point, readonly anchorPadding?:number, readonly bounds?: Rects.RectPositioned}) => {\r\n  applyOpts(ctx, opts);\r\n  const anchorPadding = opts.anchorPadding ?? 0;\r\n\r\n  const anchor = opts.anchor;\r\n  const bounds = opts.bounds ?? {x:0, y:0, width:1000000, height:1000000};\r\n\r\n  // Measure each line\r\n  const blocks = lines.map(l => ctx.measureText(l));\r\n\r\n  // Get width and height\r\n  const widths = blocks.map(tm => tm.width);\r\n  const heights = blocks.map(tm => tm.actualBoundingBoxAscent + tm.actualBoundingBoxDescent);\r\n\r\n  // Find extremes\r\n  const maxWidth = Math.max(...widths);\r\n  const totalHeight = heights.reduce((acc, val) => acc+val, 0);\r\n\r\n  // eslint-disable-next-line functional/no-let\r\n  let {x, y} = anchor;\r\n\r\n  if (anchor.x + maxWidth > bounds.width) x = bounds.width - (maxWidth + anchorPadding);\r\n  else x -= anchorPadding;\r\n  \r\n  if (x < bounds.x) x = bounds.x + anchorPadding;\r\n\r\n  if (anchor.y + totalHeight > bounds.height) y = bounds.height - (totalHeight + anchorPadding);\r\n  else y -= anchorPadding;\r\n\r\n  if (y < bounds.y) y = bounds.y + anchorPadding;\r\n\r\n  lines.forEach((line, i) => {\r\n    ctx.fillText(line, x, y);\r\n    y += heights[i];\r\n  });\r\n};","/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */\nfunction guard(low: number, high: number, value: number): number {\n  return Math.min(Math.max(low, value), high);\n}\n\nexport default guard;\n","class ColorError extends Error {\n  constructor(color: string) {\n    super(`Failed to parse color: \"${color}\"`);\n  }\n}\n\nexport default ColorError;\n","import guard from './guard';\nimport ColorError from './ColorError';\n\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */\nfunction parseToRgba(color: string): [number, number, number, number] {\n  if (typeof color !== 'string') throw new ColorError(color);\n  if (color.trim().toLowerCase() === 'transparent') return [0, 0, 0, 0];\n\n  let normalizedColor = color.trim();\n  normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n\n  const reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n  if (reducedHexMatch) {\n    const arr = Array.from(reducedHexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(r(x, 2), 16)),\n      parseInt(r(arr[3] || 'f', 2), 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const hexMatch = hexRegex.exec(normalizedColor);\n  if (hexMatch) {\n    const arr = Array.from(hexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 16)),\n      parseInt(arr[3] || 'ff', 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const rgbaMatch = rgbaRegex.exec(normalizedColor);\n  if (rgbaMatch) {\n    const arr = Array.from(rgbaMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 10)),\n      parseFloat(arr[3] || '1'),\n    ] as [number, number, number, number];\n  }\n\n  const hslaMatch = hslaRegex.exec(normalizedColor);\n  if (hslaMatch) {\n    const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);\n    if (guard(0, 100, s) !== s) throw new ColorError(color);\n    if (guard(0, 100, l) !== l) throw new ColorError(color);\n    return [...hslToRgb(h, s, l), a || 1] as [number, number, number, number];\n  }\n\n  throw new ColorError(color);\n}\n\nfunction hash(str: string) {\n  let hash = 5381;\n  let i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return (hash >>> 0) % 2341;\n}\n\nconst colorToInt = (x: string) => parseInt(x.replace(/_/g, ''), 36);\n\nconst compressedColorMap = '1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm'\n  .split(' ')\n  .reduce((acc, next) => {\n    const key = colorToInt(next.substring(0, 3));\n    const hex = colorToInt(next.substring(3)).toString(16);\n\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    let prefix = '';\n    for (let i = 0; i < 6 - hex.length; i++) {\n      prefix += '0';\n    }\n\n    acc[key] = `${prefix}${hex}`;\n    return acc;\n  }, {} as { [key: string]: string });\n\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */\nfunction nameToHex(color: string): string {\n  const normalizedColorName = color.toLowerCase().trim();\n  const result = compressedColorMap[hash(normalizedColorName)];\n  if (!result) throw new ColorError(color);\n  return `#${result}`;\n}\n\nconst r = (str: string, amount: number) =>\n  Array.from(Array(amount))\n    .map(() => str)\n    .join('');\n\nconst reducedHexRegex = new RegExp(`^#${r('([a-f0-9])', 3)}([a-f0-9])?$`, 'i');\nconst hexRegex = new RegExp(`^#${r('([a-f0-9]{2})', 3)}([a-f0-9]{2})?$`, 'i');\nconst rgbaRegex = new RegExp(\n  `^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*${r(\n    ',\\\\s*(\\\\d+)\\\\s*',\n    2\n  )}(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$`,\n  'i'\n);\nconst hslaRegex = /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nconst namedColorRegex = /^[a-z]+$/i;\n\nconst roundColor = (color: number): number => {\n  return Math.round(color * 255);\n};\n\nconst hslToRgb = (\n  hue: number,\n  saturation: number,\n  lightness: number\n): [number, number, number] => {\n  let l = lightness / 100;\n  if (saturation === 0) {\n    // achromatic\n    return [l, l, l].map(roundColor) as [number, number, number];\n  }\n\n  // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n  const huePrime = (((hue % 360) + 360) % 360) / 60;\n  const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n  const secondComponent = chroma * (1 - Math.abs((huePrime % 2) - 1));\n\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n\n  const lightnessModification = l - chroma / 2;\n  const finalRed = red + lightnessModification;\n  const finalGreen = green + lightnessModification;\n  const finalBlue = blue + lightnessModification;\n\n  return [finalRed, finalGreen, finalBlue].map(roundColor) as [\n    number,\n    number,\n    number\n  ];\n};\n\nexport default parseToRgba;\n","// taken from:\n// https://github.com/styled-components/polished/blob/a23a6a2bb26802b3d922d9c3b67bac3f3a54a310/src/internalHelpers/_rgbToHsl.js\nimport parseToRgba from './parseToRgba';\n\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */\nfunction parseToHsla(color: string): [number, number, number, number] {\n  const [red, green, blue, alpha] = parseToRgba(color).map((value, index) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? value : value / 255\n  );\n\n  const max = Math.max(red, green, blue);\n  const min = Math.min(red, green, blue);\n  const lightness = (max + min) / 2;\n\n  // achromatic\n  if (max === min) return [0, 0, lightness, alpha];\n\n  const delta = max - min;\n  const saturation =\n    lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n\n  const hue =\n    60 *\n    (red === max\n      ? (green - blue) / delta + (green < blue ? 6 : 0)\n      : green === max\n      ? (blue - red) / delta + 2\n      : (red - green) / delta + 4);\n\n  return [hue, saturation, lightness, alpha];\n}\n\nexport default parseToHsla;\n","import guard from './guard';\n\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction hsla(\n  hue: number,\n  saturation: number,\n  lightness: number,\n  alpha: number\n): string {\n  return `hsla(${(hue % 360).toFixed()}, ${guard(\n    0,\n    100,\n    saturation * 100\n  ).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default hsla;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Adjusts the current hue of the color by the given degrees. Wraps around when\n * over 360.\n *\n * @param color input color\n * @param degrees degrees to adjust the input color, accepts degree integers\n * (0 - 360) and wraps around on overflow\n */\nfunction adjustHue(color: string, degrees: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h + degrees, s, l, a);\n}\n\nexport default adjustHue;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction darken(color: string, amount: number): string {\n  const [hue, saturation, lightness, alpha] = parseToHsla(color);\n  return hsla(hue, saturation, lightness - amount, alpha);\n}\n\nexport default darken;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Desaturates the input color by the given amount via subtracting from the `s`\n * in `hsla`.\n *\n * @param amount The amount to desaturate, given as a decimal between 0 and 1\n */\nfunction desaturate(color: string, amount: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h, s - amount, l, a);\n}\n\nexport default desaturate;\n","import parseToRgba from './parseToRgba';\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js\n\n/**\n * Returns a number (float) representing the luminance of a color.\n */\nfunction getLuminance(color: string): number {\n  if (color === 'transparent') return 0;\n\n  function f(x: number) {\n    const channel = x / 255;\n    return channel <= 0.03928\n      ? channel / 12.92\n      : Math.pow(((channel + 0.055) / 1.055), 2.4);\n  }\n\n  const [r, g, b] = parseToRgba(color);\n  return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);\n}\n\nexport default getLuminance;\n","// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getContrast.js\nimport getLuminance from './getLuminance';\n\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n */\nfunction getContrast(color1: string, color2: string): number {\n  const luminance1 = getLuminance(color1);\n  const luminance2 = getLuminance(color2);\n\n  return luminance1 > luminance2\n    ? (luminance1 + 0.05) / (luminance2 + 0.05)\n    : (luminance2 + 0.05) / (luminance1 + 0.05);\n}\n\nexport default getContrast;\n","import guard from './guard';\n\n/**\n * Takes in rgba parts and returns an rgba string\n *\n * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive\n * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive\n * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction rgba(red: number, green: number, blue: number, alpha: number): string {\n  return `rgba(${guard(0, 255, red).toFixed()}, ${guard(\n    0,\n    255,\n    green\n  ).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default rgba;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Mixes two colors together. Taken from sass's implementation.\n */\nfunction mix(color1: string, color2: string, weight: number): string {\n  const normalize = (n: number, index: number) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? n : n / 255;\n\n  const [r1, g1, b1, a1] = parseToRgba(color1).map(normalize);\n  const [r2, g2, b2, a2] = parseToRgba(color2).map(normalize);\n\n  // The formula is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n  const alphaDelta = a2 - a1;\n  const normalizedWeight = weight * 2 - 1;\n  const combinedWeight =\n    normalizedWeight * alphaDelta === -1\n      ? normalizedWeight\n      : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);\n  const weight2 = (combinedWeight + 1) / 2;\n  const weight1 = 1 - weight2;\n\n  const r = (r1 * weight1 + r2 * weight2) * 255;\n  const g = (g1 * weight1 + g2 * weight2) * 255;\n  const b = (b1 * weight1 + b2 * weight2) * 255;\n  const a = a2 * weight + a1 * (1 - weight);\n\n  return rgba(r, g, b, a);\n}\n\nexport default mix;\n","import mix from './mix';\nimport guard from './guard';\n\n/**\n * Given a series colors, this function will return a `scale(x)` function that\n * accepts a percentage as a decimal between 0 and 1 and returns the color at\n * that percentage in the scale.\n *\n * ```js\n * const scale = getScale('red', 'yellow', 'green');\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(0.5)); // rgba(255, 255, 0, 1)\n * console.log(scale(1)); // rgba(0, 128, 0, 1)\n * ```\n *\n * If you'd like to limit the domain and range like chroma-js, we recommend\n * wrapping scale again.\n *\n * ```js\n * const _scale = getScale('red', 'yellow', 'green');\n * const scale = x => _scale(x / 100);\n *\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(50)); // rgba(255, 255, 0, 1)\n * console.log(scale(100)); // rgba(0, 128, 0, 1)\n * ```\n */\nfunction getScale(...colors: string[]): (n: number) => string {\n  return (n) => {\n    const lastIndex = colors.length - 1;\n    const lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));\n    const highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));\n\n    const color1 = colors[lowIndex];\n    const color2 = colors[highIndex];\n\n    const unit = 1 / lastIndex;\n    const weight = (n - unit * lowIndex) / unit;\n\n    return mix(color1, color2, weight);\n  };\n}\n\nexport default getScale;\n","import getContrast from './getContrast';\n\nconst guidelines = {\n  decorative: 1.5,\n  readable: 3,\n  aa: 4.5,\n  aaa: 7,\n};\n\n/**\n * Returns whether or not a color has bad contrast against \n * a white background according to a given standard\n */\nfunction hasBadContrast(\n  color: string,\n  standard: 'decorative' | 'readable' | 'aa' | 'aaa' = 'aa'\n): boolean {\n  return getContrast(color, '#fff') < guidelines[standard];\n}\n\nexport default hasBadContrast;\n","import darken from './darken';\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction lighten(color: string, amount: number): string {\n  return darken(color, -amount);\n}\n\nexport default lighten;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in a color and makes it more transparent by convert to `rgba` and\n * decreasing the amount in the alpha channel.\n *\n * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1\n */\nfunction transparentize(color: string, amount: number): string {\n  const [r, g, b, a] = parseToRgba(color);\n  return rgba(r, g, b, a - amount);\n}\n\nexport default transparentize;\n","import transparentize from './transparentize';\n\n/**\n * Takes a color and un-transparentizes it. Equivalent to\n * `transparentize(color, -amount)`\n *\n * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1\n */\nfunction opacify(color: string, amount: number): string {\n  return transparentize(color, -amount);\n}\n\nexport default opacify;\n","import getLuminance from './getLuminance';\n\n/**\n * An alternative function to `readableColor`. Returns whether or not the \n * readable color (i.e. the color to be place on top the input color) should be\n * black.\n */\nfunction readableColorIsBlack(color: string): boolean {\n  return getLuminance(color) > 0.179;\n}\n\nexport default readableColorIsBlack;\n","import readableColorIsBlack from './readableColorIsBlack';\n\n/**\n * Returns black or white for best contrast depending on the luminosity of the\n * given color.\n */\nfunction readableColor(color: string): string {\n  return readableColorIsBlack(color) ? '#000' : '#fff';\n}\n\nexport default readableColor;\n","import desaturate from './desaturate';\n\n/**\n * Saturates a color by converting it to `hsl` and increasing the saturation\n * amount. Equivalent to `desaturate(color, -amount)`\n * \n * @param color Input color\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction saturate(color: string, amount: number): string {\n  return desaturate(color, -amount);\n}\n\nexport default saturate;\n","import parseToRgba from './parseToRgba';\nimport guard from './guard';\n\n/**\n * Takes in any color and returns it as a hex code.\n */\nfunction toHex(color: string): string {\n  const [r, g, b, a] = parseToRgba(color);\n\n  let hex = (x: number) => {\n    const h = guard(0, 255, x).toString(16);\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    return h.length === 1 ? `0${h}` : h;\n  };\n\n  return `#${hex(r)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : ''}`;\n}\n\nexport default toHex;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in any color and returns it as an rgba string.\n */\nfunction toRgba(color: string): string {\n  return rgba(...parseToRgba(color));\n}\n\nexport default toRgba;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Takes in any color and returns it as an hsla string.\n */\nfunction toHsla(color: string): string {\n  return hsla(...parseToHsla(color));\n}\n\nexport default toHsla;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACOA,WAAe,IAAa,IAAc,IAAA;AACxC,SAAO,KAAK,IAAI,KAAK,IAAI,IAAK,KAAQ;;ACRxC,sBAAyB,MAAA;EACvB,YAAY,IAAA;AACV,UAAA,2BAAiC;;;ACMrC,WAAqB,IAAA;AACnB,MAAqB,AAAA,OAAV,MAAU;AAAU,UAAA,IAAU,EAAW;AACpD,MAAmC,AAA/B,GAAM,OAAO,kBAAkB;AAAe,WAAO,CAAC,GAAG,GAAG,GAAG;AAEnE,MAAI,KAAkB,GAAM;AAC5B,OAAkB,EAAgB,KAAK,MA4EzC,SAAmB,IAAA;AACjB,UAAM,KAAsB,GAAM,cAAc,QAC1C,KAAS,EAtCjB,SAAc,IAAA;AACZ,UAAI,KAAO,MACP,KAAI,GAAI;AAEZ,aAAO;AACL,aAAe,KAAP,KAAa,GAAI,WAAA,EAAa;AAMxC,aAAQ,QAAS,KAAK;MA2BiB;AACvC,QAAA,CAAK;AAAQ,YAAA,IAAU,EAAW;AAClC,WAAA,IAAW;IAhF+C,MAAS;AAEnE,QAAM,KAAkB,EAAgB,KAAK;AAC7C,MAAI,IAAiB;AACnB,UAAM,KAAM,MAAM,KAAK,IAAiB,MAAM;AAC9C,WAAO,CAAA,GACF,GAAI,MAAM,GAAG,GAAG,IAAK,QAAM,SAAS,EAAE,IAAG,IAAI,MAChD,SAAS,EAAE,GAAI,MAAM,KAAK,IAAI,MAAM;;AAIxC,QAAM,IAAW,EAAS,KAAK;AAC/B,MAAI,GAAU;AACZ,UAAM,KAAM,MAAM,KAAK,GAAU,MAAM;AACvC,WAAO,CAAA,GACF,GAAI,MAAM,GAAG,GAAG,IAAK,QAAM,SAAS,IAAG,MAC1C,SAAS,GAAI,MAAM,MAAM,MAAM;;AAInC,QAAM,IAAY,EAAU,KAAK;AACjC,MAAI,GAAW;AACb,UAAM,KAAM,MAAM,KAAK,GAAW,MAAM;AACxC,WAAO,CAAA,GACF,GAAI,MAAM,GAAG,GAAG,IAAK,QAAM,SAAS,IAAG,MAC1C,WAAW,GAAI,MAAM;;AAIzB,QAAM,IAAY,EAAU,KAAK;AACjC,MAAI,GAAW;AACb,UAAA,CAAO,IAAG,IAAG,IAAG,MAAK,MAAM,KAAK,GAAW,MAAM,GAAG,IAAI;AACxD,QAAI,EAAM,GAAG,KAAK,QAAO;AAAG,YAAA,IAAU,EAAW;AACjD,QAAI,EAAM,GAAG,KAAK,QAAO;AAAG,YAAA,IAAU,EAAW;AACjD,WAAO,CAAA,GAAI,EAAS,IAAG,IAAG,KAAI,MAAK;;AAGrC,QAAA,IAAU,EAAW;;AAiBvB,IAAM,IAAc,QAAc,SAAS,GAAE,QAAQ,MAAM,KAAK;AAAhE,IAEM,IAAqB,szCACxB,MAAM,KACN,OAAO,CAAC,IAAK,OAAA;AACZ,QAAM,KAAM,EAAW,GAAK,UAAU,GAAG,KACnC,KAAM,EAAW,GAAK,UAAU,IAAI,SAAS;AAInD,MAAI,KAAS;AACb,WAAS,KAAI,GAAG,KAAI,IAAI,GAAI,QAAQ;AAClC,UAAU;AAIZ,SADA,GAAI,MAAA,GAAU,KAAS,MAChB;GACN;AAjBL,IA6BM,IAAI,CAAC,IAAa,OACtB,MAAM,KAAK,MAAM,KACd,IAAI,MAAM,IACV,KAAK;AAhCV,IAkCM,IAAkB,IAAI,OAAA,KAAY,EAAE,cAAc,kBAAkB;AAlC1E,IAmCM,IAAW,IAAI,OAAA,KAAY,EAAE,iBAAiB,qBAAqB;AAnCzE,IAoCM,IAAY,IAAI,OAAA,0BACM,EACxB,mBACA,iCAEF;AAzCF,IA2CM,IAAY;AA3ClB,IA4CM,IAAkB;AA5CxB,IA8CM,IAAc,QACX,KAAK,MAAc,MAAR;AA/CpB,IAkDM,IAAW,CACf,IACA,IACA,OAAA;AAEA,MAAI,KAAI,KAAY;AACpB,MAAmB,AAAf,OAAe;AAEjB,WAAO,CAAC,IAAG,IAAG,IAAG,IAAI;AAIvB,QAAM,KAAc,MAAM,MAAO,OAAO,MAAO,IACzC,KAAU,KAAI,KAAK,IAAI,IAAI,KAAI,MAAO,MAAa,MACnD,KAAkB,KAAU,KAAI,KAAK,IAAK,KAAW,IAAK;AAEhE,MAAI,KAAM,GACN,KAAQ,GACR,KAAO;AAEP,QAAY,KAAK,KAAW,IAC9B,MAAM,IACN,KAAQ,MACC,MAAY,KAAK,KAAW,IACrC,MAAM,IACN,KAAQ,MACC,MAAY,KAAK,KAAW,IACrC,MAAQ,IACR,KAAO,MACE,MAAY,KAAK,KAAW,IACrC,MAAQ,IACR,KAAO,MACE,MAAY,KAAK,KAAW,IACrC,MAAM,IACN,KAAO,MACE,MAAY,KAAK,KAAW,KACrC,MAAM,IACN,KAAO;AAGT,QAAM,KAAwB,KAAI,KAAS;AAK3C,SAAO,CAJU,KAAM,IACJ,KAAQ,IACT,KAAO,IAEgB,IAAI;;AQxJ/C,WAAc,IAAa,IAAe,IAAc,IAAA;AACtD,SAAA,QAAe,EAAM,GAAG,KAAK,IAAK,cAAc,EAC9C,GACA,KACA,IACA,cAAc,EAAM,GAAG,KAAK,IAAM,cAAc,WAChD,EAAM,GAAG,GAAG,IAAO,QAAQ;;AKP/B,WAAwB,IAAe,IAAA;AACrC,QAAA,CAAO,IAAG,IAAG,IAAG,MAAK,EAAY;AACjC,SAAO,EAAK,IAAG,IAAG,IAAG,KAAI;;;;AhBG3B,IAAM,OAAO,KAAK,KAAK;AAShB,IAAM,SAAS,CAAC,uBAAgE;AACrF,MAAI,uBAAuB;AAAM,UAAM,MAAM;AAC7C,MAAI,uBAAuB;AAAW,UAAM,MAAM;AAElD,QAAM,MAAO,8BAA8B,2BACzC,qBAAsB,8BAA8B,oBAClD,mBAAmB,WAAW,QAAS,OAAO,uBAAuB,WACnE,UAA6B,oBAAoB,WAAW,QAAO;AACzE,MAAI,QAAQ;AAAM,UAAM,IAAI,MAAM;AAClC,SAAO;AAAA;AASF,IAAM,aAAa,CAAC,eAA8B,iBAA6B;AAEpF,QAAM,MAAM,OAAO;AACnB,SAAO;AAAA,IACL,MAAM,aAA2B,MAA0B;AACzD,YAAM,KAAK,aAAa;AAAA;AAAA,IAE1B,KAAK,YAAqC,MAA0B;AAClE,WAAK,KAAK,YAAY;AAAA;AAAA,IAExB,KAAK,aAAyD,MAA8C;AAC1G,WAAK,KAAK,aAAa;AAAA;AAAA,IAEzB,OAAO,cAA2D,MAAyB;AACzF,aAAO,KAAK,cAAc;AAAA;AAAA,IAE5B,gBAAgB,cAA8B,MAA6C;AACzF,sBAAgB,KAAK,cAAc;AAAA;AAAA,IAErC,YAAY,cAA8B,MAAyB;AACjE,kBAAY,KAAK,cAAc;AAAA;AAAA,IAEjC,IAAI,aAA0C,MAAmF;AAC/H,UAAI,KAAK,aAAa;AAAA;AAAA,IAExB,OAAO,eAAmE,MAAuB;AAC/F,aAAO,KAAK,eAAe;AAAA;AAAA,IAE7B,IAAI,YAAoD,MAAuB;AAC7E,UAAI,KAAK,YAAY;AAAA;AAAA,IAEvB,UAAU,OAAgB,MAAsG;AAC9H,UAAI,KAAK,WAAW,UAAa,iBAAiB;AAAW,eAAO,KAAI,MAAM,QAAQ,KAAI,cAAc,GAAE,GAAG,GAAE;AAC/G,gBAAU,KAAK,OAAO;AAAA;AAAA;AAAA;AA4B5B,IAAM,SAAS,CAAC,SAA6B,WAAW,KAAK,aAAa,KAAK;AAQ/E,IAAM,YAAY,CAAC,KAA8B,OAAmB,OAAoB;AACtF,MAAI,QAAQ;AAAW,UAAM,MAAM;AAGnC,QAAM,SAAQ,aAAa,KAAK,KAAK,OAAO;AAG5C,SAAM;AACN,SAAO;AAAA;AASF,IAAM,MAAM,CAAC,KAA8B,MAA2D,OAAmB,OAAO;AACrI,YAAU,KAAK;AAEf,QAAM,OAAO,CAAC,SAA2B;AACvC,QAAI;AACJ,QAAI,IAAI,KAAI,GAAG,KAAI,GAAG,KAAI,QAAQ,KAAI,aAAa,KAAI;AACvD,QAAI;AAAA;AAGN,MAAI,MAAM,QAAQ,OAAO;AACvB,SAAK,QAAQ;AAAA;AACR,SAAK;AAAA;AAmCd,IAAM,aAAa,CAAC,aAA2D,cAAoE;AAEjJ,QAAM,QAAQ,CAAC,QAAiC;AAE9C,QAAI;AAAW,UAAI,YAAY;AAE/B,QAAI;AAAa,UAAI,cAAc;AAAA;AAErC,SAAO;AAAA;AASF,IAAM,eAAe,CAAC,KAA8B,QAAqC;AAC9F,MAAI,QAAQ;AAAW,UAAM;AAE7B,QAAM,OAAO,CAAC,OAA4B;AACxC,QAAI,QAAQ;AAAW,YAAM;AAC7B,UAAM,KAAI,IAAI,KAAK;AACnB,OAAG;AACH,WAAO,aAAa,KAAK;AAAA;AAG3B,QAAM,MAAM,MAAmB;AAC7B,UAAM,KAAI,KAAK;AACf,WAAO,aAAa,KAAK;AAAA;AAG3B,QAAM,QAAQ,MAAmB;AAC/B,QAAI,QAAQ;AAAW,aAAO,aAAa;AAC3C,QAAI,QAAQ,QAAM,GAAG;AACrB,WAAO,aAAa,KAAK;AAAA;AAG3B,SAAO,EAAC,MAAM,KAAK;AAAA;AAGd,IAAM,oBAAoB,CAAC,KAA8B,QAAgC,SAA2B;AACzH,YAAU,KAAK;AAGf,MAAI,OAAQ,OAAO,GAAG,GAAI,OAAO,GAAG;AAEpC,SAAO,QAAQ,CAAC,GAAG,UAAU;AAC3B,QAAI,QAAQ,KAAK,OAAO;AAAQ;AAChC,UAAM,QAAQ,OAAO,QAAM;AAC3B,UAAM,MAAM;AAAA,MACV,GAAI,GAAE,IAAI,MAAM,KAAK;AAAA,MACrB,GAAI,GAAE,IAAI,MAAM,KAAK;AAAA;AAEvB,UAAM,OAAQ,KAAI,IAAI,EAAE,KAAK;AAC7B,UAAM,OAAQ,KAAI,IAAI,MAAM,KAAK;AACjC,QAAI,iBAAiB,MAAM,MAAM,GAAG,IAAI,GAAG,IAAI;AAC/C,QAAI,iBAAiB,MAAM,MAAM,GAAG,MAAM,GAAG,MAAM;AAAA;AAAA;AAUhD,IAAM,SAAS,CAAC,KAA8B,eAA4E,OAAmB,OAAO;AACzJ,YAAU,KAAK;AAEf,QAAM,OAAO,CAAC,OAA+B;AAC3C,QAAI;AACJ,QAAI,IAAI,GAAE,GAAG,GAAE,GAAG,GAAE,QAAQ,GAAG;AAC/B,QAAI;AAAA;AAEN,MAAI,MAAM,QAAQ;AAAgB,kBAAc,QAAQ;AAAA;AACnD,SAAK;AAAA;AAUL,IAAM,QAAQ,CAAC,KAA+B,aAA+C,OAA4E,OAAQ;AACtL,YAAU,KAAK;AAEf,QAAM,OAAO,CAAC,SAAoB;AAEhC,QAAI,AAAQ,kBAAkB;AAAO,sBAAgB,KAAK,MAAM;AAAA,aACvD,AAAM,OAAO;AAAO,WAAK,KAAK,MAAM;AAAA;AACxC,YAAM,IAAI,MAAM,qBAAqB,KAAK,UAAU;AAAA;AAG3D,MAAI,MAAM,QAAQ;AAAc,gBAAY,QAAQ;AAAA;AAC/C,SAAK;AAAA;AASL,IAAM,kBAAkB,CAAC,KAA+B,KAA8B,OAAiE,OAAO;AACnK,QAAM,aAAa,KAAK,QAAQ;AAEhC,QAAW;AACX,MAAI,IAAI,WAAW;AAAG;AAGtB,MAAI,QAAQ,CAAC,IAAI,OAAM,AAAO,MAAM,IAAI,SAAS;AAEjD,YAAU,KAAK;AAGf,MAAI;AACJ,MAAI,OAAO,IAAI,GAAG,GAAG,IAAI,GAAG;AAC5B,MAAI,QAAQ,CAAC,OAAO,IAAI,OAAO,GAAG,GAAG,GAAG;AAExC,MAAI;AAAY,QAAI,OAAO,IAAI,GAAG,GAAG,IAAI,GAAG;AAE5C,MAAI;AAAA;AAUC,IAAM,cAAc,CAAC,KAA+B,KAA8B,OAAqC,IAAI,WAA8B;AAC9J,MAAI,IAAI,WAAW;AAAG;AAGtB,MAAI,QAAQ,CAAC,IAAI,OAAM,AAAO,MAAM,IAAI,SAAS;AAEjD,YAAU,KAAK;AAEf,MAAI,QAAQ,CAAC,IAAI,OAAM;AACrB,UAAM,QAAS,WAAW,UAAa,KAAE,OAAO,SAAU,OAAO,MAAK,GAAE;AACxE,QAAI,SAAS,MAAM,YAAY,GAAG,GAAG,GAAG;AAAA;AAAA;AAU5C,IAAM,MAAM,CAAC,KAA+B,KAA2C,SAA6G;AAClM,MAAI,SAAS;AAAW,WAAO;AAC/B,QAAM,SAAS,KAAK,UAAU;AAE9B,YAAU,KAAK;AAEf,MAAI;AAGJ,MAAI,MAAM,QAAQ,MAAM;AACtB,QAAI,QAAQ,OAAK;AACf,UAAI,IAAI,EAAE,GAAG,EAAE,GAAG,QAAQ,GAAG,IAAI,KAAK;AAAA;AAAA,SAEnC;AACL,UAAM,IAAI;AACV,QAAI,IAAI,EAAE,GAAG,EAAE,GAAG,QAAQ,GAAG,IAAI,KAAK;AAAA;AAGxC,MAAI,KAAK,UAAU,CAAC,KAAK;AAAU,QAAI;AACvC,MAAI,KAAK;AAAU,QAAI;AAAA;AAUlB,IAAM,SAAS,CAAC,KAA+B,cAA2D,SAAuB;AACtI,MAAI,AAAQ,kBAAkB,eAAe;AAC3C,oBAAgB,KAAK,cAAc;AAAA,aAC1B,AAAQ,cAAc,eAAe;AAC9C,gBAAY,KAAK,cAAc;AAAA;AAAA;AAInC,IAAM,cAAc,CAAC,KAA+B,cAAmC,OAAoB,OAAO;AAEhH,MAAI,SAAQ,UAAU,KAAK;AAE3B,QAAM,EAAC,OAAG,GAAG,QAAQ,WAAU;AAC/B,QAAM,UAAU,KAAK,SAAS;AAE9B,MAAI,SAAS;AAAA;AAMb,MAAI;AACJ,MAAI,OAAO,GAAE,GAAG,GAAE;AAClB,MAAI,cAAc,OAAO,GAAG,OAAO,GAAG,OAAO,GAAG,OAAO,GAAG,EAAE,GAAG,EAAE;AACjE,MAAI;AAEJ,MAAI,SAAS;AACX,aAAQ,OAAM,KAAK,OAAO;AAAA,SAAI;AAAA,MAC5B,aAAa,AAAQ,EAAe,KAAK,eAAe,UAAU;AAAA,MAClE,WAAW,AAAQ,EAAe,KAAK,aAAa,UAAU;AAAA;AAEhE,WAAM;AACN,QAAI,OAAO,GAAE,GAAG,GAAE;AAClB,QAAI,OAAO,OAAO,GAAG,OAAO;AAC5B,QAAI;AACJ,QAAI,OAAO,EAAE,GAAG,EAAE;AAClB,QAAI,OAAO,OAAO,GAAG,OAAO;AAC5B,QAAI;AAEJ,QAAI,SAAS,KAAK,GAAE,IAAI,GAAG,GAAE;AAC7B,QAAI,SAAS,KAAK,EAAE,IAAI,GAAG,EAAE;AAC7B,QAAI,SAAS,MAAM,OAAO,IAAI,GAAG,OAAO;AACxC,QAAI,SAAS,MAAM,OAAO,IAAI,GAAG,OAAO;AAExC,QAAI,KAAK,QAAQ,EAAC,QAAQ;AAC1B,QAAI,KAAK,QAAQ,EAAC,QAAQ;AAC1B,QAAI,KAAK,IAAG,EAAC,QAAQ;AACrB,QAAI,KAAK,GAAG,EAAC,QAAQ;AACrB,aAAQ,OAAM;AACd,WAAM;AAAA;AAAA;AAIV,IAAM,kBAAkB,CAAC,KAA+B,cAAuC,OAAoB,OAAO;AACxH,QAAM,EAAC,OAAG,GAAG,cAAa;AAC1B,QAAM,UAAU,KAAK,SAAS;AAE9B,MAAI,SAAQ,UAAU,KAAK;AAE3B,MAAI;AACJ,MAAI,OAAO,GAAE,GAAG,GAAE;AAClB,MAAI,iBAAiB,UAAU,GAAG,UAAU,GAAG,EAAE,GAAG,EAAE;AACtD,MAAI;AAEJ,MAAI,SAAS;AAOX,aAAQ,OAAM,KAAK,OAAO;AAAA,SAAI;AAAA,MAC5B,aAAa,AAAQ,EAAe,KAAK,eAAe,UAAU;AAAA,MAClE,WAAW,AAAQ,EAAe,KAAK,aAAa,UAAU;AAAA;AAChE,oBAAgB,KAAK,CAAC,IAAG,WAAW;AAEpC,QAAI,SAAS,KAAK,GAAE,IAAI,GAAG,GAAE;AAC7B,QAAI,SAAS,KAAK,EAAE,IAAI,GAAG,EAAE;AAC7B,QAAI,SAAS,KAAK,UAAU,IAAI,GAAG,UAAU;AAC7C,QAAI,KAAK,WAAW,EAAC,QAAQ;AAC7B,QAAI,KAAK,IAAG,EAAC,QAAQ;AACrB,QAAI,KAAK,GAAG,EAAC,QAAQ;AAKrB,aAAQ,OAAM;AACd,WAAM;AAAA;AAAA;AAUH,IAAM,OAAO,CAAC,KAA+B,QAA0C,OAAkE,OAAO;AACrK,QAAM,UAAU,KAAK,SAAS;AAE9B,YAAU,KAAK;AAEf,QAAM,OAAO,CAAC,MAAiB;AAC7B,UAAM,EAAC,OAAG,MAAK;AACf,QAAI;AACJ,QAAI,OAAO,GAAE,GAAG,GAAE;AAClB,QAAI,OAAO,EAAE,GAAG,EAAE;AAClB,QAAI,SAAS;AACX,UAAI,SAAS,KAAK,GAAE,GAAG,GAAE;AACzB,UAAI,SAAS,KAAK,EAAE,GAAG,EAAE;AACzB,UAAI,KAAK,IAAG,EAAC,QAAQ,GAAG,aAAa;AACrC,UAAI,KAAK,GAAG,EAAC,QAAQ,GAAG,aAAa;AAAA;AAEvC,QAAI;AAAA;AAGN,MAAI,MAAM,QAAQ;AAAS,WAAO,QAAQ;AAAA;AACrC,SAAK;AAAA;AASL,IAAM,OAAO,CAAC,KAA+B,QAA8D,OAAiD,OAAO;AACxK,YAAU,KAAK;AAEf,QAAM,OAAO,CAAC,MAA2B;AACvC,QAAI,KAAK;AAAQ,UAAI,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE;AACnD,QAAI,WAAW,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE;AAEpC,QAAI,KAAK,OAAO;AACd,kBAAY,KAAK,AAAM,WAAW,IAAI,QAAW,CAAC,MAAM,MAAM,MAAM;AAAA;AAAA;AAIxE,MAAI,MAAM,QAAQ;AAAS,WAAO,QAAQ;AAAA;AACrC,SAAK;AAAA;AASL,IAAM,YAAY,CAAC,KAA8B,OAAyB,SAA8H;AAC7M,YAAU,KAAK;AACf,QAAM,gBAAgB,KAAK,iBAAiB;AAE5C,QAAM,SAAS,KAAK;AACpB,QAAM,SAAS,KAAK,UAAU,EAAC,GAAE,GAAG,GAAE,GAAG,OAAM,KAAS,QAAO;AAG/D,QAAM,SAAS,MAAM,IAAI,QAAK,IAAI,YAAY;AAG9C,QAAM,SAAS,OAAO,IAAI,QAAM,GAAG;AACnC,QAAM,UAAU,OAAO,IAAI,QAAM,GAAG,0BAA0B,GAAG;AAGjE,QAAM,WAAW,KAAK,IAAI,GAAG;AAC7B,QAAM,cAAc,QAAQ,OAAO,CAAC,KAAK,QAAQ,MAAI,KAAK;AAG1D,MAAI,EAAC,GAAG,MAAK;AAEb,MAAI,OAAO,IAAI,WAAW,OAAO;AAAO,QAAI,OAAO,QAAS,YAAW;AAAA;AAClE,SAAK;AAEV,MAAI,IAAI,OAAO;AAAG,QAAI,OAAO,IAAI;AAEjC,MAAI,OAAO,IAAI,cAAc,OAAO;AAAQ,QAAI,OAAO,SAAU,eAAc;AAAA;AAC1E,SAAK;AAEV,MAAI,IAAI,OAAO;AAAG,QAAI,OAAO,IAAI;AAEjC,QAAM,QAAQ,CAAC,OAAM,OAAM;AACzB,QAAI,SAAS,OAAM,GAAG;AACtB,SAAK,QAAQ;AAAA;AAAA;","names":[]}