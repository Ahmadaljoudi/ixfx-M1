{"version":3,"sources":["../src/collections/Set.ts"],"sourcesContent":["// ✔ UNIT TESTED\nimport { ToString } from \"../Util.js\";\nimport { SimpleEventEmitter } from \"../Events.js\";\nimport { SetMutable, SetImmutable, ValueSetEventMap } from \"./Interfaces.js\";\n\nclass StringSetImpl<V> implements SetImmutable<V> {\n  private store:Map<string, V>;\n  private keyString;\n\n  constructor(keyString?:ToString<V>, map?:Map<string, V>) {\n    this.store = map ?? new Map<string, V>();\n    this.keyString = keyString ?? defaultKeyer<V>;\n  }\n\n  get size():number {\n    return this.store.size;\n  }\n\n  add(...values:readonly V[]):SetImmutable<V> {\n    const s = new Map<string, V>(this.store);\n    for (const v of values) {\n      const key = this.keyString(v);\n      s.set(key, v);\n    }\n    return new StringSetImpl<V>(this.keyString, s);\n  }\n\n  delete(v:V):SetImmutable<V> {\n    const s = new Map<string, V>(this.store);\n    const key = this.keyString(v);\n    if (s.delete(key)) return new StringSetImpl(this.keyString, s);\n    return this;\n  }\n\n  has(v:V):boolean {\n    const key = this.keyString(v);\n    return this.store.has(key);\n  }\n\n  toArray():V[] {\n    return [...this.store.values()];\n  }\n\n  *values() {\n    yield* this.store.values();\n  }\n}\n\n/**\n * Immutable set that uses a `keyString` function to determine uniqueness\n * \n * @param keyString Function that produces a key based on a value. If unspecified, uses `JSON.stringify`.\n * @returns \n */\nexport const set = <V>(keyString:ToString<V>):SetImmutable<V> => new StringSetImpl(keyString);\n\n/**\n * Creates a {@link SetMutable}.\n * @param keyString Function that produces a key based on a value. If unspecified, uses `JSON.stringify`\n * @returns \n */\nexport const setMutable = <V>(keyString:ToString<V> | undefined = undefined):SetMutable<V> => new MutableStringSetImpl(keyString);\n\nconst defaultKeyer= <V>(a:V) => {\n  if (typeof a === `string`) { \n    return a;\n  } else { \n    return JSON.stringify(a);\n  }\n};\n\nclass MutableStringSetImpl<V> extends SimpleEventEmitter<ValueSetEventMap<V>> implements SetMutable<V> {\n  // ✔ UNIT TESTED\n  /* eslint-disable functional/prefer-readonly-type */\n  store = new Map<string, V>();\n  keyString:ToString<V>;\n\n  constructor(keyString:ToString<V> | undefined = undefined) {\n    super();\n    this.keyString = keyString ?? defaultKeyer<V>;\n  }\n\n  get size() {\n    return this.store.size;\n  }\n\n  add(...v:ReadonlyArray<V>) {\n    v.forEach(i => {\n      const isUpdated = this.has(i);\n      this.store.set(this.keyString(i), i);\n      super.fireEvent(`add`, { value: i, updated: isUpdated });\n    });\n  }\n\n  values() {\n    return this.store.values();\n  }\n\n  clear() {\n    this.store.clear();\n    super.fireEvent(`clear`, true);\n  }\n\n  delete(v:V):boolean {\n    const isDeleted = this.store.delete(this.keyString(v));\n    if (isDeleted) super.fireEvent(`delete`, v);\n    return isDeleted;\n  }\n\n  has(v:V):boolean {\n    return this.store.has(this.keyString(v));\n  }\n\n  toArray():V[] {\n    return Array.from(this.store.values());\n  }\n}"],"mappings":";;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,IAAM,gBAAN,MAAkD;AAAA,EAIhD,YAAY,WAAwB,KAAqB;AAHzD,wBAAQ;AACR,wBAAQ;AAGN,SAAK,QAAQ,OAAO,oBAAI,IAAe;AACvC,SAAK,YAAY,aAAa;AAAA,EAChC;AAAA,EAEA,IAAI,OAAc;AAChB,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA,EAEA,OAAO,QAAqC;AAC1C,UAAM,IAAI,IAAI,IAAe,KAAK,KAAK;AACvC,eAAW,KAAK,QAAQ;AACtB,YAAM,MAAM,KAAK,UAAU,CAAC;AAC5B,QAAE,IAAI,KAAK,CAAC;AAAA,IACd;AACA,WAAO,IAAI,cAAiB,KAAK,WAAW,CAAC;AAAA,EAC/C;AAAA,EAEA,OAAO,GAAqB;AAC1B,UAAM,IAAI,IAAI,IAAe,KAAK,KAAK;AACvC,UAAM,MAAM,KAAK,UAAU,CAAC;AAC5B,QAAI,EAAE,OAAO,GAAG;AAAG,aAAO,IAAI,cAAc,KAAK,WAAW,CAAC;AAC7D,WAAO;AAAA,EACT;AAAA,EAEA,IAAI,GAAa;AACf,UAAM,MAAM,KAAK,UAAU,CAAC;AAC5B,WAAO,KAAK,MAAM,IAAI,GAAG;AAAA,EAC3B;AAAA,EAEA,UAAc;AACZ,WAAO,CAAC,GAAG,KAAK,MAAM,OAAO,CAAC;AAAA,EAChC;AAAA,EAEA,CAAC,SAAS;AACR,WAAO,KAAK,MAAM,OAAO;AAAA,EAC3B;AACF;AAQO,IAAM,MAAM,CAAI,cAA0C,IAAI,cAAc,SAAS;AAOrF,IAAM,aAAa,CAAI,YAAoC,WAA4B,IAAI,qBAAqB,SAAS;AAEhI,IAAM,eAAc,CAAI,MAAQ;AAC9B,MAAI,OAAO,MAAM,UAAU;AACzB,WAAO;AAAA,EACT,OAAO;AACL,WAAO,KAAK,UAAU,CAAC;AAAA,EACzB;AACF;AAEA,IAAM,uBAAN,cAAsC,mBAAiE;AAAA,EAMrG,YAAY,YAAoC,QAAW;AACzD,UAAM;AAJR;AAAA;AAAA,iCAAQ,oBAAI,IAAe;AAC3B;AAIE,SAAK,YAAY,aAAa;AAAA,EAChC;AAAA,EAEA,IAAI,OAAO;AACT,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA,EAEA,OAAO,GAAoB;AACzB,MAAE,QAAQ,OAAK;AACb,YAAM,YAAY,KAAK,IAAI,CAAC;AAC5B,WAAK,MAAM,IAAI,KAAK,UAAU,CAAC,GAAG,CAAC;AACnC,YAAM,UAAU,OAAO,EAAE,OAAO,GAAG,SAAS,UAAU,CAAC;AAAA,IACzD,CAAC;AAAA,EACH;AAAA,EAEA,SAAS;AACP,WAAO,KAAK,MAAM,OAAO;AAAA,EAC3B;AAAA,EAEA,QAAQ;AACN,SAAK,MAAM,MAAM;AACjB,UAAM,UAAU,SAAS,IAAI;AAAA,EAC/B;AAAA,EAEA,OAAO,GAAa;AAClB,UAAM,YAAY,KAAK,MAAM,OAAO,KAAK,UAAU,CAAC,CAAC;AACrD,QAAI;AAAW,YAAM,UAAU,UAAU,CAAC;AAC1C,WAAO;AAAA,EACT;AAAA,EAEA,IAAI,GAAa;AACf,WAAO,KAAK,MAAM,IAAI,KAAK,UAAU,CAAC,CAAC;AAAA,EACzC;AAAA,EAEA,UAAc;AACZ,WAAO,MAAM,KAAK,KAAK,MAAM,OAAO,CAAC;AAAA,EACvC;AACF;","names":[]}