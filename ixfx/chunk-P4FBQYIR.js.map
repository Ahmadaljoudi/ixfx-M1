{"version":3,"sources":["../src/dom/Forms.ts"],"sourcesContent":["import {resolveEl} from \"./Util.js\";\r\n\r\n/**\r\n * Quick access to <input type=\"checkbox\"> value.\r\n * Provide a checkbox by string id or object reference. If a callback is\r\n * supplied, it will be called when the checkbox changes value.\r\n * \r\n * ```\r\n * const opt = checkbox(`#chkMate`);\r\n * opt.checked; // Gets/sets\r\n * \r\n * const opt = checkbox(document.getElementById(`#chkMate`), newVal => {\r\n *  if (newVal) ...\r\n * });\r\n * ```\r\n * @param {(string | HTMLInputElement)} domIdOrEl\r\n * @param {(currentVal:boolean) => void} [onChanged]\r\n * @returns\r\n */\r\nexport const checkbox = (domIdOrEl: string | HTMLInputElement, onChanged?:(currentVal:boolean) => void) => {\r\n  const el = resolveEl<HTMLInputElement>(domIdOrEl);\r\n\r\n  if (onChanged) {\r\n    el.addEventListener(`change`, () => {\r\n      onChanged(el.checked);\r\n    });\r\n  }\r\n  return {\r\n    get checked():boolean  {\r\n      return el.checked;\r\n    },\r\n    set checked(val:boolean) {\r\n      // eslint-disable-next-line functional/immutable-data\r\n      el.checked = val;\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Numeric INPUT\r\n * \r\n * ```\r\n * const el = numeric(`#num`, (currentValue) => {\r\n *  // Called when input changes\r\n * })\r\n * ```\r\n * \r\n * Get/set value\r\n * ```\r\n * el.value = 10;\r\n * ```\r\n * @param domIdOrEl \r\n * @param onChanged \r\n * @param live If true, event handler fires based on `input` event, rather than `change`\r\n * @returns \r\n */\r\nexport const numeric = (domIdOrEl: string | HTMLInputElement, onChanged?:(currentVal:number) => void, live?:boolean) => {\r\n  const el = resolveEl<HTMLInputElement>(domIdOrEl) as HTMLInputElement;\r\n  const evt = live ? `change` : `input`;\r\n  if (onChanged) {\r\n    el.addEventListener(evt, () => {\r\n      onChanged(parseInt(el.value));\r\n    });\r\n  }\r\n  return {\r\n    get value():number  {\r\n      return parseInt(el.value);\r\n    },\r\n    set value(val:number) {\r\n      // eslint-disable-next-line functional/immutable-data\r\n      el.value = val.toString();\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * SELECT options\r\n */\r\nexport type SelectOpts = {\r\n  /**\r\n   * Placeholder item\r\n   */\r\n  readonly placeholderOpt?:string\r\n  /**\r\n   * If true, a placeholder option 'Choose' is added to the list\r\n   */\r\n  readonly shouldAddChoosePlaceholder?:boolean\r\n  /**\r\n   * Item to choose after a selection is made\r\n   */\r\n  readonly autoSelectAfterChoice?:number\r\n}\r\n\r\n/**\r\n * Button\r\n * \r\n * ```\r\n * const b = button(`#myButton`, () => {\r\n *  console.log(`Button clicked`);\r\n * });\r\n * ```\r\n * \r\n * ```\r\n * b.click(); // Call the click handler\r\n * b.disabled = true / false;\r\n * ```\r\n * @param domQueryOrEl Query string or element instance\r\n * @param onClick Callback when button is clicked \r\n * @returns \r\n */\r\nexport const button = (domQueryOrEl:string|HTMLButtonElement, onClick?:() => void) => {\r\n  const el = resolveEl(domQueryOrEl) as HTMLButtonElement;\r\n\r\n  if (onClick) {\r\n    el.addEventListener(`click`, (_ev) => {\r\n      onClick();\r\n    });\r\n  }\r\n  return {\r\n    click() {\r\n      if (onClick) onClick();\r\n    },\r\n    set disabled(val:boolean) {\r\n      // eslint-disable-next-line functional/immutable-data\r\n      el.disabled = val;\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * SELECT handler\r\n */\r\nexport interface SelectHandler {\r\n  /** \r\n   * Sets disabled\r\n   */\r\n  set disabled(value:boolean);\r\n /** \r\n  * Gets disabled\r\n  */\r\n  get disabled():boolean;\r\n/**\r\n * Gets value\r\n */\r\n  get value():string;\r\n/**\r\n * Sets selected index\r\n */\r\n  get index():number;\r\n/**\r\n * _True_ if currently selected item is the placeholder\r\n */\r\n  get isSelectedPlaceholder():boolean;\r\n/**\r\n * Set options\r\n * @param opts Options\r\n * @param preSelect Item to preselect\r\n */\r\n  setOpts(opts:readonly string[], preSelect?:string):void;\r\n/**\r\n * Select item by index \r\n * @param index Index\r\n * @param trigger If true, triggers change event\r\n */\r\n  select(index?:number, trigger?:boolean):void\r\n}\r\n\r\n/**\r\n * SELECT element.\r\n * \r\n * Handle changes in value:\r\n * ```\r\n * const mySelect = select(`#mySelect`, (newValue) => {\r\n *  console.log(`Value is now ${newValue}`);\r\n * });\r\n * ```\r\n *\r\n * Enable/disable:\r\n * ```\r\n * mySelect.disabled = true / false;\r\n * ```\r\n * \r\n * Get currently selected index or value:\r\n * ```\r\n * mySelect.value / mySelect.index\r\n * ```\r\n * \r\n * Is the currently selected value a placeholder?\r\n * ```\r\n * mySelect.isSelectedPlaceholder\r\n * ```\r\n * \r\n * Set list of options\r\n * ```\r\n * // Adds options, preselecting `opt2`.\r\n * mySelect.setOpts([`opt1`, `opt2 ...], `opt2`);\r\n * ```\r\n * \r\n * Select an element\r\n * ```\r\n * mySelect.select(1); // Select second item\r\n * mySelect.select(1, true); // If true is added, change handler fires as well\r\n * ```\r\n * @param domQueryOrEl Query (eg `#id`) or element\r\n * @param onChanged Callback when a selection is made\r\n * @param opts Options\r\n * @return  \r\n */\r\nexport const select = (domQueryOrEl:string|HTMLSelectElement, onChanged?:(currentVal:string) => void, opts:SelectOpts = {}):SelectHandler => {\r\n  const el = resolveEl(domQueryOrEl) as HTMLSelectElement;\r\n  const {placeholderOpt, shouldAddChoosePlaceholder = false, autoSelectAfterChoice = -1} = opts;\r\n\r\n  const change = () => {\r\n    if (onChanged !== undefined) onChanged(el.value);\r\n    // eslint-disable-next-line functional/immutable-data\r\n    if (autoSelectAfterChoice >= 0) el.selectedIndex = autoSelectAfterChoice;\r\n  };\r\n\r\n  if (onChanged) {\r\n    el.addEventListener(`change`, (_ev) => {\r\n      change();\r\n    });\r\n  }\r\n  return {\r\n    set disabled(val:boolean) {\r\n      // eslint-disable-next-line functional/immutable-data\r\n      el.disabled = val;\r\n    },\r\n    get value():string {\r\n      return el.value;\r\n    },\r\n    get index():number {\r\n      return el.selectedIndex;\r\n    },\r\n    get isSelectedPlaceholder():boolean {\r\n      return ((shouldAddChoosePlaceholder || opts.placeholderOpt !== undefined) && el.selectedIndex === 0);\r\n    },\r\n    setOpts(opts:string[], preSelect?:string):void {\r\n      // eslint-disable-next-line functional/immutable-data\r\n      el.options.length = 0;\r\n      \r\n      if (shouldAddChoosePlaceholder) opts = [`-- Choose --`, ...opts];\r\n      else if (placeholderOpt !== undefined) opts = [placeholderOpt, ...opts];\r\n      // eslint-disable-next-line functional/no-let\r\n      let toSelect = 0;\r\n      \r\n      opts.forEach((o, index) => {\r\n        const optEl = document.createElement(`option`);\r\n        // eslint-disable-next-line functional/immutable-data\r\n        optEl.value = o;\r\n        // eslint-disable-next-line functional/immutable-data\r\n        optEl.innerHTML = o;\r\n        if (preSelect !== undefined && o === preSelect) toSelect = index;\r\n        el.options.add(optEl);\r\n      });\r\n      // eslint-disable-next-line functional/immutable-data\r\n      el.selectedIndex = toSelect;\r\n    },\r\n    select(index:number = 0, trigger:boolean = false):void {\r\n      // eslint-disable-next-line functional/immutable-data\r\n      el.selectedIndex = index;\r\n      if (trigger && onChanged) {\r\n        change();\r\n      } \r\n    }\r\n  };\r\n};"],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBO,IAAM,WAAW,CAAC,WAAsC,cAA4C;AACzG,QAAM,KAAK,UAA4B,SAAS;AAEhD,MAAI,WAAW;AACb,OAAG,iBAAiB,UAAU,MAAM;AAClC,gBAAU,GAAG,OAAO;AAAA,IACtB,CAAC;AAAA,EACH;AACA,SAAO;AAAA,QACD,UAAmB;AACrB,aAAO,GAAG;AAAA,IACZ;AAAA,QACI,QAAQ,KAAa;AAEvB,SAAG,UAAU;AAAA,IACf;AAAA,EACF;AACF;AAoBO,IAAM,UAAU,CAAC,WAAsC,WAAwC,SAAkB;AACtH,QAAM,KAAK,UAA4B,SAAS;AAChD,QAAM,MAAM,OAAO,WAAW;AAC9B,MAAI,WAAW;AACb,OAAG,iBAAiB,KAAK,MAAM;AAC7B,gBAAU,SAAS,GAAG,KAAK,CAAC;AAAA,IAC9B,CAAC;AAAA,EACH;AACA,SAAO;AAAA,QACD,QAAgB;AAClB,aAAO,SAAS,GAAG,KAAK;AAAA,IAC1B;AAAA,QACI,MAAM,KAAY;AAEpB,SAAG,QAAQ,IAAI,SAAS;AAAA,IAC1B;AAAA,EACF;AACF;AAqCO,IAAM,SAAS,CAAC,cAAuC,YAAwB;AACpF,QAAM,KAAK,UAAU,YAAY;AAEjC,MAAI,SAAS;AACX,OAAG,iBAAiB,SAAS,CAAC,QAAQ;AACpC,cAAQ;AAAA,IACV,CAAC;AAAA,EACH;AACA,SAAO;AAAA,IACL,QAAQ;AACN,UAAI;AAAS,gBAAQ;AAAA,IACvB;AAAA,QACI,SAAS,KAAa;AAExB,SAAG,WAAW;AAAA,IAChB;AAAA,EACF;AACF;AAiFO,IAAM,SAAS,CAAC,cAAuC,WAAwC,OAAkB,CAAC,MAAoB;AAC3I,QAAM,KAAK,UAAU,YAAY;AACjC,QAAM,EAAC,gBAAgB,6BAA6B,OAAO,wBAAwB,OAAM;AAEzF,QAAM,SAAS,MAAM;AACnB,QAAI,cAAc;AAAW,gBAAU,GAAG,KAAK;AAE/C,QAAI,yBAAyB;AAAG,SAAG,gBAAgB;AAAA,EACrD;AAEA,MAAI,WAAW;AACb,OAAG,iBAAiB,UAAU,CAAC,QAAQ;AACrC,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AACA,SAAO;AAAA,QACD,SAAS,KAAa;AAExB,SAAG,WAAW;AAAA,IAChB;AAAA,QACI,QAAe;AACjB,aAAO,GAAG;AAAA,IACZ;AAAA,QACI,QAAe;AACjB,aAAO,GAAG;AAAA,IACZ;AAAA,QACI,wBAAgC;AAClC,aAAS,+BAA8B,KAAK,mBAAmB,WAAc,GAAG,kBAAkB;AAAA,IACpG;AAAA,IACA,QAAQ,OAAe,WAAwB;AAE7C,SAAG,QAAQ,SAAS;AAEpB,UAAI;AAA4B,gBAAO,CAAC,gBAAgB,GAAG,KAAI;AAAA,eACtD,mBAAmB;AAAW,gBAAO,CAAC,gBAAgB,GAAG,KAAI;AAEtE,UAAI,WAAW;AAEf,YAAK,QAAQ,CAAC,GAAG,UAAU;AACzB,cAAM,QAAQ,SAAS,cAAc,QAAQ;AAE7C,cAAM,QAAQ;AAEd,cAAM,YAAY;AAClB,YAAI,cAAc,UAAa,MAAM;AAAW,qBAAW;AAC3D,WAAG,QAAQ,IAAI,KAAK;AAAA,MACtB,CAAC;AAED,SAAG,gBAAgB;AAAA,IACrB;AAAA,IACA,OAAO,QAAe,GAAG,UAAkB,OAAY;AAErD,SAAG,gBAAgB;AACnB,UAAI,WAAW,WAAW;AACxB,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF;","names":[]}