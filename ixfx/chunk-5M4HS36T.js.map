{"version":3,"sources":["../src/Guards.ts"],"sourcesContent":["\nexport type NumberGuardRange = \n/**\n * No range checking\n */\n  `` | \n  /**\n   * Can be any number, except zero\n   */\n  `nonZero` | \n  `positive` | \n  `negative` | \n  /**\n   * Must be above zero\n   */\n  `aboveZero` | \n  `belowZero` | \n  `percentage` | \n  `bipolar`;\n\n/**\n * Throws an error if `t` is not a number or within specified range.\n * Use an empty string for no special range constraints.\n * Alternatives: {@link integer} for additional integer check, {@link percent} for percentage-range.\n * \n * * positive: must be at least zero\n * * negative: must be zero or lower\n * * aboveZero: must be above zero\n * * belowZero: must be below zero\n * * percentage: must be within 0-1, inclusive\n * * nonZero: can be anything except zero\n * * bipolar: can be -1 to 1, inclusive\n * @param value Value to check\n * @param paramName Name of parameter (for more helpful exception messages)\n * @param range Range to enforce\n * @returns \n */\nexport const number = (value?:number, range:NumberGuardRange = ``, paramName = `?`):boolean => {\n  if (typeof value === `undefined`) throw new Error(`Parameter ${paramName} is undefined`);\n  if (Number.isNaN(value)) throw new Error(`Parameter '${paramName}' is NaN`);\n  if (typeof value !== `number`) throw new Error(`Parameter '${paramName}' is not a number (${value})`);\n  switch (range) {\n  case `positive`:\n    if (value < 0) throw new Error(`Parameter '${paramName}' must be at least zero (${value})`);\n    break;\n  case `negative`:\n    if (value > 0) throw new Error(`Parameter '${paramName}' must be zero or lower (${value})`);\n    break;\n  case `aboveZero`:\n    if (value <= 0) throw new Error(`Parameter '${paramName}' must be above zero (${value})`);\n    break;\n  case `belowZero`:\n    if (value >= 0) throw new Error(`Parameter '${paramName}' must be below zero (${value})`);\n    break;\n  case `percentage`:\n    if (value > 1 || value < 0) throw new Error(`Parameter '${paramName}' must be in percentage range (0 to 1). (${value})`);\n    break;\n  case `nonZero`:\n    if (value === 0) throw new Error(`Parameter '${paramName}' must non-zero. (${value})`);\n    break;\n  case `bipolar`:\n    if (value > 1 || value < -1) throw new Error(`Parameter '${paramName}' must be in bipolar percentage range (-1 to 1). (${value})`);\n    break;\n  }\n  return true;\n};\n\n/**\n * Throws if `value` is _undefined_ or _null_.\n * @param value \n * @param paramName \n */\nexport const nullUndef = (value:any, paramName = '?') => {\n  if (typeof value === `undefined`) throw new Error(`${paramName} param is undefined`);\n  if (value === null) throw new Error(`${paramName} param is null`);\n\n}\n/**\n * Throws an error if `value` is not in the range of 0-1.\n * Equiv to `number(value, `percentage`);`\n * \n * This is the same as calling ```number(t, `percentage`)```\n * @param value Value to check\n * @param paramName Param name for customising exception message\n * @returns \n */\nexport const percent = (value:number, paramName = `?`) => number(value, `percentage`, paramName);\n\n/**\n * Throws an error if `value` is not an integer, or does not meet guard criteria.\n * See {@link number} for guard details, or use that if integer checking is not required.\n * \n * Note:\n * * `bipolar` will mean -1, 0 or 1.\n * * positive: must be at least zero\n * * negative: must be zero or lower\n * * aboveZero: must be above zero\n * * belowZero: must be below zero\n * * percentage: must be within 0-1, inclusive\n * * nonZero: can be anything except zero\n * @param value Value to check\n * @param paramName Param name for customising exception message\n * @param range Guard specifier.\n */\nexport const integer = (value:number, range:NumberGuardRange = ``, paramName = `?`) => {\n  // ✔️ Unit tested\n  number(value, range, paramName);\n  if (!Number.isInteger(value)) throw new Error(`Parameter ${paramName} is not an integer`);\n};\n\n/**\n * Parses `value` as an integer, returning it if it meets the `range` criteria.\n * If not, `defaultValue` is returned.\n * \n * ```js\n * const i = integerParse('10', 'positive');    // 10\n * const i = integerParse('10.5', 'positive');  // 10\n * const i = integerParse('0', 'nonZero', 100); // 100\n * ```\n * \n * NaN is returned if criteria does not match and no default is given\n * ```js\n * const i = integerParse('10', 'negative');    // NaN\n * ```\n * \n * @param value \n * @param range \n * @param defaultValue \n * @returns \n */\nexport const integerParse = (value:any, range:NumberGuardRange = ``, defaultValue:number = Number.NaN)  => {\n  // ✔️ Unit tested\n  if (value === undefined) return defaultValue;\n  if (value === null) return defaultValue;\n  try {\n    integer(Number.parseInt (value), range, 'parsed');\n  } catch (ex) {\n    return defaultValue;\n  }\n  return parseInt(value);\n}\n\n/**\n * Returns true if parameter is an array of strings\n * @param value \n * @returns \n */\nexport const isStringArray = (value:unknown):boolean => {\n  if (!Array.isArray(value)) return false;\n  return value.find(v => typeof v !== `string`) === undefined;\n};\n\n/**\n * Throws an error if parameter is not an array\n * @param value\n * @param paramName \n */\nexport const array = (value:unknown, paramName = `?`):void => {\n  if (!Array.isArray(value)) throw new Error(`Parameter '${paramName}' is expected to be an array'`);\n};\n\n/** Throws an error if parameter is not defined */\nexport const defined = <T>(argument:T | undefined):argument is T => argument !== undefined;\n"],"mappings":";AAqCO,IAAM,SAAS,CAAC,OAAe,QAAyB,IAAI,YAAY,QAAgB;AAC7F,MAAI,OAAO,UAAU;AAAa,UAAM,IAAI,MAAM,aAAa,wBAAwB;AACvF,MAAI,OAAO,MAAM,KAAK;AAAG,UAAM,IAAI,MAAM,cAAc,mBAAmB;AAC1E,MAAI,OAAO,UAAU;AAAU,UAAM,IAAI,MAAM,cAAc,+BAA+B,QAAQ;AACpG,UAAQ,OAAO;AAAA,IACf,KAAK;AACH,UAAI,QAAQ;AAAG,cAAM,IAAI,MAAM,cAAc,qCAAqC,QAAQ;AAC1F;AAAA,IACF,KAAK;AACH,UAAI,QAAQ;AAAG,cAAM,IAAI,MAAM,cAAc,qCAAqC,QAAQ;AAC1F;AAAA,IACF,KAAK;AACH,UAAI,SAAS;AAAG,cAAM,IAAI,MAAM,cAAc,kCAAkC,QAAQ;AACxF;AAAA,IACF,KAAK;AACH,UAAI,SAAS;AAAG,cAAM,IAAI,MAAM,cAAc,kCAAkC,QAAQ;AACxF;AAAA,IACF,KAAK;AACH,UAAI,QAAQ,KAAK,QAAQ;AAAG,cAAM,IAAI,MAAM,cAAc,qDAAqD,QAAQ;AACvH;AAAA,IACF,KAAK;AACH,UAAI,UAAU;AAAG,cAAM,IAAI,MAAM,cAAc,8BAA8B,QAAQ;AACrF;AAAA,IACF,KAAK;AACH,UAAI,QAAQ,KAAK,QAAQ;AAAI,cAAM,IAAI,MAAM,cAAc,8DAA8D,QAAQ;AACjI;AAAA,EACF;AACA,SAAO;AACT;AAOO,IAAM,YAAY,CAAC,OAAW,YAAY,QAAQ;AACvD,MAAI,OAAO,UAAU;AAAa,UAAM,IAAI,MAAM,GAAG,8BAA8B;AACnF,MAAI,UAAU;AAAM,UAAM,IAAI,MAAM,GAAG,yBAAyB;AAElE;AAUO,IAAM,UAAU,CAAC,OAAc,YAAY,QAAQ,OAAO,OAAO,cAAc,SAAS;AAkBxF,IAAM,UAAU,CAAC,OAAc,QAAyB,IAAI,YAAY,QAAQ;AAErF,SAAO,OAAO,OAAO,SAAS;AAC9B,MAAI,CAAC,OAAO,UAAU,KAAK;AAAG,UAAM,IAAI,MAAM,aAAa,6BAA6B;AAC1F;AAsBO,IAAM,eAAe,CAAC,OAAW,QAAyB,IAAI,eAAsB,OAAO,QAAS;AAEzG,MAAI,UAAU;AAAW,WAAO;AAChC,MAAI,UAAU;AAAM,WAAO;AAC3B,MAAI;AACF,YAAQ,OAAO,SAAU,KAAK,GAAG,OAAO,QAAQ;AAAA,EAClD,SAAS,IAAP;AACA,WAAO;AAAA,EACT;AACA,SAAO,SAAS,KAAK;AACvB;AAOO,IAAM,gBAAgB,CAAC,UAA0B;AACtD,MAAI,CAAC,MAAM,QAAQ,KAAK;AAAG,WAAO;AAClC,SAAO,MAAM,KAAK,OAAK,OAAO,MAAM,QAAQ,MAAM;AACpD;AAOO,IAAM,QAAQ,CAAC,OAAe,YAAY,QAAa;AAC5D,MAAI,CAAC,MAAM,QAAQ,KAAK;AAAG,UAAM,IAAI,MAAM,cAAc,wCAAwC;AACnG;","names":[]}