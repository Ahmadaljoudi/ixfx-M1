{"version":3,"sources":["../src/Guards.ts"],"sourcesContent":["\r\nexport type NumberGuardRange = \r\n/**\r\n * No range checking\r\n */\r\n  `` | \r\n  /**\r\n   * Can be any number, except zero\r\n   */\r\n  `nonZero` | \r\n  `positive` | \r\n  `negative` | \r\n  /**\r\n   * Must be above zero\r\n   */\r\n  `aboveZero` | \r\n  `belowZero` | \r\n  `percentage` | \r\n  `bipolar`;\r\n\r\n/**\r\n * Throws an error if `t` is not a number or within specified range. \r\n * Alternatives: {@link integer} for additional integer check, {@link percentage}.\r\n * \r\n * * positive: must be at least zero\r\n * * negative: must be zero or lower\r\n * * aboveZero: must be above zero\r\n * * belowZero: must be below zero\r\n * * percentage: must be within 0-1, inclusive\r\n * * nonZero: can be anything except zero\r\n * * bipolar: can be -1 to 1, inclusive\r\n * @param value Value to check\r\n * @param paramName Name of parameter (for more helpful exception messages)\r\n * @param range Range to enforce\r\n * @returns \r\n */\r\nexport const number = (value:number, range:NumberGuardRange = ``, paramName = `?`):boolean => {\r\n  if (Number.isNaN(value)) throw new Error(`Parameter '${paramName}' is NaN`);\r\n  if (typeof value !== `number`) throw new Error(`Parameter '${paramName}' is not a number (${value})`);\r\n  switch (range) {\r\n  case `positive`:\r\n    if (value < 0) throw new Error(`Parameter ${paramName} must be at least zero (${value})`);\r\n    break;\r\n  case `negative`:\r\n    if (value > 0) throw new Error(`Parameter ${paramName} must be zero or lower (${value})`);\r\n    break;\r\n  case `aboveZero`:\r\n    if (value <= 0) throw new Error(`Parameter ${paramName} must be above zero (${value})`);\r\n    break;\r\n  case `belowZero`:\r\n    if (value >= 0) throw new Error(`Parameter ${paramName} must be below zero (${value})`);\r\n    break;\r\n  case `percentage`:\r\n    if (value > 1 || value < 0) throw new Error(`Parameter ${paramName} must be in percentage range (0 to 1). (${value})`);\r\n    break;\r\n  case `nonZero`:\r\n    if (value === 0) throw new Error(`Parameter ${paramName} must non-zero. (${value})`);\r\n    break;\r\n  case `bipolar`:\r\n    if (value > 1 || value < -1) throw new Error(`Parameter ${paramName} must be in bipolar percentage range (-1 to 1). (${value})`);\r\n    break;\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n * Throws an error if `value` is not in the range of 0-1.\r\n * Equiv to `number(value, `percentage`);`\r\n * \r\n * This is the same as calling ```number(t, `percentage`)```\r\n * @param value Value to check\r\n * @param paramName Param name for customising exception message\r\n * @returns \r\n */\r\nexport const percent = (value: number, paramName = `?`) => number(value, `percentage`, paramName);\r\n\r\n/**\r\n * Throws an error if `value` is not an integer, or does not meet guard criteria.\r\n * See {@link number} for guard details, or use that if integer checking is not required.\r\n * @param value Value to check\r\n * @param paramName Param name for customising exception message\r\n * @param range Guard specifier.\r\n */\r\nexport const integer = (value:number, range:NumberGuardRange = ``, paramName = `?`) => {\r\n  // Unit tested\r\n  number(value, range, paramName);\r\n  if (!Number.isInteger(value)) throw new Error(`Paramter ${paramName} is not an integer`);\r\n};\r\n\r\n/**\r\n * Returns true if parameter is an array of strings\r\n * @param value \r\n * @returns \r\n */\r\nexport const isStringArray = (value:unknown):boolean => {\r\n  if (!Array.isArray(value)) return false;\r\n  return value.find(v => typeof v !== `string`) === undefined;\r\n};\r\n\r\n/**\r\n * Throws an error if parameter is not an array\r\n * @param value\r\n * @param paramName \r\n */\r\nexport const array = (value: unknown, paramName = `?`): void => {\r\n  if (!Array.isArray(value)) throw new Error(`Parameter '${paramName}' is expected to be an array'`);\r\n};\r\n\r\n/** Throws an error if parameter is not defined */\r\nexport const defined = <T>(argument: T | undefined): argument is T => argument !== undefined;\r\n"],"mappings":";AAoCO,IAAM,SAAS,CAAC,OAAc,QAAyB,IAAI,YAAY,QAAgB;AAC5F,MAAI,OAAO,MAAM;AAAQ,UAAM,IAAI,MAAM,cAAc;AACvD,MAAI,OAAO,UAAU;AAAU,UAAM,IAAI,MAAM,cAAc,+BAA+B;AAC5F,UAAQ;AAAA,SACH;AACH,UAAI,QAAQ;AAAG,cAAM,IAAI,MAAM,aAAa,oCAAoC;AAChF;AAAA,SACG;AACH,UAAI,QAAQ;AAAG,cAAM,IAAI,MAAM,aAAa,oCAAoC;AAChF;AAAA,SACG;AACH,UAAI,SAAS;AAAG,cAAM,IAAI,MAAM,aAAa,iCAAiC;AAC9E;AAAA,SACG;AACH,UAAI,SAAS;AAAG,cAAM,IAAI,MAAM,aAAa,iCAAiC;AAC9E;AAAA,SACG;AACH,UAAI,QAAQ,KAAK,QAAQ;AAAG,cAAM,IAAI,MAAM,aAAa,oDAAoD;AAC7G;AAAA,SACG;AACH,UAAI,UAAU;AAAG,cAAM,IAAI,MAAM,aAAa,6BAA6B;AAC3E;AAAA,SACG;AACH,UAAI,QAAQ,KAAK,QAAQ;AAAI,cAAM,IAAI,MAAM,aAAa,6DAA6D;AACvH;AAAA;AAEF,SAAO;AAAA;AAYF,IAAM,UAAU,CAAC,OAAe,YAAY,QAAQ,OAAO,OAAO,cAAc;AAShF,IAAM,UAAU,CAAC,OAAc,QAAyB,IAAI,YAAY,QAAQ;AAErF,SAAO,OAAO,OAAO;AACrB,MAAI,CAAC,OAAO,UAAU;AAAQ,UAAM,IAAI,MAAM,YAAY;AAAA;AAQrD,IAAM,gBAAgB,CAAC,UAA0B;AACtD,MAAI,CAAC,MAAM,QAAQ;AAAQ,WAAO;AAClC,SAAO,MAAM,KAAK,OAAK,OAAO,MAAM,cAAc;AAAA;AAQ7C,IAAM,QAAQ,CAAC,OAAgB,YAAY,QAAc;AAC9D,MAAI,CAAC,MAAM,QAAQ;AAAQ,UAAM,IAAI,MAAM,cAAc;AAAA;","names":[]}