{"version":3,"sources":["../src/modulation/Easing.ts"],"sourcesContent":["// Easings from https://easings.net/\r\nimport {msElapsedTimer, HasCompletion, relativeTimer, ticksElapsedTimer, TimerSource} from '../flow/Timer.js';\r\n\r\nconst sqrt = Math.sqrt;\r\nconst pow = Math.pow;\r\nconst cos = Math.cos;\r\n//eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst pi = Math.PI;\r\nconst sin = Math.sin;\r\n/*\r\ntype RelativeTimer = {\r\n  reset(): void\r\n  elapsed(): number\r\n  isDone(): boolean\r\n}\r\n\r\ntype TimerSource = (upperBound: number) => RelativeTimer;\r\n\r\nconst msRelativeTimer = function (upperBound: number): RelativeTimer {\r\n  let start = performance.now();\r\n  return {\r\n    reset: () => {\r\n      start = performance.now();\r\n    },\r\n    elapsed: () => clamp((performance.now() - start) / upperBound),\r\n    isDone: () => (performance.now() - start) >= upperBound,\r\n  };\r\n};\r\n\r\nconst tickRelativeTimer = function (upperBound: number): RelativeTimer {\r\n  let start = 0;\r\n  return {\r\n    reset: () => {\r\n      start = 0;\r\n    },\r\n    elapsed: () => clamp(start++ / upperBound),\r\n    isDone: () => start >= upperBound,\r\n  };\r\n};\r\n*/\r\n\r\ntype EasingFn = (x: number) => number;\r\n\r\n/**\r\n * Creates an easing based on clock time\r\n * @inheritdoc Easing\r\n * @example Time based easing\r\n * ```\r\n * const t = time(`quintIn`, 5*1000); // Will take 5 seconds to complete\r\n * ...\r\n * t.compute(); // Get current value of easing\r\n * t.reset();   // Reset to 0\r\n * t.isDone;    // _True_ if finished\r\n * ```\r\n * @param name Name of easing\r\n * @param durationMs Duration in milliseconds\r\n * @returns Easing\r\n */\r\nexport const time = function (name: EasingName, durationMs: number):Easing {\r\n  return create(name, durationMs, msElapsedTimer);\r\n};\r\n\r\n/**\r\n * Creates an easing based on ticks\r\n * \r\n * @inheritdoc Easing\r\n * @example Tick-based easing\r\n * ```\r\n * const t = tick(`sineIn`, 1000);   // Will take 1000 ticks to complete\r\n * t.compute(); // Each call to `compute` progresses the tick count\r\n * t.reset();   // Reset to 0\r\n * t.isDone;    // _True_ if finished\r\n * ```\r\n * @param name Name of easing\r\n * @param durationTicks Duration in ticks\r\n * @returns Easing\r\n */\r\nexport const tick = function (name: EasingName, durationTicks: number):Easing {\r\n  return create(name, durationTicks, ticksElapsedTimer);\r\n};\r\n\r\n/**\r\n * 'Ease' from `0` to `1` over a delicious curve. Commonly used for animation\r\n * and basic modelling of phyical motion. \r\n * \r\n * Create via {@link tick} or {@link time}, call `compute` to calculate the next\r\n * value in the progression, until you reach `1` or `isDone` returns true.\r\n * \r\n */\r\nexport type Easing = HasCompletion & {\r\n/**\r\n * Computes the current value of the easing\r\n *\r\n * @returns {number}\r\n */\r\n  compute(): number\r\n\r\n/**\r\n * Reset the easing\r\n */\r\n  reset(): void\r\n/**\r\n * Returns true if the easing is complete\r\n *\r\n * @returns {boolean}\r\n */\r\n  get isDone(): boolean\r\n};\r\n\r\n/**\r\n * Creates a new easing by name\r\n *\r\n * @param name Name of easing\r\n * @param duration Duration (meaning depends on timer source)\r\n * @param timerSource Timer source. Eg {@link tickRelativeTimer}, {@link msRelativeTimer}\r\n * @returns\r\n */\r\nconst create = function (name: EasingName, duration: number, timerSource: TimerSource): Easing {\r\n  const fn = get(name);\r\n  if (fn === undefined) throw new Error(`Easing function not found: ${name}`);\r\n  // Get a relative version of timer\r\n  const timer = relativeTimer(duration, timerSource(), true);\r\n\r\n  return {\r\n    get isDone() {\r\n      return timer.isDone;\r\n    },\r\n    compute: () => {\r\n      const relative = timer.elapsed;\r\n      return fn(relative);\r\n    },\r\n    reset: () => {\r\n      timer.reset();\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nexport type EasingName = keyof typeof functions;\r\n\r\n/**\r\n * Returns an easing function by name, or _undefined_ if not found.\r\n * This is a manual way of working with easing functions. If you want to\r\n * ease over time or ticks, use {@link time} or {@link ticks}.\r\n * \r\n * ```js\r\n * const fn = Easings.get(`sineIn`);\r\n * // Returns 'eased' transformation of 0.5\r\n * fn(0.5); \r\n * ```\r\n * @param easingName eg `sineIn`\r\n * @returns Easing function\r\n */\r\nexport const get = function (easingName: EasingName): EasingFn|undefined {\r\n  if (easingName === null) throw new Error(`easingName is null`);\r\n  if (easingName === undefined) throw new Error(`easingName is undefined`);\r\n  const name = easingName.toLocaleLowerCase();\r\n  const found = Object\r\n    .entries(functions)\r\n    .find(([k, _v]) => k.toLocaleLowerCase() === name);\r\n\r\n  if (found === undefined) return found;\r\n  return found[1];\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns Returns list of available easing names\r\n */\r\nexport const getEasings = function ():readonly string[] {\r\n  return Array.from(Object.keys(functions));\r\n};\r\n\r\nconst bounceOut = function (x:number): number {\r\n  const n1 = 7.5625;\r\n  const d1 = 2.75;\r\n\r\n  if (x < 1 / d1) {\r\n    return n1 * x * x;\r\n  } else if (x < 2 / d1) {\r\n    return n1 * (x -= 1.5 / d1) * x + 0.75;\r\n  } else if (x < 2.5 / d1) {\r\n    return n1 * (x -= 2.25 / d1) * x + 0.9375;\r\n  } else {\r\n    return n1 * (x -= 2.625 / d1) * x + 0.984375;\r\n  }\r\n};\r\n\r\nexport const functions = {\r\n  sineIn: (x: number): number => 1 - cos((x * pi) / 2),\r\n  sineOut: (x: number): number => sin((x * pi) / 2),\r\n  quadIn: (x: number): number => x * x,\r\n  quadOut: (x: number): number => 1 - (1 - x) * (1 - x),\r\n  sineInOut: (x: number): number => -(cos(pi * x) - 1) / 2,\r\n  quadInOut: (x: number): number => (x < 0.5 ? 2 * x * x : 1 - pow(-2 * x + 2, 2) / 2),\r\n  cubicIn: (x: number): number => x * x * x,\r\n  cubicOut: (x: number): number => 1 - pow(1 - x, 3),\r\n  quartIn: (x: number): number => x * x * x * x,\r\n  quartOut: (x: number): number => 1 - pow(1 - x, 4),\r\n  quintIn: (x: number): number => x * x * x * x * x,\r\n  quintOut: (x: number): number => 1 - pow(1 - x, 5),\r\n  expoIn: (x: number): number => (x === 0 ? 0 : pow(2, 10 * x - 10)),\r\n  expoOut: (x: number): number => (x === 1 ? 1 : 1 - pow(2, -10 * x)),\r\n  quintInOut: (x: number): number => (x < 0.5 ? 16 * x * x * x * x * x : 1 - pow(-2 * x + 2, 5) / 2),\r\n  expoInOut: (x: number): number => (x === 0\r\n    ? 0\r\n    : x === 1\r\n      ? 1\r\n      : x < 0.5 ? pow(2, 20 * x - 10) / 2\r\n        : (2 - pow(2, -20 * x + 10)) / 2),\r\n  circIn: (x: number): number => 1 - sqrt(1 - pow(x, 2)),\r\n  circOut: (x: number): number => sqrt(1 - pow(x - 1, 2)),\r\n  backIn: (x: number): number => {\r\n    const c1 = 1.70158;\r\n    const c3 = c1 + 1;\r\n\r\n    return c3 * x * x * x - c1 * x * x;\r\n  },\r\n  backOut: (x: number): number => {\r\n    const c1 = 1.70158;\r\n    const c3 = c1 + 1;\r\n\r\n    return 1 + c3 * pow(x - 1, 3) + c1 * pow(x - 1, 2);\r\n  },\r\n  circInOut: (x: number): number => (x < 0.5\r\n    ? (1 - sqrt(1 - pow(2 * x, 2))) / 2\r\n    : (sqrt(1 - pow(-2 * x + 2, 2)) + 1) / 2),\r\n  backInOut: (x: number): number => {\r\n    const c1 = 1.70158;\r\n    const c2 = c1 * 1.525;\r\n\r\n    return x < 0.5\r\n      ? (pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2)) / 2\r\n      : (pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2;\r\n  },\r\n  elasticIn: (x: number): number => {\r\n    const c4 = (2 * pi) / 3;\r\n\r\n    return x === 0\r\n      ? 0\r\n      : x === 1\r\n        ? 1\r\n        : -pow(2, 10 * x - 10) * sin((x * 10 - 10.75) * c4);\r\n  },\r\n  elasticOut: (x: number): number => {\r\n    const c4 = (2 * pi) / 3;\r\n\r\n    return x === 0\r\n      ? 0\r\n      : x === 1\r\n        ? 1\r\n        : pow(2, -10 * x) * sin((x * 10 - 0.75) * c4) + 1;\r\n  },\r\n  bounceIn: (x: number): number => 1 - bounceOut(1 - x),\r\n  bounceOut: bounceOut,\r\n  elasticInOut: (x: number): number => {\r\n    const c5 = (2 * pi) / 4.5;\r\n\r\n    return x === 0\r\n      ? 0\r\n      : x === 1\r\n        ? 1\r\n        : x < 0.5\r\n          ? -(pow(2, 20 * x - 10) * sin((20 * x - 11.125) * c5)) / 2\r\n          : (pow(2, -20 * x + 10) * sin((20 * x - 11.125) * c5)) / 2 + 1;\r\n  },\r\n  bounceInOut: (x: number): number => (x < 0.5\r\n    ? (1 - bounceOut(1 - 2 * x)) / 2\r\n    : (1 + bounceOut(2 * x - 1)) / 2)\r\n};"],"mappings":"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","names":[]}